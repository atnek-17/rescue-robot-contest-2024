
F767_unit_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008854  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08008a54  08008a54  00018a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b3c  08008b3c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008b3c  08008b3c  00018b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b44  08008b44  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b44  08008b44  00018b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b48  08008b48  00018b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d4  20000080  08008bcc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  08008bcc  00020554  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133b0  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027a2  00000000  00000000  0003345e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001190  00000000  00000000  00035c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001048  00000000  00000000  00036d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027d8a  00000000  00000000  00037dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0cd  00000000  00000000  0005fb62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6c51  00000000  00000000  0006dc2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164880  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c94  00000000  00000000  001648fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08008a3c 	.word	0x08008a3c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08008a3c 	.word	0x08008a3c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <JY901_init>:
 *      Author: fukuj
 */
#include "JY901.h"


void JY901_init(I2C_HandleTypeDef *handler){
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
		JY901_I2C = handler;
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <JY901_init+0x1c>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	200000b8 	.word	0x200000b8

08000600 <JY901_calibration>:

void JY901_calibration(uint32_t time , uint8_t cmd){
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	6078      	str	r0, [r7, #4]
 8000608:	460b      	mov	r3, r1
 800060a:	70fb      	strb	r3, [r7, #3]
	uint8_t send_cmd[3];
	uint8_t cycletime = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
	if(time > 1000){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000616:	d905      	bls.n	8000624 <JY901_calibration+0x24>
		cycletime = time / 1000;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a33      	ldr	r2, [pc, #204]	; (80006e8 <JY901_calibration+0xe8>)
 800061c:	fba2 2303 	umull	r2, r3, r2, r3
 8000620:	099b      	lsrs	r3, r3, #6
 8000622:	73fb      	strb	r3, [r7, #15]
	}
	switch(cmd){
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	3b01      	subs	r3, #1
 8000628:	2b03      	cmp	r3, #3
 800062a:	d858      	bhi.n	80006de <JY901_calibration+0xde>
 800062c:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <JY901_calibration+0x34>)
 800062e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000632:	bf00      	nop
 8000634:	08000645 	.word	0x08000645
 8000638:	0800066d 	.word	0x0800066d
 800063c:	0800068f 	.word	0x0800068f
 8000640:	080006b7 	.word	0x080006b7
	case 1:
		send_cmd[0] = 0x01;
 8000644:	2301      	movs	r3, #1
 8000646:	733b      	strb	r3, [r7, #12]
		send_cmd[1]=0x01;
 8000648:	2301      	movs	r3, #1
 800064a:	737b      	strb	r3, [r7, #13]
		send_cmd[2]=0x00;
 800064c:	2300      	movs	r3, #0
 800064e:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(JY901_I2C,JY901_I2C_ADDRESS,(uint8_t*)send_cmd,3,0xF);
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <JY901_calibration+0xec>)
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	f107 020c 	add.w	r2, r7, #12
 8000658:	230f      	movs	r3, #15
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2303      	movs	r3, #3
 800065e:	21a0      	movs	r1, #160	; 0xa0
 8000660:	f004 f932 	bl	80048c8 <HAL_I2C_Master_Transmit>
		HAL_Delay(time);
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f003 f9c5 	bl	80039f4 <HAL_Delay>
		break;
 800066a:	e038      	b.n	80006de <JY901_calibration+0xde>

	case 2:
		send_cmd[0]=0x01;
 800066c:	2301      	movs	r3, #1
 800066e:	733b      	strb	r3, [r7, #12]
		send_cmd[1]=0x02;
 8000670:	2302      	movs	r3, #2
 8000672:	737b      	strb	r3, [r7, #13]
		send_cmd[2]=0x00;
 8000674:	2300      	movs	r3, #0
 8000676:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(JY901_I2C,JY901_I2C_ADDRESS,(uint8_t*)send_cmd,3,0xF);
 8000678:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <JY901_calibration+0xec>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	f107 020c 	add.w	r2, r7, #12
 8000680:	230f      	movs	r3, #15
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	2303      	movs	r3, #3
 8000686:	21a0      	movs	r1, #160	; 0xa0
 8000688:	f004 f91e 	bl	80048c8 <HAL_I2C_Master_Transmit>
		break;
 800068c:	e027      	b.n	80006de <JY901_calibration+0xde>

	case 3:
		send_cmd[0]=0x01;
 800068e:	2301      	movs	r3, #1
 8000690:	733b      	strb	r3, [r7, #12]
		send_cmd[1]=0x00;
 8000692:	2300      	movs	r3, #0
 8000694:	737b      	strb	r3, [r7, #13]
		send_cmd[2]=0x00;
 8000696:	2300      	movs	r3, #0
 8000698:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(JY901_I2C,JY901_I2C_ADDRESS,(uint8_t*)send_cmd,3,0xF);
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <JY901_calibration+0xec>)
 800069c:	6818      	ldr	r0, [r3, #0]
 800069e:	f107 020c 	add.w	r2, r7, #12
 80006a2:	230f      	movs	r3, #15
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2303      	movs	r3, #3
 80006a8:	21a0      	movs	r1, #160	; 0xa0
 80006aa:	f004 f90d 	bl	80048c8 <HAL_I2C_Master_Transmit>
		HAL_Delay(time);
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f003 f9a0 	bl	80039f4 <HAL_Delay>
		break;
 80006b4:	e013      	b.n	80006de <JY901_calibration+0xde>

	case 4:
		send_cmd[0]=0x00;
 80006b6:	2300      	movs	r3, #0
 80006b8:	733b      	strb	r3, [r7, #12]
		send_cmd[1]=0x00;
 80006ba:	2300      	movs	r3, #0
 80006bc:	737b      	strb	r3, [r7, #13]
		send_cmd[2]=0x00;
 80006be:	2300      	movs	r3, #0
 80006c0:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Master_Transmit(JY901_I2C,JY901_I2C_ADDRESS,(uint8_t*)send_cmd,3,0xF);
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <JY901_calibration+0xec>)
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	f107 020c 	add.w	r2, r7, #12
 80006ca:	230f      	movs	r3, #15
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2303      	movs	r3, #3
 80006d0:	21a0      	movs	r1, #160	; 0xa0
 80006d2:	f004 f8f9 	bl	80048c8 <HAL_I2C_Master_Transmit>
		HAL_Delay(time);
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f003 f98c 	bl	80039f4 <HAL_Delay>
		break;
 80006dc:	bf00      	nop
	}
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	10624dd3 	.word	0x10624dd3
 80006ec:	200000b8 	.word	0x200000b8

080006f0 <JY901_def_set>:

int JY901_def_set(){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af04      	add	r7, sp, #16
	uint8_t yaw[2];
	uint16_t  def;
	HAL_I2C_Mem_Read(JY901_I2C,JY901_I2C_ADDRESS,0x3F,I2C_MEMADD_SIZE_8BIT,(uint8_t*)yaw,2,0xFF);
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <JY901_def_set+0x5c>)
 80006f8:	6818      	ldr	r0, [r3, #0]
 80006fa:	23ff      	movs	r3, #255	; 0xff
 80006fc:	9302      	str	r3, [sp, #8]
 80006fe:	2302      	movs	r3, #2
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	463b      	mov	r3, r7
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	223f      	movs	r2, #63	; 0x3f
 800070a:	21a0      	movs	r1, #160	; 0xa0
 800070c:	f004 f9d0 	bl	8004ab0 <HAL_I2C_Mem_Read>
	uint8_t yawl=yaw[0];
 8000710:	783b      	ldrb	r3, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
	uint8_t yawh=yaw[1];
 8000714:	787b      	ldrb	r3, [r7, #1]
 8000716:	71bb      	strb	r3, [r7, #6]
	def = ((yawh<< 8 ) | yawl ) * 180/ 32768 ;
 8000718:	79bb      	ldrb	r3, [r7, #6]
 800071a:	021a      	lsls	r2, r3, #8
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4313      	orrs	r3, r2
 8000720:	22b4      	movs	r2, #180	; 0xb4
 8000722:	fb02 f303 	mul.w	r3, r2, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	da03      	bge.n	8000732 <JY901_def_set+0x42>
 800072a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800072e:	441a      	add	r2, r3
 8000730:	4613      	mov	r3, r2
 8000732:	13db      	asrs	r3, r3, #15
 8000734:	80bb      	strh	r3, [r7, #4]
	def=(def-359)*(-1);
 8000736:	88bb      	ldrh	r3, [r7, #4]
 8000738:	f5c3 73b3 	rsb	r3, r3, #358	; 0x166
 800073c:	3301      	adds	r3, #1
 800073e:	80bb      	strh	r3, [r7, #4]
	if(def<0){
	 	def=360+def;
	}
	return def;
 8000740:	88bb      	ldrh	r3, [r7, #4]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000b8 	.word	0x200000b8

08000750 <JY901_yaw_get>:

int JY901_yaw_get(uint16_t def){
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af04      	add	r7, sp, #16
 8000756:	4603      	mov	r3, r0
 8000758:	80fb      	strh	r3, [r7, #6]
    uint8_t yaw[2];
    uint16_t digree;
    HAL_I2C_Mem_Read(JY901_I2C,JY901_I2C_ADDRESS,0x3F,I2C_MEMADD_SIZE_8BIT,(uint8_t*)yaw,2,0xFF);
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <JY901_yaw_get+0x80>)
 800075c:	6818      	ldr	r0, [r3, #0]
 800075e:	23ff      	movs	r3, #255	; 0xff
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	2302      	movs	r3, #2
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	223f      	movs	r2, #63	; 0x3f
 8000770:	21a0      	movs	r1, #160	; 0xa0
 8000772:	f004 f99d 	bl	8004ab0 <HAL_I2C_Mem_Read>
    uint8_t yawl=yaw[0];
 8000776:	7b3b      	ldrb	r3, [r7, #12]
 8000778:	757b      	strb	r3, [r7, #21]
    uint8_t yawh=yaw[1];
 800077a:	7b7b      	ldrb	r3, [r7, #13]
 800077c:	753b      	strb	r3, [r7, #20]
    int Hx;
    Hx = ((yawh<< 8 ) | yawl ) * 180/ 32768 ;
 800077e:	7d3b      	ldrb	r3, [r7, #20]
 8000780:	021a      	lsls	r2, r3, #8
 8000782:	7d7b      	ldrb	r3, [r7, #21]
 8000784:	4313      	orrs	r3, r2
 8000786:	22b4      	movs	r2, #180	; 0xb4
 8000788:	fb02 f303 	mul.w	r3, r2, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	da03      	bge.n	8000798 <JY901_yaw_get+0x48>
 8000790:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000794:	441a      	add	r2, r3
 8000796:	4613      	mov	r3, r2
 8000798:	13db      	asrs	r3, r3, #15
 800079a:	613b      	str	r3, [r7, #16]
    Hx=(Hx-359)*(-1);
 800079c:	693a      	ldr	r2, [r7, #16]
 800079e:	f240 1367 	movw	r3, #359	; 0x167
 80007a2:	1a9b      	subs	r3, r3, r2
 80007a4:	613b      	str	r3, [r7, #16]
    Hx = Hx - def;
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	693a      	ldr	r2, [r7, #16]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	613b      	str	r3, [r7, #16]
     if(Hx<0){
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	da05      	bge.n	80007c0 <JY901_yaw_get+0x70>
     digree=Hx+360;
 80007b4:	693b      	ldr	r3, [r7, #16]
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80007bc:	82fb      	strh	r3, [r7, #22]
 80007be:	e001      	b.n	80007c4 <JY901_yaw_get+0x74>
     }
     else{
     digree=Hx;
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	82fb      	strh	r3, [r7, #22]
     }
     return digree;
 80007c4:	8afb      	ldrh	r3, [r7, #22]
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3718      	adds	r7, #24
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000b8 	.word	0x200000b8

080007d4 <oled_Init>:
 *      Author: aiueo
 */

#include "SO1602A.h"

void oled_Init(I2C_HandleTypeDef *handler){
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	oled_I2C = handler;
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <oled_Init+0x1c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6013      	str	r3, [r2, #0]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	200000bc 	.word	0x200000bc

080007f4 <writeData>:

int writeData(uint8_t data){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	4603      	mov	r3, r0
 80007fc:	71fb      	strb	r3, [r7, #7]
 	uint8_t buf[] = { DATA , data };
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	723b      	strb	r3, [r7, #8]
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	727b      	strb	r3, [r7, #9]
  	int status = HAL_I2C_Master_Transmit(oled_I2C , SO1602_ADDR , buf , 2 , 100);
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <writeData+0x44>)
 8000808:	6818      	ldr	r0, [r3, #0]
 800080a:	f107 0208 	add.w	r2, r7, #8
 800080e:	2364      	movs	r3, #100	; 0x64
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2302      	movs	r3, #2
 8000814:	2178      	movs	r1, #120	; 0x78
 8000816:	f004 f857 	bl	80048c8 <HAL_I2C_Master_Transmit>
 800081a:	4603      	mov	r3, r0
 800081c:	60fb      	str	r3, [r7, #12]
  	HAL_Delay(1);
 800081e:	2001      	movs	r0, #1
 8000820:	f003 f8e8 	bl	80039f4 <HAL_Delay>
  	return status == HAL_OK;
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	2b00      	cmp	r3, #0
 8000828:	bf0c      	ite	eq
 800082a:	2301      	moveq	r3, #1
 800082c:	2300      	movne	r3, #0
 800082e:	b2db      	uxtb	r3, r3
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000bc 	.word	0x200000bc

0800083c <writeCommand>:

void writeCommand(uint8_t command){
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af02      	add	r7, sp, #8
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	uint8_t buf[] = { CMD , command };
 8000846:	2300      	movs	r3, #0
 8000848:	733b      	strb	r3, [r7, #12]
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	737b      	strb	r3, [r7, #13]
  	HAL_I2C_Master_Transmit(oled_I2C , SO1602_ADDR , buf , 2 , 100);
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <writeCommand+0x34>)
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	f107 020c 	add.w	r2, r7, #12
 8000856:	2364      	movs	r3, #100	; 0x64
 8000858:	9300      	str	r3, [sp, #0]
 800085a:	2302      	movs	r3, #2
 800085c:	2178      	movs	r1, #120	; 0x78
 800085e:	f004 f833 	bl	80048c8 <HAL_I2C_Master_Transmit>
  	HAL_Delay(1);
 8000862:	2001      	movs	r0, #1
 8000864:	f003 f8c6 	bl	80039f4 <HAL_Delay>
}
 8000868:	bf00      	nop
 800086a:	3710      	adds	r7, #16
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000bc 	.word	0x200000bc

08000874 <OLED_Init>:

void OLED_Init(){
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  	HAL_Delay(100);
 8000878:	2064      	movs	r0, #100	; 0x64
 800087a:	f003 f8bb 	bl	80039f4 <HAL_Delay>
  	writeCommand(0x01); //clear Display
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff ffdc 	bl	800083c <writeCommand>
  	writeCommand(0x02); //Return Home
 8000884:	2002      	movs	r0, #2
 8000886:	f7ff ffd9 	bl	800083c <writeCommand>
  	writeCommand(0x0c); //Send Display on command
 800088a:	200c      	movs	r0, #12
 800088c:	f7ff ffd6 	bl	800083c <writeCommand>
  	writeCommand(0x01); //Clear Display
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff ffd3 	bl	800083c <writeCommand>
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}

0800089a <set_cursor>:

void set_cursor(uint8_t tate , uint8_t yoko){
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	460a      	mov	r2, r1
 80008a4:	71fb      	strb	r3, [r7, #7]
 80008a6:	4613      	mov	r3, r2
 80008a8:	71bb      	strb	r3, [r7, #6]
	if(tate == 1){
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d102      	bne.n	80008b6 <set_cursor+0x1c>
		tate = 0x00;
 80008b0:	2300      	movs	r3, #0
 80008b2:	71fb      	strb	r3, [r7, #7]
 80008b4:	e001      	b.n	80008ba <set_cursor+0x20>
	}else{
		tate = 0x20;
 80008b6:	2320      	movs	r3, #32
 80008b8:	71fb      	strb	r3, [r7, #7]
	}
	writeCommand(tate + yoko + 0x80);
 80008ba:	79fa      	ldrb	r2, [r7, #7]
 80008bc:	79bb      	ldrb	r3, [r7, #6]
 80008be:	4413      	add	r3, r2
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	3b80      	subs	r3, #128	; 0x80
 80008c4:	b2db      	uxtb	r3, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff ffb8 	bl	800083c <writeCommand>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <Puts>:

void Puts(const char *p){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	for( ; *p ; p++){
 80008dc:	e007      	b.n	80008ee <Puts+0x1a>
		writeData(*p);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff86 	bl	80007f4 <writeData>
	for( ; *p ; p++){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3301      	adds	r3, #1
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d1f3      	bne.n	80008de <Puts+0xa>
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <HAL_GPIO_EXTI_Callback>:
#define houi_high	200
uint16_t seigyoR = 0;
uint16_t seigyoL = 0;
uint16_t houi_rot = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000910:	d10f      	bne.n	8000932 <HAL_GPIO_EXTI_Callback+0x32>
		if(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_13) == 0){			//toggle left
 8000912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000916:	4867      	ldr	r0, [pc, #412]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000918:	f003 fee2 	bl	80046e0 <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d103      	bne.n	800092a <HAL_GPIO_EXTI_Callback+0x2a>
			status_1 = 1;
 8000922:	4b65      	ldr	r3, [pc, #404]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8000924:	2201      	movs	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
			RST = 0;
		}else {
			RST = 1;
		}
	}
}
 8000928:	e0c0      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			status_1 = 0;
 800092a:	4b63      	ldr	r3, [pc, #396]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
}
 8000930:	e0bc      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
	}else if(GPIO_Pin == GPIO_PIN_14){
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000938:	d10f      	bne.n	800095a <HAL_GPIO_EXTI_Callback+0x5a>
		if(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_14) == 0){			//toggle center
 800093a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093e:	485d      	ldr	r0, [pc, #372]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000940:	f003 fece 	bl	80046e0 <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d103      	bne.n	8000952 <HAL_GPIO_EXTI_Callback+0x52>
			status_2 = 1;
 800094a:	4b5c      	ldr	r3, [pc, #368]	; (8000abc <HAL_GPIO_EXTI_Callback+0x1bc>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
}
 8000950:	e0ac      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			status_2 = 0;
 8000952:	4b5a      	ldr	r3, [pc, #360]	; (8000abc <HAL_GPIO_EXTI_Callback+0x1bc>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
}
 8000958:	e0a8      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
	}else if(GPIO_Pin == GPIO_PIN_15){
 800095a:	88fb      	ldrh	r3, [r7, #6]
 800095c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000960:	d10f      	bne.n	8000982 <HAL_GPIO_EXTI_Callback+0x82>
		if(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_15) == 0){			//toggle right
 8000962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000966:	4853      	ldr	r0, [pc, #332]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000968:	f003 feba 	bl	80046e0 <HAL_GPIO_ReadPin>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d103      	bne.n	800097a <HAL_GPIO_EXTI_Callback+0x7a>
			status_3 = 1;
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
}
 8000978:	e098      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			status_3 = 0;
 800097a:	4b51      	ldr	r3, [pc, #324]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
}
 8000980:	e094      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
	}else if(GPIO_Pin == GPIO_PIN_2){
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	2b04      	cmp	r3, #4
 8000986:	d10e      	bne.n	80009a6 <HAL_GPIO_EXTI_Callback+0xa6>
		if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2) == 0){			//botton sita
 8000988:	2104      	movs	r1, #4
 800098a:	484e      	ldr	r0, [pc, #312]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800098c:	f003 fea8 	bl	80046e0 <HAL_GPIO_ReadPin>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <HAL_GPIO_EXTI_Callback+0x9e>
			SW_2 = 0;
 8000996:	4b4c      	ldr	r3, [pc, #304]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
}
 800099c:	e086      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			SW_2 = 1;
 800099e:	4b4a      	ldr	r3, [pc, #296]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
}
 80009a4:	e082      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
	}else if(GPIO_Pin == GPIO_PIN_4){
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	2b10      	cmp	r3, #16
 80009aa:	d10e      	bne.n	80009ca <HAL_GPIO_EXTI_Callback+0xca>
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4) == 0){			//botton hidari
 80009ac:	2110      	movs	r1, #16
 80009ae:	4847      	ldr	r0, [pc, #284]	; (8000acc <HAL_GPIO_EXTI_Callback+0x1cc>)
 80009b0:	f003 fe96 	bl	80046e0 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d103      	bne.n	80009c2 <HAL_GPIO_EXTI_Callback+0xc2>
			SW_3 = 0;
 80009ba:	4b45      	ldr	r3, [pc, #276]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80009bc:	2200      	movs	r2, #0
 80009be:	701a      	strb	r2, [r3, #0]
}
 80009c0:	e074      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			SW_3 = 1;
 80009c2:	4b43      	ldr	r3, [pc, #268]	; (8000ad0 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
}
 80009c8:	e070      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
	}else if(GPIO_Pin == GPIO_PIN_11){
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009d0:	d10f      	bne.n	80009f2 <HAL_GPIO_EXTI_Callback+0xf2>
		if(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_11) == 0){			//botton ue
 80009d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009d6:	4837      	ldr	r0, [pc, #220]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 80009d8:	f003 fe82 	bl	80046e0 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d103      	bne.n	80009ea <HAL_GPIO_EXTI_Callback+0xea>
			SW_1 = 0;
 80009e2:	4b3c      	ldr	r3, [pc, #240]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]
}
 80009e8:	e060      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			SW_1 = 1;
 80009ea:	4b3a      	ldr	r3, [pc, #232]	; (8000ad4 <HAL_GPIO_EXTI_Callback+0x1d4>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
}
 80009f0:	e05c      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
	}else if(GPIO_Pin == GPIO_PIN_12){
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80009f8:	d10f      	bne.n	8000a1a <HAL_GPIO_EXTI_Callback+0x11a>
		if(HAL_GPIO_ReadPin(GPIOF,GPIO_PIN_12) == 0){			//botton migi
 80009fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009fe:	482d      	ldr	r0, [pc, #180]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x1b4>)
 8000a00:	f003 fe6e 	bl	80046e0 <HAL_GPIO_ReadPin>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d103      	bne.n	8000a12 <HAL_GPIO_EXTI_Callback+0x112>
			SW_4 = 0;
 8000a0a:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
}
 8000a10:	e04c      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			SW_4 = 1;
 8000a12:	4b31      	ldr	r3, [pc, #196]	; (8000ad8 <HAL_GPIO_EXTI_Callback+0x1d8>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	701a      	strb	r2, [r3, #0]
}
 8000a18:	e048      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
	}else if(GPIO_Pin == GPIO_PIN_3){
 8000a1a:	88fb      	ldrh	r3, [r7, #6]
 8000a1c:	2b08      	cmp	r3, #8
 8000a1e:	d10e      	bne.n	8000a3e <HAL_GPIO_EXTI_Callback+0x13e>
		if(HAL_GPIO_ReadPin(GPIOG,GPIO_PIN_3) == 0){
 8000a20:	2108      	movs	r1, #8
 8000a22:	482e      	ldr	r0, [pc, #184]	; (8000adc <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000a24:	f003 fe5c 	bl	80046e0 <HAL_GPIO_ReadPin>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d103      	bne.n	8000a36 <HAL_GPIO_EXTI_Callback+0x136>
			LS_1 = 0;
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	701a      	strb	r2, [r3, #0]
}
 8000a34:	e03a      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			LS_1 = 1;
 8000a36:	4b2a      	ldr	r3, [pc, #168]	; (8000ae0 <HAL_GPIO_EXTI_Callback+0x1e0>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
}
 8000a3c:	e036      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
	}else if(GPIO_Pin == GPIO_PIN_5){
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	2b20      	cmp	r3, #32
 8000a42:	d10e      	bne.n	8000a62 <HAL_GPIO_EXTI_Callback+0x162>
		if(HAL_GPIO_ReadPin(GPIOG,GPIO_PIN_5) == 0){
 8000a44:	2120      	movs	r1, #32
 8000a46:	4825      	ldr	r0, [pc, #148]	; (8000adc <HAL_GPIO_EXTI_Callback+0x1dc>)
 8000a48:	f003 fe4a 	bl	80046e0 <HAL_GPIO_ReadPin>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d103      	bne.n	8000a5a <HAL_GPIO_EXTI_Callback+0x15a>
			LS_2 = 0;
 8000a52:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
}
 8000a58:	e028      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			LS_2 = 1;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <HAL_GPIO_EXTI_Callback+0x1e4>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
}
 8000a60:	e024      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
	}else if(GPIO_Pin == GPIO_PIN_10){
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a68:	d10f      	bne.n	8000a8a <HAL_GPIO_EXTI_Callback+0x18a>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_10) == 0){
 8000a6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000a70:	f003 fe36 	bl	80046e0 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <HAL_GPIO_EXTI_Callback+0x182>
			LS_3 = 0;
 8000a7a:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
}
 8000a80:	e014      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			LS_3 = 1;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <HAL_GPIO_EXTI_Callback+0x1ec>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]
}
 8000a88:	e010      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
	}else if(GPIO_Pin == GPIO_PIN_0){
 8000a8a:	88fb      	ldrh	r3, [r7, #6]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d10d      	bne.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
		if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0) == 0){
 8000a90:	2101      	movs	r1, #1
 8000a92:	4815      	ldr	r0, [pc, #84]	; (8000ae8 <HAL_GPIO_EXTI_Callback+0x1e8>)
 8000a94:	f003 fe24 	bl	80046e0 <HAL_GPIO_ReadPin>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d103      	bne.n	8000aa6 <HAL_GPIO_EXTI_Callback+0x1a6>
			RST = 0;
 8000a9e:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
}
 8000aa4:	e002      	b.n	8000aac <HAL_GPIO_EXTI_Callback+0x1ac>
			RST = 1;
 8000aa6:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_GPIO_EXTI_Callback+0x1f0>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	701a      	strb	r2, [r3, #0]
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021400 	.word	0x40021400
 8000ab8:	20000238 	.word	0x20000238
 8000abc:	200003a4 	.word	0x200003a4
 8000ac0:	20000546 	.word	0x20000546
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	2000009d 	.word	0x2000009d
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	2000009e 	.word	0x2000009e
 8000ad4:	2000009c 	.word	0x2000009c
 8000ad8:	2000009f 	.word	0x2000009f
 8000adc:	40021800 	.word	0x40021800
 8000ae0:	200000a0 	.word	0x200000a0
 8000ae4:	200000a1 	.word	0x200000a1
 8000ae8:	40020c00 	.word	0x40020c00
 8000aec:	200000a2 	.word	0x200000a2
 8000af0:	200000a3 	.word	0x200000a3

08000af4 <motor_5>:


void motor_5(uint16_t ina , uint16_t inb){
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	460a      	mov	r2, r1
 8000afe:	80fb      	strh	r3, [r7, #6]
 8000b00:	4613      	mov	r3, r2
 8000b02:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_1,ina);
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <motor_5+0x2c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	88fa      	ldrh	r2, [r7, #6]
 8000b0a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_2,inb);
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <motor_5+0x2c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	88ba      	ldrh	r2, [r7, #4]
 8000b12:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	2000023c 	.word	0x2000023c

08000b24 <motor_6>:
void motor_6(uint16_t ina , uint16_t inb){
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	460a      	mov	r2, r1
 8000b2e:	80fb      	strh	r3, [r7, #6]
 8000b30:	4613      	mov	r3, r2
 8000b32:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_3,ina);
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <motor_6+0x2c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	88fa      	ldrh	r2, [r7, #6]
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim5,TIM_CHANNEL_4,inb);
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <motor_6+0x2c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	88ba      	ldrh	r2, [r7, #4]
 8000b42:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	2000023c 	.word	0x2000023c

08000b54 <motor_7>:
void motor_7(uint16_t ina , uint16_t inb){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	80fb      	strh	r3, [r7, #6]
 8000b60:	4613      	mov	r3, r2
 8000b62:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_1,ina);
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <motor_7+0x2c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	88fa      	ldrh	r2, [r7, #6]
 8000b6a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim9,TIM_CHANNEL_2,inb);
 8000b6c:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <motor_7+0x2c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	88ba      	ldrh	r2, [r7, #4]
 8000b72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	20000438 	.word	0x20000438

08000b84 <motor_sol>:


void motor_sol(uint16_t ina , uint16_t inb){
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	80fb      	strh	r3, [r7, #6]
 8000b90:	4613      	mov	r3, r2
 8000b92:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,ina);
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <motor_sol+0x2c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	88fa      	ldrh	r2, [r7, #6]
 8000b9a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,inb);
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <motor_sol+0x2c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	88ba      	ldrh	r2, [r7, #4]
 8000ba2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	2000047c 	.word	0x2000047c

08000bb4 <motor_air>:
void motor_air(uint16_t ina , uint16_t inb){
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	460a      	mov	r2, r1
 8000bbe:	80fb      	strh	r3, [r7, #6]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,ina);
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <motor_air+0x2c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	88fa      	ldrh	r2, [r7, #6]
 8000bca:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,inb);
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <motor_air+0x2c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	88ba      	ldrh	r2, [r7, #4]
 8000bd2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	2000047c 	.word	0x2000047c

08000be4 <map>:

long map(float x , float in_min , float in_max , float out_min , float out_max)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b087      	sub	sp, #28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	ed87 0a05 	vstr	s0, [r7, #20]
 8000bee:	edc7 0a04 	vstr	s1, [r7, #16]
 8000bf2:	ed87 1a03 	vstr	s2, [r7, #12]
 8000bf6:	edc7 1a02 	vstr	s3, [r7, #8]
 8000bfa:	ed87 2a01 	vstr	s4, [r7, #4]
	  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000bfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8000c02:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c0a:	edd7 6a01 	vldr	s13, [r7, #4]
 8000c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000c16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000c1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000c1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000c2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c36:	ee17 3a90 	vmov	r3, s15
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	371c      	adds	r7, #28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <servo_1>:

void servo_1(uint16_t pulse){			//arm kaiten
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
	int pulse_1 = map(pulse , 0 , 180 , Servo_low , Servo_high);
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	ee07 3a90 	vmov	s15, r3
 8000c58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c5c:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8000c88 <servo_1+0x40>
 8000c60:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 8000c64:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8000c8c <servo_1+0x44>
 8000c68:	eddf 0a09 	vldr	s1, [pc, #36]	; 8000c90 <servo_1+0x48>
 8000c6c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c70:	f7ff ffb8 	bl	8000be4 <map>
 8000c74:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_1,pulse_1);
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <servo_1+0x4c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	42fa0000 	.word	0x42fa0000
 8000c8c:	43340000 	.word	0x43340000
 8000c90:	00000000 	.word	0x00000000
 8000c94:	20000128 	.word	0x20000128

08000c98 <servo_2>:
void servo_2(uint16_t pulse){			//right arm
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
	int pulse_1 = map(pulse , 0 , 270 , Servo_low , Servo_high);
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	ee07 3a90 	vmov	s15, r3
 8000ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cac:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8000cd8 <servo_2+0x40>
 8000cb0:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 8000cb4:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8000cdc <servo_2+0x44>
 8000cb8:	eddf 0a09 	vldr	s1, [pc, #36]	; 8000ce0 <servo_2+0x48>
 8000cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000cc0:	f7ff ff90 	bl	8000be4 <map>
 8000cc4:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,pulse_1);
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <servo_2+0x4c>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	42fa0000 	.word	0x42fa0000
 8000cdc:	43870000 	.word	0x43870000
 8000ce0:	00000000 	.word	0x00000000
 8000ce4:	20000128 	.word	0x20000128

08000ce8 <servo_3>:
void servo_3(uint16_t pulse){			//left arm
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	80fb      	strh	r3, [r7, #6]
	int pulse_1 = map(pulse , 0 , 270 , Servo_low , Servo_high);
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	ee07 3a90 	vmov	s15, r3
 8000cf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cfc:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8000d28 <servo_3+0x40>
 8000d00:	eef3 1a09 	vmov.f32	s3, #57	; 0x41c80000  25.0
 8000d04:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8000d2c <servo_3+0x44>
 8000d08:	eddf 0a09 	vldr	s1, [pc, #36]	; 8000d30 <servo_3+0x48>
 8000d0c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d10:	f7ff ff68 	bl	8000be4 <map>
 8000d14:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_4,pulse_1);
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <servo_3+0x4c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	42fa0000 	.word	0x42fa0000
 8000d2c:	43870000 	.word	0x43870000
 8000d30:	00000000 	.word	0x00000000
 8000d34:	20000128 	.word	0x20000128

08000d38 <servo_4>:
void servo_4(uint16_t pulse){			//camera arm sayu
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
	int pulse_1 = map(pulse , 0 , 270 , servo_low , servo_high);
 8000d42:	88fb      	ldrh	r3, [r7, #6]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d4c:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8000d78 <servo_4+0x40>
 8000d50:	eef3 1a0c 	vmov.f32	s3, #60	; 0x41e00000  28.0
 8000d54:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8000d7c <servo_4+0x44>
 8000d58:	eddf 0a09 	vldr	s1, [pc, #36]	; 8000d80 <servo_4+0x48>
 8000d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8000d60:	f7ff ff40 	bl	8000be4 <map>
 8000d64:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim10,TIM_CHANNEL_1,pulse_1);
 8000d66:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <servo_4+0x4c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	68fa      	ldr	r2, [r7, #12]
 8000d6c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	42f80000 	.word	0x42f80000
 8000d7c:	43870000 	.word	0x43870000
 8000d80:	00000000 	.word	0x00000000
 8000d84:	200001ac 	.word	0x200001ac

08000d88 <servo_5>:
void servo_5(uint16_t pulse){			//camera arm jouge
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
	int pulse_1 = map(pulse , 0 , 270 , servo_low , servo_high);
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	ee07 3a90 	vmov	s15, r3
 8000d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d9c:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8000dc8 <servo_5+0x40>
 8000da0:	eef3 1a0c 	vmov.f32	s3, #60	; 0x41e00000  28.0
 8000da4:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8000dcc <servo_5+0x44>
 8000da8:	eddf 0a09 	vldr	s1, [pc, #36]	; 8000dd0 <servo_5+0x48>
 8000dac:	eeb0 0a67 	vmov.f32	s0, s15
 8000db0:	f7ff ff18 	bl	8000be4 <map>
 8000db4:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,pulse_1);
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <servo_5+0x4c>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	42f80000 	.word	0x42f80000
 8000dcc:	43870000 	.word	0x43870000
 8000dd0:	00000000 	.word	0x00000000
 8000dd4:	200003f4 	.word	0x200003f4

08000dd8 <servo_6>:
void servo_6(uint16_t pulse){			//camera arm on camera
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
	int pulse_1 = map(pulse , 0 , 270 , servo_low , servo_high);
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	ee07 3a90 	vmov	s15, r3
 8000de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dec:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8000e18 <servo_6+0x40>
 8000df0:	eef3 1a0c 	vmov.f32	s3, #60	; 0x41e00000  28.0
 8000df4:	ed9f 1a09 	vldr	s2, [pc, #36]	; 8000e1c <servo_6+0x44>
 8000df8:	eddf 0a09 	vldr	s1, [pc, #36]	; 8000e20 <servo_6+0x48>
 8000dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8000e00:	f7ff fef0 	bl	8000be4 <map>
 8000e04:	60f8      	str	r0, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,pulse_1);
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <servo_6+0x4c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	42f80000 	.word	0x42f80000
 8000e1c:	43870000 	.word	0x43870000
 8000e20:	00000000 	.word	0x00000000
 8000e24:	200003f4 	.word	0x200003f4

08000e28 <servo_init>:

void servo_init(){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	servo_1(servo1_init);
 8000e2c:	205a      	movs	r0, #90	; 0x5a
 8000e2e:	f7ff ff0b 	bl	8000c48 <servo_1>
	servo_2(servo2_init);
 8000e32:	205a      	movs	r0, #90	; 0x5a
 8000e34:	f7ff ff30 	bl	8000c98 <servo_2>
	servo_3(servo3_init);
 8000e38:	20b7      	movs	r0, #183	; 0xb7
 8000e3a:	f7ff ff55 	bl	8000ce8 <servo_3>
	servo_4(servo4_init);
 8000e3e:	2087      	movs	r0, #135	; 0x87
 8000e40:	f7ff ff7a 	bl	8000d38 <servo_4>
	servo_5(servo5_init);
 8000e44:	20aa      	movs	r0, #170	; 0xaa
 8000e46:	f7ff ff9f 	bl	8000d88 <servo_5>
	servo_6(servo6_init);
 8000e4a:	20c8      	movs	r0, #200	; 0xc8
 8000e4c:	f7ff ffc4 	bl	8000dd8 <servo_6>
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e58:	f002 fd6f 	bl	800393a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5c:	f000 ffa2 	bl	8001da4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e60:	f001 fdb6 	bl	80029d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e64:	f001 fd82 	bl	800296c <MX_DMA_Init>
  MX_I2C2_Init();
 8000e68:	f001 f830 	bl	8001ecc <MX_I2C2_Init>
  MX_TIM1_Init();
 8000e6c:	f001 f86e 	bl	8001f4c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e70:	f001 f9ca 	bl	8002208 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e74:	f001 fa60 	bl	8002338 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e78:	f001 faf6 	bl	8002468 <MX_TIM5_Init>
  MX_TIM9_Init();
 8000e7c:	f001 fc8a 	bl	8002794 <MX_TIM9_Init>
  MX_TIM10_Init();
 8000e80:	f001 fcc2 	bl	8002808 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8000e84:	f001 fd0e 	bl	80028a4 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000e88:	f001 fbbe 	bl	8002608 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8000e8c:	f001 fd3a 	bl	8002904 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e90:	f001 f922 	bl	80020d8 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000e94:	f001 fb80 	bl	8002598 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Receive_DMA(&huart1,(uint8_t *)rxbuf ,1);			//raspi uart

  HAL_UART_Receive_DMA(&huart2,(uint8_t *)rxbuf ,1);			//TPIP uart
 8000e98:	2201      	movs	r2, #1
 8000e9a:	49b2      	ldr	r1, [pc, #712]	; (8001164 <main+0x310>)
 8000e9c:	48b2      	ldr	r0, [pc, #712]	; (8001168 <main+0x314>)
 8000e9e:	f006 fb2f 	bl	8007500 <HAL_UART_Receive_DMA>

  //HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);		//dc leg
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	48b1      	ldr	r0, [pc, #708]	; (800116c <main+0x318>)
 8000ea6:	f005 fabf 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000eaa:	2104      	movs	r1, #4
 8000eac:	48af      	ldr	r0, [pc, #700]	; (800116c <main+0x318>)
 8000eae:	f005 fabb 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000eb2:	2108      	movs	r1, #8
 8000eb4:	48ad      	ldr	r0, [pc, #692]	; (800116c <main+0x318>)
 8000eb6:	f005 fab7 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8000eba:	210c      	movs	r1, #12
 8000ebc:	48ab      	ldr	r0, [pc, #684]	; (800116c <main+0x318>)
 8000ebe:	f005 fab3 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	48aa      	ldr	r0, [pc, #680]	; (8001170 <main+0x31c>)
 8000ec6:	f005 faaf 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8000eca:	2104      	movs	r1, #4
 8000ecc:	48a8      	ldr	r0, [pc, #672]	; (8001170 <main+0x31c>)
 8000ece:	f005 faab 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000ed2:	2108      	movs	r1, #8
 8000ed4:	48a6      	ldr	r0, [pc, #664]	; (8001170 <main+0x31c>)
 8000ed6:	f005 faa7 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8000eda:	210c      	movs	r1, #12
 8000edc:	48a4      	ldr	r0, [pc, #656]	; (8001170 <main+0x31c>)
 8000ede:	f005 faa3 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_1);		//dc arm
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	48a3      	ldr	r0, [pc, #652]	; (8001174 <main+0x320>)
 8000ee6:	f005 fa9f 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_2);
 8000eea:	2104      	movs	r1, #4
 8000eec:	48a1      	ldr	r0, [pc, #644]	; (8001174 <main+0x320>)
 8000eee:	f005 fa9b 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_3);
 8000ef2:	2108      	movs	r1, #8
 8000ef4:	489f      	ldr	r0, [pc, #636]	; (8001174 <main+0x320>)
 8000ef6:	f005 fa97 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5,TIM_CHANNEL_4);
 8000efa:	210c      	movs	r1, #12
 8000efc:	489d      	ldr	r0, [pc, #628]	; (8001174 <main+0x320>)
 8000efe:	f005 fa93 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);		//dc leg
 8000f02:	2100      	movs	r1, #0
 8000f04:	489c      	ldr	r0, [pc, #624]	; (8001178 <main+0x324>)
 8000f06:	f005 fa8f 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_2);
 8000f0a:	2104      	movs	r1, #4
 8000f0c:	489a      	ldr	r0, [pc, #616]	; (8001178 <main+0x324>)
 8000f0e:	f005 fa8b 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_3);
 8000f12:	2108      	movs	r1, #8
 8000f14:	4898      	ldr	r0, [pc, #608]	; (8001178 <main+0x324>)
 8000f16:	f005 fa87 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4);
 8000f1a:	210c      	movs	r1, #12
 8000f1c:	4896      	ldr	r0, [pc, #600]	; (8001178 <main+0x324>)
 8000f1e:	f005 fa83 	bl	8006428 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);		//servo
 8000f22:	2100      	movs	r1, #0
 8000f24:	4895      	ldr	r0, [pc, #596]	; (800117c <main+0x328>)
 8000f26:	f005 fa7f 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4893      	ldr	r0, [pc, #588]	; (800117c <main+0x328>)
 8000f2e:	f005 fa7b 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_4);
 8000f32:	210c      	movs	r1, #12
 8000f34:	4891      	ldr	r0, [pc, #580]	; (800117c <main+0x328>)
 8000f36:	f005 fa77 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4890      	ldr	r0, [pc, #576]	; (8001180 <main+0x32c>)
 8000f3e:	f005 fa73 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000f42:	2100      	movs	r1, #0
 8000f44:	488f      	ldr	r0, [pc, #572]	; (8001184 <main+0x330>)
 8000f46:	f005 fa6f 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	488d      	ldr	r0, [pc, #564]	; (8001184 <main+0x330>)
 8000f4e:	f005 fa6b 	bl	8006428 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000f52:	210c      	movs	r1, #12
 8000f54:	488b      	ldr	r0, [pc, #556]	; (8001184 <main+0x330>)
 8000f56:	f005 fa67 	bl	8006428 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8000f5a:	488b      	ldr	r0, [pc, #556]	; (8001188 <main+0x334>)
 8000f5c:	f005 fa04 	bl	8006368 <HAL_TIM_Base_Start_IT>


  oled_Init(&hi2c2);
 8000f60:	488a      	ldr	r0, [pc, #552]	; (800118c <main+0x338>)
 8000f62:	f7ff fc37 	bl	80007d4 <oled_Init>
  OLED_Init();
 8000f66:	f7ff fc85 	bl	8000874 <OLED_Init>
  set_cursor(1,0);
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	f7ff fc94 	bl	800089a <set_cursor>
  Puts("status:");
 8000f72:	4887      	ldr	r0, [pc, #540]	; (8001190 <main+0x33c>)
 8000f74:	f7ff fcae 	bl	80008d4 <Puts>
  set_cursor(2,0);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f7ff fc8d 	bl	800089a <set_cursor>
  Puts("waiting TPIP");
 8000f80:	4884      	ldr	r0, [pc, #528]	; (8001194 <main+0x340>)
 8000f82:	f7ff fca7 	bl	80008d4 <Puts>

  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_0,SET);
 8000f86:	2201      	movs	r2, #1
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4883      	ldr	r0, [pc, #524]	; (8001198 <main+0x344>)
 8000f8c:	f003 fbc0 	bl	8004710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_1,SET);
 8000f90:	2201      	movs	r2, #1
 8000f92:	2102      	movs	r1, #2
 8000f94:	4880      	ldr	r0, [pc, #512]	; (8001198 <main+0x344>)
 8000f96:	f003 fbbb 	bl	8004710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_7,SET);
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2180      	movs	r1, #128	; 0x80
 8000f9e:	487f      	ldr	r0, [pc, #508]	; (800119c <main+0x348>)
 8000fa0:	f003 fbb6 	bl	8004710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_8,SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	487c      	ldr	r0, [pc, #496]	; (800119c <main+0x348>)
 8000fac:	f003 fbb0 	bl	8004710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_2,SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	487a      	ldr	r0, [pc, #488]	; (80011a0 <main+0x34c>)
 8000fb6:	f003 fbab 	bl	8004710 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_3,SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	4878      	ldr	r0, [pc, #480]	; (80011a0 <main+0x34c>)
 8000fc0:	f003 fba6 	bl	8004710 <HAL_GPIO_WritePin>

  JY901_init(&hi2c2);
 8000fc4:	4871      	ldr	r0, [pc, #452]	; (800118c <main+0x338>)
 8000fc6:	f7ff fb0b 	bl	80005e0 <JY901_init>
  JY901_calibration(3000,1);
 8000fca:	2101      	movs	r1, #1
 8000fcc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000fd0:	f7ff fb16 	bl	8000600 <JY901_calibration>
  houi_def = JY901_def_set();		//set up
 8000fd4:	f7ff fb8c 	bl	80006f0 <JY901_def_set>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4b72      	ldr	r3, [pc, #456]	; (80011a4 <main+0x350>)
 8000fdc:	601a      	str	r2, [r3, #0]

  servo_init();
 8000fde:	f7ff ff23 	bl	8000e28 <servo_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(str_3,"%d",LS_1);
 8000fe2:	4b71      	ldr	r3, [pc, #452]	; (80011a8 <main+0x354>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4970      	ldr	r1, [pc, #448]	; (80011ac <main+0x358>)
 8000fea:	4871      	ldr	r0, [pc, #452]	; (80011b0 <main+0x35c>)
 8000fec:	f007 f920 	bl	8008230 <siprintf>
	  sprintf(str_2,"%d",LS_2);
 8000ff0:	4b70      	ldr	r3, [pc, #448]	; (80011b4 <main+0x360>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	496d      	ldr	r1, [pc, #436]	; (80011ac <main+0x358>)
 8000ff8:	486f      	ldr	r0, [pc, #444]	; (80011b8 <main+0x364>)
 8000ffa:	f007 f919 	bl	8008230 <siprintf>
	  sprintf(str_7,"%d",LS_3);
 8000ffe:	4b6f      	ldr	r3, [pc, #444]	; (80011bc <main+0x368>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	461a      	mov	r2, r3
 8001004:	4969      	ldr	r1, [pc, #420]	; (80011ac <main+0x358>)
 8001006:	486e      	ldr	r0, [pc, #440]	; (80011c0 <main+0x36c>)
 8001008:	f007 f912 	bl	8008230 <siprintf>
	  houi = JY901_yaw_get(houi_def);
 800100c:	4b65      	ldr	r3, [pc, #404]	; (80011a4 <main+0x350>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b29b      	uxth	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fb9c 	bl	8000750 <JY901_yaw_get>
 8001018:	4602      	mov	r2, r0
 800101a:	4b6a      	ldr	r3, [pc, #424]	; (80011c4 <main+0x370>)
 800101c:	601a      	str	r2, [r3, #0]

	  sprintf(str_1,"%d",houi);
 800101e:	4b69      	ldr	r3, [pc, #420]	; (80011c4 <main+0x370>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	4961      	ldr	r1, [pc, #388]	; (80011ac <main+0x358>)
 8001026:	4868      	ldr	r0, [pc, #416]	; (80011c8 <main+0x374>)
 8001028:	f007 f902 	bl	8008230 <siprintf>
	  sprintf(str_4,"%d",seigyoR);
 800102c:	4b67      	ldr	r3, [pc, #412]	; (80011cc <main+0x378>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	495e      	ldr	r1, [pc, #376]	; (80011ac <main+0x358>)
 8001034:	4866      	ldr	r0, [pc, #408]	; (80011d0 <main+0x37c>)
 8001036:	f007 f8fb 	bl	8008230 <siprintf>
	  sprintf(str_5,"%d",seigyoL);
 800103a:	4b66      	ldr	r3, [pc, #408]	; (80011d4 <main+0x380>)
 800103c:	881b      	ldrh	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	495a      	ldr	r1, [pc, #360]	; (80011ac <main+0x358>)
 8001042:	4865      	ldr	r0, [pc, #404]	; (80011d8 <main+0x384>)
 8001044:	f007 f8f4 	bl	8008230 <siprintf>


	  if((houi - houi_rot) > 5){			//sisei seigyo
 8001048:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <main+0x370>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a63      	ldr	r2, [pc, #396]	; (80011dc <main+0x388>)
 800104e:	8812      	ldrh	r2, [r2, #0]
 8001050:	1a9b      	subs	r3, r3, r2
 8001052:	2b05      	cmp	r3, #5
 8001054:	dd19      	ble.n	800108a <main+0x236>
		  seigyoR = map(houi , 5 , 180 , houi_low , houi_high);
 8001056:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <main+0x370>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001062:	ed9f 2a5f 	vldr	s4, [pc, #380]	; 80011e0 <main+0x38c>
 8001066:	eddf 1a5f 	vldr	s3, [pc, #380]	; 80011e4 <main+0x390>
 800106a:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 80011e8 <main+0x394>
 800106e:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	f7ff fdb5 	bl	8000be4 <map>
 800107a:	4603      	mov	r3, r0
 800107c:	b29a      	uxth	r2, r3
 800107e:	4b53      	ldr	r3, [pc, #332]	; (80011cc <main+0x378>)
 8001080:	801a      	strh	r2, [r3, #0]
		  seigyoL = 0;
 8001082:	4b54      	ldr	r3, [pc, #336]	; (80011d4 <main+0x380>)
 8001084:	2200      	movs	r2, #0
 8001086:	801a      	strh	r2, [r3, #0]
 8001088:	e036      	b.n	80010f8 <main+0x2a4>
	  }else if((houi - houi_rot) < -5 ){
 800108a:	4b4e      	ldr	r3, [pc, #312]	; (80011c4 <main+0x370>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a53      	ldr	r2, [pc, #332]	; (80011dc <main+0x388>)
 8001090:	8812      	ldrh	r2, [r2, #0]
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	f113 0f05 	cmn.w	r3, #5
 8001098:	da19      	bge.n	80010ce <main+0x27a>
		  seigyoR = 0;
 800109a:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <main+0x378>)
 800109c:	2200      	movs	r2, #0
 800109e:	801a      	strh	r2, [r3, #0]
		  seigyoL = map(houi , 355 , 180 , houi_low , houi_high);
 80010a0:	4b48      	ldr	r3, [pc, #288]	; (80011c4 <main+0x370>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ac:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 80011e0 <main+0x38c>
 80010b0:	eddf 1a4c 	vldr	s3, [pc, #304]	; 80011e4 <main+0x390>
 80010b4:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 80011e8 <main+0x394>
 80010b8:	eddf 0a4c 	vldr	s1, [pc, #304]	; 80011ec <main+0x398>
 80010bc:	eeb0 0a67 	vmov.f32	s0, s15
 80010c0:	f7ff fd90 	bl	8000be4 <map>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	4b42      	ldr	r3, [pc, #264]	; (80011d4 <main+0x380>)
 80010ca:	801a      	strh	r2, [r3, #0]
 80010cc:	e014      	b.n	80010f8 <main+0x2a4>
	  }else if((houi - houi_rot) < 5 || -5 < (houi - houi_rot)){
 80010ce:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <main+0x370>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a42      	ldr	r2, [pc, #264]	; (80011dc <main+0x388>)
 80010d4:	8812      	ldrh	r2, [r2, #0]
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	2b04      	cmp	r3, #4
 80010da:	dd07      	ble.n	80010ec <main+0x298>
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <main+0x370>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a3e      	ldr	r2, [pc, #248]	; (80011dc <main+0x388>)
 80010e2:	8812      	ldrh	r2, [r2, #0]
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	f113 0f04 	cmn.w	r3, #4
 80010ea:	db05      	blt.n	80010f8 <main+0x2a4>
		  seigyoR = 0;
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <main+0x378>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	801a      	strh	r2, [r3, #0]
		  seigyoL = 0;
 80010f2:	4b38      	ldr	r3, [pc, #224]	; (80011d4 <main+0x380>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	801a      	strh	r2, [r3, #0]
	  }

	  if(status_1 == 1 || RST == 1){
 80010f8:	4b3d      	ldr	r3, [pc, #244]	; (80011f0 <main+0x39c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d104      	bne.n	800110a <main+0x2b6>
 8001100:	4b3c      	ldr	r3, [pc, #240]	; (80011f4 <main+0x3a0>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 8436 	beq.w	8001976 <main+0xb22>
		  //number = atoi(&rxbuf[1]);			//convert strings to number

		  OLED_Init();
 800110a:	f7ff fbb3 	bl	8000874 <OLED_Init>
		  set_cursor(1,0);
 800110e:	2100      	movs	r1, #0
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff fbc2 	bl	800089a <set_cursor>
		  Puts("status:uart mode");
 8001116:	4838      	ldr	r0, [pc, #224]	; (80011f8 <main+0x3a4>)
 8001118:	f7ff fbdc 	bl	80008d4 <Puts>
		  set_cursor(2,0);
 800111c:	2100      	movs	r1, #0
 800111e:	2002      	movs	r0, #2
 8001120:	f7ff fbbb 	bl	800089a <set_cursor>
		  Puts(&rxbuf[0]);
 8001124:	480f      	ldr	r0, [pc, #60]	; (8001164 <main+0x310>)
 8001126:	f7ff fbd5 	bl	80008d4 <Puts>
		  set_cursor(2,10);
 800112a:	210a      	movs	r1, #10
 800112c:	2002      	movs	r0, #2
 800112e:	f7ff fbb4 	bl	800089a <set_cursor>
		  Puts(str_2);			//limit switch1 debug
 8001132:	4821      	ldr	r0, [pc, #132]	; (80011b8 <main+0x364>)
 8001134:	f7ff fbce 	bl	80008d4 <Puts>
		  set_cursor(2,12);
 8001138:	210c      	movs	r1, #12
 800113a:	2002      	movs	r0, #2
 800113c:	f7ff fbad 	bl	800089a <set_cursor>
		  Puts(str_3);			//limit switch2 debug
 8001140:	481b      	ldr	r0, [pc, #108]	; (80011b0 <main+0x35c>)
 8001142:	f7ff fbc7 	bl	80008d4 <Puts>
		  set_cursor(2,14);
 8001146:	210e      	movs	r1, #14
 8001148:	2002      	movs	r0, #2
 800114a:	f7ff fba6 	bl	800089a <set_cursor>
		  Puts(str_7);			//limit switch3 debug
 800114e:	481c      	ldr	r0, [pc, #112]	; (80011c0 <main+0x36c>)
 8001150:	f7ff fbc0 	bl	80008d4 <Puts>

		  if(rxbuf[0] < 95){	//B_dash setting
 8001154:	4b03      	ldr	r3, [pc, #12]	; (8001164 <main+0x310>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b5e      	cmp	r3, #94	; 0x5e
 800115a:	d851      	bhi.n	8001200 <main+0x3ac>
			  B_dash = 2;
 800115c:	4b27      	ldr	r3, [pc, #156]	; (80011fc <main+0x3a8>)
 800115e:	2202      	movs	r2, #2
 8001160:	701a      	strb	r2, [r3, #0]
 8001162:	e050      	b.n	8001206 <main+0x3b2>
 8001164:	200000c0 	.word	0x200000c0
 8001168:	200004bc 	.word	0x200004bc
 800116c:	2000027c 	.word	0x2000027c
 8001170:	20000168 	.word	0x20000168
 8001174:	2000023c 	.word	0x2000023c
 8001178:	2000047c 	.word	0x2000047c
 800117c:	20000128 	.word	0x20000128
 8001180:	200001ac 	.word	0x200001ac
 8001184:	200003f4 	.word	0x200003f4
 8001188:	200003b4 	.word	0x200003b4
 800118c:	200001ec 	.word	0x200001ec
 8001190:	08008a54 	.word	0x08008a54
 8001194:	08008a5c 	.word	0x08008a5c
 8001198:	40021800 	.word	0x40021800
 800119c:	40021000 	.word	0x40021000
 80011a0:	40020800 	.word	0x40020800
 80011a4:	20000548 	.word	0x20000548
 80011a8:	200000a0 	.word	0x200000a0
 80011ac:	08008a6c 	.word	0x08008a6c
 80011b0:	200002bc 	.word	0x200002bc
 80011b4:	200000a1 	.word	0x200000a1
 80011b8:	20000434 	.word	0x20000434
 80011bc:	200000a2 	.word	0x200000a2
 80011c0:	200001a8 	.word	0x200001a8
 80011c4:	200003a8 	.word	0x200003a8
 80011c8:	200003ac 	.word	0x200003ac
 80011cc:	200000a6 	.word	0x200000a6
 80011d0:	20000478 	.word	0x20000478
 80011d4:	200000a8 	.word	0x200000a8
 80011d8:	20000124 	.word	0x20000124
 80011dc:	200000aa 	.word	0x200000aa
 80011e0:	43480000 	.word	0x43480000
 80011e4:	42c80000 	.word	0x42c80000
 80011e8:	43340000 	.word	0x43340000
 80011ec:	43b18000 	.word	0x43b18000
 80011f0:	20000238 	.word	0x20000238
 80011f4:	200000a3 	.word	0x200000a3
 80011f8:	08008a70 	.word	0x08008a70
 80011fc:	20000002 	.word	0x20000002
		  }else{
			  B_dash = 1;
 8001200:	4ba3      	ldr	r3, [pc, #652]	; (8001490 <main+0x63c>)
 8001202:	2201      	movs	r2, #1
 8001204:	701a      	strb	r2, [r3, #0]
		  if(RST == 0){
			  HAL_NVIC_SystemReset();		//stm32 reset when communication cut off
		  }
*/

		  if(rxbuf[0] == 'k'){
 8001206:	4ba3      	ldr	r3, [pc, #652]	; (8001494 <main+0x640>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b6b      	cmp	r3, #107	; 0x6b
 800120c:	d113      	bne.n	8001236 <main+0x3e2>
			  mecanum(0,0,0,0);
 800120e:	2300      	movs	r3, #0
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f001 fd75 	bl	8002d04 <mecanum>
			  motor_5(0,0);
 800121a:	2100      	movs	r1, #0
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff fc69 	bl	8000af4 <motor_5>
			  motor_6(0,0);
 8001222:	2100      	movs	r1, #0
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff fc7d 	bl	8000b24 <motor_6>
			  motor_7(0,0);
 800122a:	2100      	movs	r1, #0
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff fc91 	bl	8000b54 <motor_7>
		  if(rxbuf[0] == 'k'){
 8001232:	f000 bda5 	b.w	8001d80 <main+0xf2c>

		  }else if(rxbuf[0] == 'c' || rxbuf[0] == 'C'){
 8001236:	4b97      	ldr	r3, [pc, #604]	; (8001494 <main+0x640>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b63      	cmp	r3, #99	; 0x63
 800123c:	d003      	beq.n	8001246 <main+0x3f2>
 800123e:	4b95      	ldr	r3, [pc, #596]	; (8001494 <main+0x640>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b43      	cmp	r3, #67	; 0x43
 8001244:	d10f      	bne.n	8001266 <main+0x412>
			  mecanum(1,speed * B_dash,seigyoR,seigyoL);		//forward
 8001246:	4b92      	ldr	r3, [pc, #584]	; (8001490 <main+0x63c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	b29a      	uxth	r2, r3
 800124c:	4b92      	ldr	r3, [pc, #584]	; (8001498 <main+0x644>)
 800124e:	881b      	ldrh	r3, [r3, #0]
 8001250:	fb12 f303 	smulbb	r3, r2, r3
 8001254:	b299      	uxth	r1, r3
 8001256:	4b91      	ldr	r3, [pc, #580]	; (800149c <main+0x648>)
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	4b91      	ldr	r3, [pc, #580]	; (80014a0 <main+0x64c>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	2001      	movs	r0, #1
 8001260:	f001 fd50 	bl	8002d04 <mecanum>
 8001264:	e386      	b.n	8001974 <main+0xb20>

		  }else if(rxbuf[0] == 'g' || rxbuf[0] == 'G'){
 8001266:	4b8b      	ldr	r3, [pc, #556]	; (8001494 <main+0x640>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b67      	cmp	r3, #103	; 0x67
 800126c:	d003      	beq.n	8001276 <main+0x422>
 800126e:	4b89      	ldr	r3, [pc, #548]	; (8001494 <main+0x640>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b47      	cmp	r3, #71	; 0x47
 8001274:	d10f      	bne.n	8001296 <main+0x442>
			  mecanum(2,speed * B_dash,seigyoR,seigyoL);		//back
 8001276:	4b86      	ldr	r3, [pc, #536]	; (8001490 <main+0x63c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b86      	ldr	r3, [pc, #536]	; (8001498 <main+0x644>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	fb12 f303 	smulbb	r3, r2, r3
 8001284:	b299      	uxth	r1, r3
 8001286:	4b85      	ldr	r3, [pc, #532]	; (800149c <main+0x648>)
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <main+0x64c>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	2002      	movs	r0, #2
 8001290:	f001 fd38 	bl	8002d04 <mecanum>
 8001294:	e36e      	b.n	8001974 <main+0xb20>

		  }else if(rxbuf[0] == 'i' ){
 8001296:	4b7f      	ldr	r3, [pc, #508]	; (8001494 <main+0x640>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b69      	cmp	r3, #105	; 0x69
 800129c:	d11e      	bne.n	80012dc <main+0x488>
			  mecanum(9,speed * B_dash,0,0);			//turn right
 800129e:	4b7c      	ldr	r3, [pc, #496]	; (8001490 <main+0x63c>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b29a      	uxth	r2, r3
 80012a4:	4b7c      	ldr	r3, [pc, #496]	; (8001498 <main+0x644>)
 80012a6:	881b      	ldrh	r3, [r3, #0]
 80012a8:	fb12 f303 	smulbb	r3, r2, r3
 80012ac:	b299      	uxth	r1, r3
 80012ae:	2300      	movs	r3, #0
 80012b0:	2200      	movs	r2, #0
 80012b2:	2009      	movs	r0, #9
 80012b4:	f001 fd26 	bl	8002d04 <mecanum>
			  houi = JY901_yaw_get(houi_def);
 80012b8:	4b7a      	ldr	r3, [pc, #488]	; (80014a4 <main+0x650>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fa46 	bl	8000750 <JY901_yaw_get>
 80012c4:	4602      	mov	r2, r0
 80012c6:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <main+0x654>)
 80012c8:	601a      	str	r2, [r3, #0]
			  houi_rot = houi + 10;
 80012ca:	4b77      	ldr	r3, [pc, #476]	; (80014a8 <main+0x654>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	330a      	adds	r3, #10
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	4b75      	ldr	r3, [pc, #468]	; (80014ac <main+0x658>)
 80012d6:	801a      	strh	r2, [r3, #0]
		  if(rxbuf[0] == 'k'){
 80012d8:	f000 bd52 	b.w	8001d80 <main+0xf2c>

		  }else if(rxbuf[0] == 'j' ){
 80012dc:	4b6d      	ldr	r3, [pc, #436]	; (8001494 <main+0x640>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b6a      	cmp	r3, #106	; 0x6a
 80012e2:	d11e      	bne.n	8001322 <main+0x4ce>
			  mecanum(10,speed * B_dash,0,0);			//turn left
 80012e4:	4b6a      	ldr	r3, [pc, #424]	; (8001490 <main+0x63c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b6b      	ldr	r3, [pc, #428]	; (8001498 <main+0x644>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	fb12 f303 	smulbb	r3, r2, r3
 80012f2:	b299      	uxth	r1, r3
 80012f4:	2300      	movs	r3, #0
 80012f6:	2200      	movs	r2, #0
 80012f8:	200a      	movs	r0, #10
 80012fa:	f001 fd03 	bl	8002d04 <mecanum>
			  houi = JY901_yaw_get(houi_def);
 80012fe:	4b69      	ldr	r3, [pc, #420]	; (80014a4 <main+0x650>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fa23 	bl	8000750 <JY901_yaw_get>
 800130a:	4602      	mov	r2, r0
 800130c:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <main+0x654>)
 800130e:	601a      	str	r2, [r3, #0]
			  houi_rot = houi - 10;
 8001310:	4b65      	ldr	r3, [pc, #404]	; (80014a8 <main+0x654>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	3b0a      	subs	r3, #10
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b64      	ldr	r3, [pc, #400]	; (80014ac <main+0x658>)
 800131c:	801a      	strh	r2, [r3, #0]
		  if(rxbuf[0] == 'k'){
 800131e:	f000 bd2f 	b.w	8001d80 <main+0xf2c>

		  }else if(rxbuf[0] == 'a' || rxbuf[0] == 'A'){
 8001322:	4b5c      	ldr	r3, [pc, #368]	; (8001494 <main+0x640>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b61      	cmp	r3, #97	; 0x61
 8001328:	d003      	beq.n	8001332 <main+0x4de>
 800132a:	4b5a      	ldr	r3, [pc, #360]	; (8001494 <main+0x640>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b41      	cmp	r3, #65	; 0x41
 8001330:	d10d      	bne.n	800134e <main+0x4fa>
			  mecanum(3,speed * B_dash,0,0);		//shift to the right
 8001332:	4b57      	ldr	r3, [pc, #348]	; (8001490 <main+0x63c>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b29a      	uxth	r2, r3
 8001338:	4b57      	ldr	r3, [pc, #348]	; (8001498 <main+0x644>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	fb12 f303 	smulbb	r3, r2, r3
 8001340:	b299      	uxth	r1, r3
 8001342:	2300      	movs	r3, #0
 8001344:	2200      	movs	r2, #0
 8001346:	2003      	movs	r0, #3
 8001348:	f001 fcdc 	bl	8002d04 <mecanum>
 800134c:	e312      	b.n	8001974 <main+0xb20>

		  }else if(rxbuf[0] == 'e' || rxbuf[0] == 'E'){
 800134e:	4b51      	ldr	r3, [pc, #324]	; (8001494 <main+0x640>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b65      	cmp	r3, #101	; 0x65
 8001354:	d003      	beq.n	800135e <main+0x50a>
 8001356:	4b4f      	ldr	r3, [pc, #316]	; (8001494 <main+0x640>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b45      	cmp	r3, #69	; 0x45
 800135c:	d10d      	bne.n	800137a <main+0x526>
			  mecanum(4,speed * B_dash,0,0);		//shift to the left
 800135e:	4b4c      	ldr	r3, [pc, #304]	; (8001490 <main+0x63c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b29a      	uxth	r2, r3
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <main+0x644>)
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	fb12 f303 	smulbb	r3, r2, r3
 800136c:	b299      	uxth	r1, r3
 800136e:	2300      	movs	r3, #0
 8001370:	2200      	movs	r2, #0
 8001372:	2004      	movs	r0, #4
 8001374:	f001 fcc6 	bl	8002d04 <mecanum>
 8001378:	e2fc      	b.n	8001974 <main+0xb20>

		  }else if(rxbuf[0] == 'b' || rxbuf[0] == 'B'){
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <main+0x640>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b62      	cmp	r3, #98	; 0x62
 8001380:	d003      	beq.n	800138a <main+0x536>
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <main+0x640>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b42      	cmp	r3, #66	; 0x42
 8001388:	d10d      	bne.n	80013a6 <main+0x552>
			  mecanum(5,speed * B_dash,0,0);		//go diagonally to the right
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <main+0x63c>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b41      	ldr	r3, [pc, #260]	; (8001498 <main+0x644>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	fb12 f303 	smulbb	r3, r2, r3
 8001398:	b299      	uxth	r1, r3
 800139a:	2300      	movs	r3, #0
 800139c:	2200      	movs	r2, #0
 800139e:	2005      	movs	r0, #5
 80013a0:	f001 fcb0 	bl	8002d04 <mecanum>
 80013a4:	e2e6      	b.n	8001974 <main+0xb20>

		  }else if(rxbuf[0] == 'f' || rxbuf[0] == 'F'){
 80013a6:	4b3b      	ldr	r3, [pc, #236]	; (8001494 <main+0x640>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b66      	cmp	r3, #102	; 0x66
 80013ac:	d003      	beq.n	80013b6 <main+0x562>
 80013ae:	4b39      	ldr	r3, [pc, #228]	; (8001494 <main+0x640>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b46      	cmp	r3, #70	; 0x46
 80013b4:	d10d      	bne.n	80013d2 <main+0x57e>
			  mecanum(8,speed * B_dash,0,0);		//go diagonally backward to the left
 80013b6:	4b36      	ldr	r3, [pc, #216]	; (8001490 <main+0x63c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <main+0x644>)
 80013be:	881b      	ldrh	r3, [r3, #0]
 80013c0:	fb12 f303 	smulbb	r3, r2, r3
 80013c4:	b299      	uxth	r1, r3
 80013c6:	2300      	movs	r3, #0
 80013c8:	2200      	movs	r2, #0
 80013ca:	2008      	movs	r0, #8
 80013cc:	f001 fc9a 	bl	8002d04 <mecanum>
 80013d0:	e2d0      	b.n	8001974 <main+0xb20>

		  }else if(rxbuf[0] == 'd' || rxbuf[0] == 'D'){
 80013d2:	4b30      	ldr	r3, [pc, #192]	; (8001494 <main+0x640>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b64      	cmp	r3, #100	; 0x64
 80013d8:	d003      	beq.n	80013e2 <main+0x58e>
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <main+0x640>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b44      	cmp	r3, #68	; 0x44
 80013e0:	d10d      	bne.n	80013fe <main+0x5aa>
			  mecanum(6,speed * B_dash,0,0);		//go diagonally to the left
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <main+0x63c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <main+0x644>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	fb12 f303 	smulbb	r3, r2, r3
 80013f0:	b299      	uxth	r1, r3
 80013f2:	2300      	movs	r3, #0
 80013f4:	2200      	movs	r2, #0
 80013f6:	2006      	movs	r0, #6
 80013f8:	f001 fc84 	bl	8002d04 <mecanum>
 80013fc:	e2ba      	b.n	8001974 <main+0xb20>

		  }else if(rxbuf[0] == 'h' || rxbuf[0] == 'H'){
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <main+0x640>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b68      	cmp	r3, #104	; 0x68
 8001404:	d003      	beq.n	800140e <main+0x5ba>
 8001406:	4b23      	ldr	r3, [pc, #140]	; (8001494 <main+0x640>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b48      	cmp	r3, #72	; 0x48
 800140c:	d10d      	bne.n	800142a <main+0x5d6>
			  mecanum(7,speed * B_dash,0,0);			// go diagonally backward to the right
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <main+0x63c>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b29a      	uxth	r2, r3
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <main+0x644>)
 8001416:	881b      	ldrh	r3, [r3, #0]
 8001418:	fb12 f303 	smulbb	r3, r2, r3
 800141c:	b299      	uxth	r1, r3
 800141e:	2300      	movs	r3, #0
 8001420:	2200      	movs	r2, #0
 8001422:	2007      	movs	r0, #7
 8001424:	f001 fc6e 	bl	8002d04 <mecanum>
 8001428:	e2a4      	b.n	8001974 <main+0xb20>

		  }else if(rxbuf[0] == 'm'){
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <main+0x640>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b6d      	cmp	r3, #109	; 0x6d
 8001430:	d106      	bne.n	8001440 <main+0x5ec>
			  motor_5(800,0);		// arm dasu
 8001432:	2100      	movs	r1, #0
 8001434:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001438:	f7ff fb5c 	bl	8000af4 <motor_5>
		  if(rxbuf[0] == 'k'){
 800143c:	f000 bca0 	b.w	8001d80 <main+0xf2c>
		  }else if(rxbuf[0] == 'l'){
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <main+0x640>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b6c      	cmp	r3, #108	; 0x6c
 8001446:	d10f      	bne.n	8001468 <main+0x614>
			  motor_5(0,500);		//arm simau
 8001448:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff fb51 	bl	8000af4 <motor_5>

			  if(LS_1 == 1){
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <main+0x65c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8492 	beq.w	8001d80 <main+0xf2c>
				  motor_5(0,0);		//arm stop by limit switch
 800145c:	2100      	movs	r1, #0
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fb48 	bl	8000af4 <motor_5>
		  if(rxbuf[0] == 'k'){
 8001464:	f000 bc8c 	b.w	8001d80 <main+0xf2c>
			  }
		  }else if(rxbuf[0] == 'n'){
 8001468:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <main+0x640>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b6e      	cmp	r3, #110	; 0x6e
 800146e:	d123      	bne.n	80014b8 <main+0x664>
			  motor_6(500,0);		// arm down
 8001470:	2100      	movs	r1, #0
 8001472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001476:	f7ff fb55 	bl	8000b24 <motor_6>

			  if(LS_3){
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <main+0x660>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 847e 	beq.w	8001d80 <main+0xf2c>
				  motor_6(0,0);
 8001484:	2100      	movs	r1, #0
 8001486:	2000      	movs	r0, #0
 8001488:	f7ff fb4c 	bl	8000b24 <motor_6>
		  if(rxbuf[0] == 'k'){
 800148c:	f000 bc78 	b.w	8001d80 <main+0xf2c>
 8001490:	20000002 	.word	0x20000002
 8001494:	200000c0 	.word	0x200000c0
 8001498:	20000000 	.word	0x20000000
 800149c:	200000a6 	.word	0x200000a6
 80014a0:	200000a8 	.word	0x200000a8
 80014a4:	20000548 	.word	0x20000548
 80014a8:	200003a8 	.word	0x200003a8
 80014ac:	200000aa 	.word	0x200000aa
 80014b0:	200000a0 	.word	0x200000a0
 80014b4:	200000a2 	.word	0x200000a2
			  }

		  }else if(rxbuf[0] == 'o'){
 80014b8:	4b93      	ldr	r3, [pc, #588]	; (8001708 <main+0x8b4>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b6f      	cmp	r3, #111	; 0x6f
 80014be:	d10f      	bne.n	80014e0 <main+0x68c>
			  motor_6(0,500);		//arm up
 80014c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80014c4:	2000      	movs	r0, #0
 80014c6:	f7ff fb2d 	bl	8000b24 <motor_6>

			  if(LS_2 == 1){
 80014ca:	4b90      	ldr	r3, [pc, #576]	; (800170c <main+0x8b8>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	f000 8456 	beq.w	8001d80 <main+0xf2c>
				  motor_6(0,0);		//arm stop by limit switch
 80014d4:	2100      	movs	r1, #0
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fb24 	bl	8000b24 <motor_6>
		  if(rxbuf[0] == 'k'){
 80014dc:	f000 bc50 	b.w	8001d80 <main+0xf2c>
			  }
		  }else if(rxbuf[0] == 'p'){
 80014e0:	4b89      	ldr	r3, [pc, #548]	; (8001708 <main+0x8b4>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b70      	cmp	r3, #112	; 0x70
 80014e6:	d11c      	bne.n	8001522 <main+0x6ce>
			  for(;servo2_kakudo < 360 ; servo2_kakudo++){
 80014e8:	e014      	b.n	8001514 <main+0x6c0>
			  	  servo_2(servo2_kakudo / 4);
 80014ea:	4b89      	ldr	r3, [pc, #548]	; (8001710 <main+0x8bc>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fbd0 	bl	8000c98 <servo_2>
			  	  HAL_Delay(5);
 80014f8:	2005      	movs	r0, #5
 80014fa:	f002 fa7b 	bl	80039f4 <HAL_Delay>
			  	  if(rxbuf[0] == 'k'){
 80014fe:	4b82      	ldr	r3, [pc, #520]	; (8001708 <main+0x8b4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b6b      	cmp	r3, #107	; 0x6b
 8001504:	f000 821f 	beq.w	8001946 <main+0xaf2>
			  for(;servo2_kakudo < 360 ; servo2_kakudo++){
 8001508:	4b81      	ldr	r3, [pc, #516]	; (8001710 <main+0x8bc>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	3301      	adds	r3, #1
 800150e:	b29a      	uxth	r2, r3
 8001510:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <main+0x8bc>)
 8001512:	801a      	strh	r2, [r3, #0]
 8001514:	4b7e      	ldr	r3, [pc, #504]	; (8001710 <main+0x8bc>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800151c:	d3e5      	bcc.n	80014ea <main+0x696>
		  if(rxbuf[0] == 'k'){
 800151e:	f000 bc2f 	b.w	8001d80 <main+0xf2c>
			  		  break;
			  	  }
			  }
		  }else if(rxbuf[0] == 'q'){
 8001522:	4b79      	ldr	r3, [pc, #484]	; (8001708 <main+0x8b4>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b71      	cmp	r3, #113	; 0x71
 8001528:	d11b      	bne.n	8001562 <main+0x70e>
			  for(;servo2_kakudo > 0 ; servo2_kakudo--){
 800152a:	e014      	b.n	8001556 <main+0x702>
				  servo_2(servo2_kakudo / 4);
 800152c:	4b78      	ldr	r3, [pc, #480]	; (8001710 <main+0x8bc>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	089b      	lsrs	r3, r3, #2
 8001532:	b29b      	uxth	r3, r3
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fbaf 	bl	8000c98 <servo_2>
				  HAL_Delay(5);
 800153a:	2005      	movs	r0, #5
 800153c:	f002 fa5a 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 8001540:	4b71      	ldr	r3, [pc, #452]	; (8001708 <main+0x8b4>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b6b      	cmp	r3, #107	; 0x6b
 8001546:	f000 8200 	beq.w	800194a <main+0xaf6>
			  for(;servo2_kakudo > 0 ; servo2_kakudo--){
 800154a:	4b71      	ldr	r3, [pc, #452]	; (8001710 <main+0x8bc>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	3b01      	subs	r3, #1
 8001550:	b29a      	uxth	r2, r3
 8001552:	4b6f      	ldr	r3, [pc, #444]	; (8001710 <main+0x8bc>)
 8001554:	801a      	strh	r2, [r3, #0]
 8001556:	4b6e      	ldr	r3, [pc, #440]	; (8001710 <main+0x8bc>)
 8001558:	881b      	ldrh	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e6      	bne.n	800152c <main+0x6d8>
		  if(rxbuf[0] == 'k'){
 800155e:	f000 bc0f 	b.w	8001d80 <main+0xf2c>
					  break;
				  }
			  }
		  }else if(rxbuf[0] == 'r'){
 8001562:	4b69      	ldr	r3, [pc, #420]	; (8001708 <main+0x8b4>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b72      	cmp	r3, #114	; 0x72
 8001568:	d11b      	bne.n	80015a2 <main+0x74e>
			  for(;servo3_kakudo < 1080 ; servo3_kakudo++){
 800156a:	e014      	b.n	8001596 <main+0x742>
				  servo_3(servo3_kakudo/4);
 800156c:	4b69      	ldr	r3, [pc, #420]	; (8001714 <main+0x8c0>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	b29b      	uxth	r3, r3
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fbb7 	bl	8000ce8 <servo_3>
				  HAL_Delay(5);
 800157a:	2005      	movs	r0, #5
 800157c:	f002 fa3a 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 8001580:	4b61      	ldr	r3, [pc, #388]	; (8001708 <main+0x8b4>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b6b      	cmp	r3, #107	; 0x6b
 8001586:	f000 81e2 	beq.w	800194e <main+0xafa>
			  for(;servo3_kakudo < 1080 ; servo3_kakudo++){
 800158a:	4b62      	ldr	r3, [pc, #392]	; (8001714 <main+0x8c0>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	3301      	adds	r3, #1
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b60      	ldr	r3, [pc, #384]	; (8001714 <main+0x8c0>)
 8001594:	801a      	strh	r2, [r3, #0]
 8001596:	4b5f      	ldr	r3, [pc, #380]	; (8001714 <main+0x8c0>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	f5b3 6f87 	cmp.w	r3, #1080	; 0x438
 800159e:	d3e5      	bcc.n	800156c <main+0x718>
		  if(rxbuf[0] == 'k'){
 80015a0:	e3ee      	b.n	8001d80 <main+0xf2c>
					  break;
				  }
			  }
		  }else if(rxbuf[0] == 's'){
 80015a2:	4b59      	ldr	r3, [pc, #356]	; (8001708 <main+0x8b4>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b73      	cmp	r3, #115	; 0x73
 80015a8:	d11b      	bne.n	80015e2 <main+0x78e>
			  for(;servo3_kakudo > 720 ; servo3_kakudo--){
 80015aa:	e014      	b.n	80015d6 <main+0x782>
				  servo_3(servo3_kakudo / 4);
 80015ac:	4b59      	ldr	r3, [pc, #356]	; (8001714 <main+0x8c0>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fb97 	bl	8000ce8 <servo_3>
				  HAL_Delay(5);
 80015ba:	2005      	movs	r0, #5
 80015bc:	f002 fa1a 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 80015c0:	4b51      	ldr	r3, [pc, #324]	; (8001708 <main+0x8b4>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b6b      	cmp	r3, #107	; 0x6b
 80015c6:	f000 81c4 	beq.w	8001952 <main+0xafe>
			  for(;servo3_kakudo > 720 ; servo3_kakudo--){
 80015ca:	4b52      	ldr	r3, [pc, #328]	; (8001714 <main+0x8c0>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	4b50      	ldr	r3, [pc, #320]	; (8001714 <main+0x8c0>)
 80015d4:	801a      	strh	r2, [r3, #0]
 80015d6:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <main+0x8c0>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 80015de:	d8e5      	bhi.n	80015ac <main+0x758>
		  if(rxbuf[0] == 'k'){
 80015e0:	e3ce      	b.n	8001d80 <main+0xf2c>
					  break;
				  }
			  }
		  }else if(rxbuf[0] == 't'){
 80015e2:	4b49      	ldr	r3, [pc, #292]	; (8001708 <main+0x8b4>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b74      	cmp	r3, #116	; 0x74
 80015e8:	d11b      	bne.n	8001622 <main+0x7ce>
			  for(;servo1_kakudo < 720 ; servo1_kakudo++){
 80015ea:	e014      	b.n	8001616 <main+0x7c2>
				  servo_1(servo1_kakudo / 4);
 80015ec:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <main+0x8c4>)
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7ff fb27 	bl	8000c48 <servo_1>
				  HAL_Delay(5);
 80015fa:	2005      	movs	r0, #5
 80015fc:	f002 f9fa 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <main+0x8b4>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b6b      	cmp	r3, #107	; 0x6b
 8001606:	f000 81a6 	beq.w	8001956 <main+0xb02>
			  for(;servo1_kakudo < 720 ; servo1_kakudo++){
 800160a:	4b43      	ldr	r3, [pc, #268]	; (8001718 <main+0x8c4>)
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	b29a      	uxth	r2, r3
 8001612:	4b41      	ldr	r3, [pc, #260]	; (8001718 <main+0x8c4>)
 8001614:	801a      	strh	r2, [r3, #0]
 8001616:	4b40      	ldr	r3, [pc, #256]	; (8001718 <main+0x8c4>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 800161e:	d3e5      	bcc.n	80015ec <main+0x798>
		  if(rxbuf[0] == 'k'){
 8001620:	e3ae      	b.n	8001d80 <main+0xf2c>
					  break;
				  }
			  }
		  }else if(rxbuf[0] == 'u'){
 8001622:	4b39      	ldr	r3, [pc, #228]	; (8001708 <main+0x8b4>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b75      	cmp	r3, #117	; 0x75
 8001628:	d11a      	bne.n	8001660 <main+0x80c>
			  for(;servo1_kakudo > 0 ; servo1_kakudo--){
 800162a:	e014      	b.n	8001656 <main+0x802>
				  servo_1(servo1_kakudo / 4);
 800162c:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <main+0x8c4>)
 800162e:	881b      	ldrh	r3, [r3, #0]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	b29b      	uxth	r3, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fb07 	bl	8000c48 <servo_1>
				  HAL_Delay(5);
 800163a:	2005      	movs	r0, #5
 800163c:	f002 f9da 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 8001640:	4b31      	ldr	r3, [pc, #196]	; (8001708 <main+0x8b4>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b6b      	cmp	r3, #107	; 0x6b
 8001646:	f000 8188 	beq.w	800195a <main+0xb06>
			  for(;servo1_kakudo > 0 ; servo1_kakudo--){
 800164a:	4b33      	ldr	r3, [pc, #204]	; (8001718 <main+0x8c4>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	3b01      	subs	r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <main+0x8c4>)
 8001654:	801a      	strh	r2, [r3, #0]
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <main+0x8c4>)
 8001658:	881b      	ldrh	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1e6      	bne.n	800162c <main+0x7d8>
		  if(rxbuf[0] == 'k'){
 800165e:	e38f      	b.n	8001d80 <main+0xf2c>
					  break;
				  }
			  }
		  }else if(rxbuf[0] == 'v'){
 8001660:	4b29      	ldr	r3, [pc, #164]	; (8001708 <main+0x8b4>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	2b76      	cmp	r3, #118	; 0x76
 8001666:	d10e      	bne.n	8001686 <main+0x832>
			  servo_init();
 8001668:	f7ff fbde 	bl	8000e28 <servo_init>
			  servo1_kakudo = servo1_init * 4;
 800166c:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <main+0x8c4>)
 800166e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001672:	801a      	strh	r2, [r3, #0]
			  servo2_kakudo = servo2_init * 4;
 8001674:	4b26      	ldr	r3, [pc, #152]	; (8001710 <main+0x8bc>)
 8001676:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800167a:	801a      	strh	r2, [r3, #0]
			  servo3_kakudo = servo3_init * 4;
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <main+0x8c0>)
 800167e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8001682:	801a      	strh	r2, [r3, #0]
		  if(rxbuf[0] == 'k'){
 8001684:	e37c      	b.n	8001d80 <main+0xf2c>

		  }else if(rxbuf[0] == 'w'){
 8001686:	4b20      	ldr	r3, [pc, #128]	; (8001708 <main+0x8b4>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b77      	cmp	r3, #119	; 0x77
 800168c:	d136      	bne.n	80016fc <main+0x8a8>
			  for(;servo2_kakudo < 360 ; servo2_kakudo++){
 800168e:	e02f      	b.n	80016f0 <main+0x89c>
				  servo_2(servo2_kakudo / 4);
 8001690:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <main+0x8bc>)
 8001692:	881b      	ldrh	r3, [r3, #0]
 8001694:	089b      	lsrs	r3, r3, #2
 8001696:	b29b      	uxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fafd 	bl	8000c98 <servo_2>
				  servo_3((int)map(servo2_kakudo , 0 , 360 , 1080 , 720) / 4);
 800169e:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <main+0x8bc>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016aa:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 800171c <main+0x8c8>
 80016ae:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8001720 <main+0x8cc>
 80016b2:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8001724 <main+0x8d0>
 80016b6:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8001728 <main+0x8d4>
 80016ba:	eeb0 0a67 	vmov.f32	s0, s15
 80016be:	f7ff fa91 	bl	8000be4 <map>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	da00      	bge.n	80016ca <main+0x876>
 80016c8:	3303      	adds	r3, #3
 80016ca:	109b      	asrs	r3, r3, #2
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff fb0a 	bl	8000ce8 <servo_3>
				  HAL_Delay(5);
 80016d4:	2005      	movs	r0, #5
 80016d6:	f002 f98d 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <main+0x8b4>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b6b      	cmp	r3, #107	; 0x6b
 80016e0:	f000 813d 	beq.w	800195e <main+0xb0a>
			  for(;servo2_kakudo < 360 ; servo2_kakudo++){
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <main+0x8bc>)
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4b08      	ldr	r3, [pc, #32]	; (8001710 <main+0x8bc>)
 80016ee:	801a      	strh	r2, [r3, #0]
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <main+0x8bc>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80016f8:	d3ca      	bcc.n	8001690 <main+0x83c>
		  if(rxbuf[0] == 'k'){
 80016fa:	e341      	b.n	8001d80 <main+0xf2c>
					  break;
				  }
			  }
		  }else if(rxbuf[0] == 'x'){
 80016fc:	4b02      	ldr	r3, [pc, #8]	; (8001708 <main+0x8b4>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b78      	cmp	r3, #120	; 0x78
 8001702:	d148      	bne.n	8001796 <main+0x942>
			  for(;servo2_kakudo > 0 ; servo2_kakudo--){
 8001704:	e042      	b.n	800178c <main+0x938>
 8001706:	bf00      	nop
 8001708:	200000c0 	.word	0x200000c0
 800170c:	200000a1 	.word	0x200000a1
 8001710:	20000006 	.word	0x20000006
 8001714:	20000008 	.word	0x20000008
 8001718:	20000004 	.word	0x20000004
 800171c:	44340000 	.word	0x44340000
 8001720:	44870000 	.word	0x44870000
 8001724:	43b40000 	.word	0x43b40000
 8001728:	00000000 	.word	0x00000000
				  servo_2(servo2_kakudo / 4);
 800172c:	4bab      	ldr	r3, [pc, #684]	; (80019dc <main+0xb88>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	b29b      	uxth	r3, r3
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff faaf 	bl	8000c98 <servo_2>
				  servo_3((int)map(servo2_kakudo , 0 , 360 , 1080 , 720) / 4);
 800173a:	4ba8      	ldr	r3, [pc, #672]	; (80019dc <main+0xb88>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001746:	ed9f 2aa6 	vldr	s4, [pc, #664]	; 80019e0 <main+0xb8c>
 800174a:	eddf 1aa6 	vldr	s3, [pc, #664]	; 80019e4 <main+0xb90>
 800174e:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 80019e8 <main+0xb94>
 8001752:	eddf 0aa6 	vldr	s1, [pc, #664]	; 80019ec <main+0xb98>
 8001756:	eeb0 0a67 	vmov.f32	s0, s15
 800175a:	f7ff fa43 	bl	8000be4 <map>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	da00      	bge.n	8001766 <main+0x912>
 8001764:	3303      	adds	r3, #3
 8001766:	109b      	asrs	r3, r3, #2
 8001768:	b29b      	uxth	r3, r3
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fabc 	bl	8000ce8 <servo_3>
				  HAL_Delay(5);
 8001770:	2005      	movs	r0, #5
 8001772:	f002 f93f 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 8001776:	4b9e      	ldr	r3, [pc, #632]	; (80019f0 <main+0xb9c>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b6b      	cmp	r3, #107	; 0x6b
 800177c:	f000 80f1 	beq.w	8001962 <main+0xb0e>
			  for(;servo2_kakudo > 0 ; servo2_kakudo--){
 8001780:	4b96      	ldr	r3, [pc, #600]	; (80019dc <main+0xb88>)
 8001782:	881b      	ldrh	r3, [r3, #0]
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b94      	ldr	r3, [pc, #592]	; (80019dc <main+0xb88>)
 800178a:	801a      	strh	r2, [r3, #0]
 800178c:	4b93      	ldr	r3, [pc, #588]	; (80019dc <main+0xb88>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1cb      	bne.n	800172c <main+0x8d8>
		  if(rxbuf[0] == 'k'){
 8001794:	e2f4      	b.n	8001d80 <main+0xf2c>
					  break;
				  }
			  }
		  }else if(rxbuf[0] == '1'){
 8001796:	4b96      	ldr	r3, [pc, #600]	; (80019f0 <main+0xb9c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b31      	cmp	r3, #49	; 0x31
 800179c:	d105      	bne.n	80017aa <main+0x956>
			  motor_sol(800,0);
 800179e:	2100      	movs	r1, #0
 80017a0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80017a4:	f7ff f9ee 	bl	8000b84 <motor_sol>
		  if(rxbuf[0] == 'k'){
 80017a8:	e2ea      	b.n	8001d80 <main+0xf2c>
		  }else if(rxbuf[0] == '2'){
 80017aa:	4b91      	ldr	r3, [pc, #580]	; (80019f0 <main+0xb9c>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b32      	cmp	r3, #50	; 0x32
 80017b0:	d104      	bne.n	80017bc <main+0x968>
			  motor_sol(0,0);
 80017b2:	2100      	movs	r1, #0
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff f9e5 	bl	8000b84 <motor_sol>
		  if(rxbuf[0] == 'k'){
 80017ba:	e2e1      	b.n	8001d80 <main+0xf2c>
		  }else if(rxbuf[0] == '3'){
 80017bc:	4b8c      	ldr	r3, [pc, #560]	; (80019f0 <main+0xb9c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b33      	cmp	r3, #51	; 0x33
 80017c2:	d105      	bne.n	80017d0 <main+0x97c>
			  motor_air(800,0);
 80017c4:	2100      	movs	r1, #0
 80017c6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80017ca:	f7ff f9f3 	bl	8000bb4 <motor_air>
		  if(rxbuf[0] == 'k'){
 80017ce:	e2d7      	b.n	8001d80 <main+0xf2c>
		  }else if(rxbuf[0] == '4'){
 80017d0:	4b87      	ldr	r3, [pc, #540]	; (80019f0 <main+0xb9c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b34      	cmp	r3, #52	; 0x34
 80017d6:	d104      	bne.n	80017e2 <main+0x98e>
			  motor_air(0,0);
 80017d8:	2100      	movs	r1, #0
 80017da:	2000      	movs	r0, #0
 80017dc:	f7ff f9ea 	bl	8000bb4 <motor_air>
		  if(rxbuf[0] == 'k'){
 80017e0:	e2ce      	b.n	8001d80 <main+0xf2c>
		  }else if(rxbuf[0] == 'y'){		//camera arm down
 80017e2:	4b83      	ldr	r3, [pc, #524]	; (80019f0 <main+0xb9c>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b79      	cmp	r3, #121	; 0x79
 80017e8:	d135      	bne.n	8001856 <main+0xa02>
			  for(;servo5_kakudo > 0 ; servo5_kakudo--){
 80017ea:	e02f      	b.n	800184c <main+0x9f8>
				  servo_5(servo5_kakudo / 4);
 80017ec:	4b81      	ldr	r3, [pc, #516]	; (80019f4 <main+0xba0>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	089b      	lsrs	r3, r3, #2
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fac7 	bl	8000d88 <servo_5>
				  servo_6((int)map(servo5_kakudo , 0 , 680 , 180 , 800) / 4);
 80017fa:	4b7e      	ldr	r3, [pc, #504]	; (80019f4 <main+0xba0>)
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001806:	ed9f 2a7c 	vldr	s4, [pc, #496]	; 80019f8 <main+0xba4>
 800180a:	eddf 1a7c 	vldr	s3, [pc, #496]	; 80019fc <main+0xba8>
 800180e:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8001a00 <main+0xbac>
 8001812:	eddf 0a76 	vldr	s1, [pc, #472]	; 80019ec <main+0xb98>
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	f7ff f9e3 	bl	8000be4 <map>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	da00      	bge.n	8001826 <main+0x9d2>
 8001824:	3303      	adds	r3, #3
 8001826:	109b      	asrs	r3, r3, #2
 8001828:	b29b      	uxth	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fad4 	bl	8000dd8 <servo_6>
				  HAL_Delay(5);
 8001830:	2005      	movs	r0, #5
 8001832:	f002 f8df 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 8001836:	4b6e      	ldr	r3, [pc, #440]	; (80019f0 <main+0xb9c>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b6b      	cmp	r3, #107	; 0x6b
 800183c:	f000 8093 	beq.w	8001966 <main+0xb12>
			  for(;servo5_kakudo > 0 ; servo5_kakudo--){
 8001840:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <main+0xba0>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	3b01      	subs	r3, #1
 8001846:	b29a      	uxth	r2, r3
 8001848:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <main+0xba0>)
 800184a:	801a      	strh	r2, [r3, #0]
 800184c:	4b69      	ldr	r3, [pc, #420]	; (80019f4 <main+0xba0>)
 800184e:	881b      	ldrh	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1cb      	bne.n	80017ec <main+0x998>
		  if(rxbuf[0] == 'k'){
 8001854:	e294      	b.n	8001d80 <main+0xf2c>
					  break;
				  }
			  }
		  }else if(rxbuf[0] == 'z'){		//camera arm up
 8001856:	4b66      	ldr	r3, [pc, #408]	; (80019f0 <main+0xb9c>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b7a      	cmp	r3, #122	; 0x7a
 800185c:	d135      	bne.n	80018ca <main+0xa76>
			  for(;servo5_kakudo < 680 ; servo5_kakudo++){
 800185e:	e02e      	b.n	80018be <main+0xa6a>
				  servo_5(servo5_kakudo / 4);
 8001860:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <main+0xba0>)
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	b29b      	uxth	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff fa8d 	bl	8000d88 <servo_5>
				  servo_6((int)map(servo5_kakudo , 0 , 680 , 180 , 800) / 4);
 800186e:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <main+0xba0>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800187a:	ed9f 2a5f 	vldr	s4, [pc, #380]	; 80019f8 <main+0xba4>
 800187e:	eddf 1a5f 	vldr	s3, [pc, #380]	; 80019fc <main+0xba8>
 8001882:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 8001a00 <main+0xbac>
 8001886:	eddf 0a59 	vldr	s1, [pc, #356]	; 80019ec <main+0xb98>
 800188a:	eeb0 0a67 	vmov.f32	s0, s15
 800188e:	f7ff f9a9 	bl	8000be4 <map>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	da00      	bge.n	800189a <main+0xa46>
 8001898:	3303      	adds	r3, #3
 800189a:	109b      	asrs	r3, r3, #2
 800189c:	b29b      	uxth	r3, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fa9a 	bl	8000dd8 <servo_6>
				  HAL_Delay(5);
 80018a4:	2005      	movs	r0, #5
 80018a6:	f002 f8a5 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 80018aa:	4b51      	ldr	r3, [pc, #324]	; (80019f0 <main+0xb9c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b6b      	cmp	r3, #107	; 0x6b
 80018b0:	d05b      	beq.n	800196a <main+0xb16>
			  for(;servo5_kakudo < 680 ; servo5_kakudo++){
 80018b2:	4b50      	ldr	r3, [pc, #320]	; (80019f4 <main+0xba0>)
 80018b4:	881b      	ldrh	r3, [r3, #0]
 80018b6:	3301      	adds	r3, #1
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4b4e      	ldr	r3, [pc, #312]	; (80019f4 <main+0xba0>)
 80018bc:	801a      	strh	r2, [r3, #0]
 80018be:	4b4d      	ldr	r3, [pc, #308]	; (80019f4 <main+0xba0>)
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 80018c6:	d3cb      	bcc.n	8001860 <main+0xa0c>
		  if(rxbuf[0] == 'k'){
 80018c8:	e25a      	b.n	8001d80 <main+0xf2c>
					  break;
				  }
			  }
		  }else if(rxbuf[0] == 'L'){		//camera arm up
 80018ca:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <main+0xb9c>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b4c      	cmp	r3, #76	; 0x4c
 80018d0:	d119      	bne.n	8001906 <main+0xab2>
			  for(;servo6_kakudo > 180 ; servo6_kakudo--){
 80018d2:	e013      	b.n	80018fc <main+0xaa8>
				  servo_6(servo6_kakudo / 4);
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <main+0xbb0>)
 80018d6:	881b      	ldrh	r3, [r3, #0]
 80018d8:	089b      	lsrs	r3, r3, #2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fa7b 	bl	8000dd8 <servo_6>
				  HAL_Delay(5);
 80018e2:	2005      	movs	r0, #5
 80018e4:	f002 f886 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 80018e8:	4b41      	ldr	r3, [pc, #260]	; (80019f0 <main+0xb9c>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b6b      	cmp	r3, #107	; 0x6b
 80018ee:	d03e      	beq.n	800196e <main+0xb1a>
			  for(;servo6_kakudo > 180 ; servo6_kakudo--){
 80018f0:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <main+0xbb0>)
 80018f2:	881b      	ldrh	r3, [r3, #0]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <main+0xbb0>)
 80018fa:	801a      	strh	r2, [r3, #0]
 80018fc:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <main+0xbb0>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	2bb4      	cmp	r3, #180	; 0xb4
 8001902:	d8e7      	bhi.n	80018d4 <main+0xa80>
		  if(rxbuf[0] == 'k'){
 8001904:	e23c      	b.n	8001d80 <main+0xf2c>
					  break;
				  }
			  }
		  }else if(rxbuf[0] == 'M'){		//camera arm up
 8001906:	4b3a      	ldr	r3, [pc, #232]	; (80019f0 <main+0xb9c>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b4d      	cmp	r3, #77	; 0x4d
 800190c:	f040 8238 	bne.w	8001d80 <main+0xf2c>
			  for(;servo6_kakudo < 800 ; servo6_kakudo++){
 8001910:	e013      	b.n	800193a <main+0xae6>
				  servo_6(servo6_kakudo / 4);
 8001912:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <main+0xbb0>)
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	b29b      	uxth	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fa5c 	bl	8000dd8 <servo_6>
				  HAL_Delay(5);
 8001920:	2005      	movs	r0, #5
 8001922:	f002 f867 	bl	80039f4 <HAL_Delay>
				  if(rxbuf[0] == 'k'){
 8001926:	4b32      	ldr	r3, [pc, #200]	; (80019f0 <main+0xb9c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b6b      	cmp	r3, #107	; 0x6b
 800192c:	d021      	beq.n	8001972 <main+0xb1e>
			  for(;servo6_kakudo < 800 ; servo6_kakudo++){
 800192e:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <main+0xbb0>)
 8001930:	881b      	ldrh	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b33      	ldr	r3, [pc, #204]	; (8001a04 <main+0xbb0>)
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <main+0xbb0>)
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001942:	d3e6      	bcc.n	8001912 <main+0xabe>
		  if(rxbuf[0] == 'k'){
 8001944:	e21c      	b.n	8001d80 <main+0xf2c>
			  		  break;
 8001946:	bf00      	nop
 8001948:	e21a      	b.n	8001d80 <main+0xf2c>
					  break;
 800194a:	bf00      	nop
 800194c:	e218      	b.n	8001d80 <main+0xf2c>
					  break;
 800194e:	bf00      	nop
 8001950:	e216      	b.n	8001d80 <main+0xf2c>
					  break;
 8001952:	bf00      	nop
 8001954:	e214      	b.n	8001d80 <main+0xf2c>
					  break;
 8001956:	bf00      	nop
 8001958:	e212      	b.n	8001d80 <main+0xf2c>
					  break;
 800195a:	bf00      	nop
 800195c:	e210      	b.n	8001d80 <main+0xf2c>
					  break;
 800195e:	bf00      	nop
 8001960:	e20e      	b.n	8001d80 <main+0xf2c>
					  break;
 8001962:	bf00      	nop
 8001964:	e20c      	b.n	8001d80 <main+0xf2c>
					  break;
 8001966:	bf00      	nop
 8001968:	e20a      	b.n	8001d80 <main+0xf2c>
					  break;
 800196a:	bf00      	nop
 800196c:	e208      	b.n	8001d80 <main+0xf2c>
					  break;
 800196e:	bf00      	nop
 8001970:	e206      	b.n	8001d80 <main+0xf2c>
					  break;
 8001972:	bf00      	nop
		  if(rxbuf[0] == 'k'){
 8001974:	e204      	b.n	8001d80 <main+0xf2c>
				  }
			  }
		  }
	  }else if(status_2 == 1){
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <main+0xbb4>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d07c      	beq.n	8001a78 <main+0xc24>
		  sprintf(str,"%d",test_speed);
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <main+0xbb8>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	4922      	ldr	r1, [pc, #136]	; (8001a10 <main+0xbbc>)
 8001986:	4823      	ldr	r0, [pc, #140]	; (8001a14 <main+0xbc0>)
 8001988:	f006 fc52 	bl	8008230 <siprintf>

		  OLED_Init();
 800198c:	f7fe ff72 	bl	8000874 <OLED_Init>
		  set_cursor(1,0);
 8001990:	2100      	movs	r1, #0
 8001992:	2001      	movs	r0, #1
 8001994:	f7fe ff81 	bl	800089a <set_cursor>
		  Puts("setting speed");
 8001998:	481f      	ldr	r0, [pc, #124]	; (8001a18 <main+0xbc4>)
 800199a:	f7fe ff9b 	bl	80008d4 <Puts>
		  set_cursor(2,0);
 800199e:	2100      	movs	r1, #0
 80019a0:	2002      	movs	r0, #2
 80019a2:	f7fe ff7a 	bl	800089a <set_cursor>
		  Puts("speed = ");
 80019a6:	481d      	ldr	r0, [pc, #116]	; (8001a1c <main+0xbc8>)
 80019a8:	f7fe ff94 	bl	80008d4 <Puts>
		  set_cursor(2,10);
 80019ac:	210a      	movs	r1, #10
 80019ae:	2002      	movs	r0, #2
 80019b0:	f7fe ff73 	bl	800089a <set_cursor>
		  Puts(str);
 80019b4:	4817      	ldr	r0, [pc, #92]	; (8001a14 <main+0xbc0>)
 80019b6:	f7fe ff8d 	bl	80008d4 <Puts>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,SET);
 80019ba:	2201      	movs	r2, #1
 80019bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c0:	4817      	ldr	r0, [pc, #92]	; (8001a20 <main+0xbcc>)
 80019c2:	f002 fea5 	bl	8004710 <HAL_GPIO_WritePin>

		  if(SW_1 == 1){
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <main+0xbd0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d02c      	beq.n	8001a28 <main+0xbd4>
			  test_speed += 50;
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <main+0xbb8>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	3332      	adds	r3, #50	; 0x32
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <main+0xbb8>)
 80019d8:	801a      	strh	r2, [r3, #0]
 80019da:	e1d2      	b.n	8001d82 <main+0xf2e>
 80019dc:	20000006 	.word	0x20000006
 80019e0:	44340000 	.word	0x44340000
 80019e4:	44870000 	.word	0x44870000
 80019e8:	43b40000 	.word	0x43b40000
 80019ec:	00000000 	.word	0x00000000
 80019f0:	200000c0 	.word	0x200000c0
 80019f4:	2000000a 	.word	0x2000000a
 80019f8:	44480000 	.word	0x44480000
 80019fc:	43340000 	.word	0x43340000
 8001a00:	442a0000 	.word	0x442a0000
 8001a04:	2000000c 	.word	0x2000000c
 8001a08:	200003a4 	.word	0x200003a4
 8001a0c:	200000a4 	.word	0x200000a4
 8001a10:	08008a6c 	.word	0x08008a6c
 8001a14:	2000053c 	.word	0x2000053c
 8001a18:	08008a84 	.word	0x08008a84
 8001a1c:	08008a94 	.word	0x08008a94
 8001a20:	40021000 	.word	0x40021000
 8001a24:	2000009c 	.word	0x2000009c
		  }else if(SW_2 == 1){
 8001a28:	4ba4      	ldr	r3, [pc, #656]	; (8001cbc <main+0xe68>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d006      	beq.n	8001a3e <main+0xbea>
			  test_speed -= 50;
 8001a30:	4ba3      	ldr	r3, [pc, #652]	; (8001cc0 <main+0xe6c>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	3b32      	subs	r3, #50	; 0x32
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4ba1      	ldr	r3, [pc, #644]	; (8001cc0 <main+0xe6c>)
 8001a3a:	801a      	strh	r2, [r3, #0]
 8001a3c:	e1a1      	b.n	8001d82 <main+0xf2e>
		  }else if(SW_3){
 8001a3e:	4ba1      	ldr	r3, [pc, #644]	; (8001cc4 <main+0xe70>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <main+0xbfe>
			  motor_air(800,0);
 8001a46:	2100      	movs	r1, #0
 8001a48:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a4c:	f7ff f8b2 	bl	8000bb4 <motor_air>
 8001a50:	e197      	b.n	8001d82 <main+0xf2e>

		  }else if(SW_4){
 8001a52:	4b9d      	ldr	r3, [pc, #628]	; (8001cc8 <main+0xe74>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <main+0xc12>
			  motor_sol(800,0);
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a60:	f7ff f890 	bl	8000b84 <motor_sol>
 8001a64:	e18d      	b.n	8001d82 <main+0xf2e>
		  }else{
			  motor_air(0,0);
 8001a66:	2100      	movs	r1, #0
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff f8a3 	bl	8000bb4 <motor_air>
			  motor_sol(0,0);
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff f887 	bl	8000b84 <motor_sol>
 8001a76:	e184      	b.n	8001d82 <main+0xf2e>
		  }

	  }else if(status_3 == 1){
 8001a78:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <main+0xe78>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d051      	beq.n	8001b24 <main+0xcd0>

		  sprintf(str_6,"%d",houi_rot);
 8001a80:	4b93      	ldr	r3, [pc, #588]	; (8001cd0 <main+0xe7c>)
 8001a82:	881b      	ldrh	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4993      	ldr	r1, [pc, #588]	; (8001cd4 <main+0xe80>)
 8001a88:	4893      	ldr	r0, [pc, #588]	; (8001cd8 <main+0xe84>)
 8001a8a:	f006 fbd1 	bl	8008230 <siprintf>
		  OLED_Init();
 8001a8e:	f7fe fef1 	bl	8000874 <OLED_Init>
		  set_cursor(1,0);
 8001a92:	2100      	movs	r1, #0
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7fe ff00 	bl	800089a <set_cursor>
		  Puts("status:arm_test");
 8001a9a:	4890      	ldr	r0, [pc, #576]	; (8001cdc <main+0xe88>)
 8001a9c:	f7fe ff1a 	bl	80008d4 <Puts>
		  set_cursor(2,0);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	f7fe fef9 	bl	800089a <set_cursor>
		  Puts("yaw:");
 8001aa8:	488d      	ldr	r0, [pc, #564]	; (8001ce0 <main+0xe8c>)
 8001aaa:	f7fe ff13 	bl	80008d4 <Puts>
		  set_cursor(2,7);
 8001aae:	2107      	movs	r1, #7
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f7fe fef2 	bl	800089a <set_cursor>
		  Puts(str_1);				//yaw
 8001ab6:	488b      	ldr	r0, [pc, #556]	; (8001ce4 <main+0xe90>)
 8001ab8:	f7fe ff0c 	bl	80008d4 <Puts>
		  set_cursor(2,11);
 8001abc:	210b      	movs	r1, #11
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f7fe feeb 	bl	800089a <set_cursor>
		  Puts(str_6);				//yaw_rotation
 8001ac4:	4884      	ldr	r0, [pc, #528]	; (8001cd8 <main+0xe84>)
 8001ac6:	f7fe ff05 	bl	80008d4 <Puts>
		  //HAL_GPIO_WritePin(GPIOE,GPIO_PIN_12,SET);

		  if(SW_1 == 1){
 8001aca:	4b87      	ldr	r3, [pc, #540]	; (8001ce8 <main+0xe94>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <main+0xc8c>
			  motor_6(test_speed , 0);
 8001ad2:	4b7b      	ldr	r3, [pc, #492]	; (8001cc0 <main+0xe6c>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff f823 	bl	8000b24 <motor_6>
 8001ade:	e150      	b.n	8001d82 <main+0xf2e>
		  }else if(SW_2 == 1){
 8001ae0:	4b76      	ldr	r3, [pc, #472]	; (8001cbc <main+0xe68>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <main+0xca2>
			  motor_6(0 , test_speed);
 8001ae8:	4b75      	ldr	r3, [pc, #468]	; (8001cc0 <main+0xe6c>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	4619      	mov	r1, r3
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff f818 	bl	8000b24 <motor_6>
 8001af4:	e145      	b.n	8001d82 <main+0xf2e>
		  }else if(SW_3 == 1){
 8001af6:	4b73      	ldr	r3, [pc, #460]	; (8001cc4 <main+0xe70>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d006      	beq.n	8001b0c <main+0xcb8>
			  motor_5(test_speed , 0);
 8001afe:	4b70      	ldr	r3, [pc, #448]	; (8001cc0 <main+0xe6c>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fff5 	bl	8000af4 <motor_5>
 8001b0a:	e13a      	b.n	8001d82 <main+0xf2e>
		  }else if(SW_4 == 1){
 8001b0c:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <main+0xe74>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 8136 	beq.w	8001d82 <main+0xf2e>
			  motor_5(0 , test_speed);
 8001b16:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <main+0xe6c>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7fe ffe9 	bl	8000af4 <motor_5>
 8001b22:	e12e      	b.n	8001d82 <main+0xf2e>
		  }

	  }else if(SW_1){
 8001b24:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <main+0xe94>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d027      	beq.n	8001b7c <main+0xd28>
		  OLED_Init();
 8001b2c:	f7fe fea2 	bl	8000874 <OLED_Init>
		  set_cursor(1,0);
 8001b30:	2100      	movs	r1, #0
 8001b32:	2001      	movs	r0, #1
 8001b34:	f7fe feb1 	bl	800089a <set_cursor>
		  Puts("test mode");
 8001b38:	486c      	ldr	r0, [pc, #432]	; (8001cec <main+0xe98>)
 8001b3a:	f7fe fecb 	bl	80008d4 <Puts>
		  set_cursor(2,0);			//seigyoL debug
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2002      	movs	r0, #2
 8001b42:	f7fe feaa 	bl	800089a <set_cursor>
		  Puts(str_5);
 8001b46:	486a      	ldr	r0, [pc, #424]	; (8001cf0 <main+0xe9c>)
 8001b48:	f7fe fec4 	bl	80008d4 <Puts>
		  set_cursor(2,4);			//seigyoR debug
 8001b4c:	2104      	movs	r1, #4
 8001b4e:	2002      	movs	r0, #2
 8001b50:	f7fe fea3 	bl	800089a <set_cursor>
		  Puts(str_4);
 8001b54:	4867      	ldr	r0, [pc, #412]	; (8001cf4 <main+0xea0>)
 8001b56:	f7fe febd 	bl	80008d4 <Puts>
		  set_cursor(2,12);
 8001b5a:	210c      	movs	r1, #12
 8001b5c:	2002      	movs	r0, #2
 8001b5e:	f7fe fe9c 	bl	800089a <set_cursor>
		  Puts(str_1);
 8001b62:	4860      	ldr	r0, [pc, #384]	; (8001ce4 <main+0xe90>)
 8001b64:	f7fe feb6 	bl	80008d4 <Puts>

		  mecanum(1,test_speed,seigyoR,seigyoL);
 8001b68:	4b55      	ldr	r3, [pc, #340]	; (8001cc0 <main+0xe6c>)
 8001b6a:	8819      	ldrh	r1, [r3, #0]
 8001b6c:	4b62      	ldr	r3, [pc, #392]	; (8001cf8 <main+0xea4>)
 8001b6e:	881a      	ldrh	r2, [r3, #0]
 8001b70:	4b62      	ldr	r3, [pc, #392]	; (8001cfc <main+0xea8>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	2001      	movs	r0, #1
 8001b76:	f001 f8c5 	bl	8002d04 <mecanum>
 8001b7a:	e102      	b.n	8001d82 <main+0xf2e>

	  }else if(SW_2){
 8001b7c:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <main+0xe68>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d027      	beq.n	8001bd4 <main+0xd80>
		  OLED_Init();
 8001b84:	f7fe fe76 	bl	8000874 <OLED_Init>
		  set_cursor(1,0);
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	f7fe fe85 	bl	800089a <set_cursor>
		  Puts("test mode");
 8001b90:	4856      	ldr	r0, [pc, #344]	; (8001cec <main+0xe98>)
 8001b92:	f7fe fe9f 	bl	80008d4 <Puts>
		  set_cursor(2,0);			//seigyoL debug
 8001b96:	2100      	movs	r1, #0
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f7fe fe7e 	bl	800089a <set_cursor>
		  Puts(str_5);
 8001b9e:	4854      	ldr	r0, [pc, #336]	; (8001cf0 <main+0xe9c>)
 8001ba0:	f7fe fe98 	bl	80008d4 <Puts>
		  set_cursor(2,4);			//seigyoR debug
 8001ba4:	2104      	movs	r1, #4
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f7fe fe77 	bl	800089a <set_cursor>
		  Puts(str_4);
 8001bac:	4851      	ldr	r0, [pc, #324]	; (8001cf4 <main+0xea0>)
 8001bae:	f7fe fe91 	bl	80008d4 <Puts>
		  set_cursor(2,12);
 8001bb2:	210c      	movs	r1, #12
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f7fe fe70 	bl	800089a <set_cursor>
		  Puts(str_1);
 8001bba:	484a      	ldr	r0, [pc, #296]	; (8001ce4 <main+0xe90>)
 8001bbc:	f7fe fe8a 	bl	80008d4 <Puts>

		  mecanum(2,test_speed,seigyoR,seigyoL);
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <main+0xe6c>)
 8001bc2:	8819      	ldrh	r1, [r3, #0]
 8001bc4:	4b4c      	ldr	r3, [pc, #304]	; (8001cf8 <main+0xea4>)
 8001bc6:	881a      	ldrh	r2, [r3, #0]
 8001bc8:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <main+0xea8>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	2002      	movs	r0, #2
 8001bce:	f001 f899 	bl	8002d04 <mecanum>
 8001bd2:	e0d6      	b.n	8001d82 <main+0xf2e>

	  }else if(SW_3 == 1){
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <main+0xe70>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d035      	beq.n	8001c48 <main+0xdf4>
		  OLED_Init();
 8001bdc:	f7fe fe4a 	bl	8000874 <OLED_Init>
		  set_cursor(1,0);
 8001be0:	2100      	movs	r1, #0
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7fe fe59 	bl	800089a <set_cursor>
		  Puts("test mode");
 8001be8:	4840      	ldr	r0, [pc, #256]	; (8001cec <main+0xe98>)
 8001bea:	f7fe fe73 	bl	80008d4 <Puts>
		  set_cursor(2,0);			//seigyoL debug
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f7fe fe52 	bl	800089a <set_cursor>
		  Puts(str_5);
 8001bf6:	483e      	ldr	r0, [pc, #248]	; (8001cf0 <main+0xe9c>)
 8001bf8:	f7fe fe6c 	bl	80008d4 <Puts>
		  set_cursor(2,4);			//seigyoR debug
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	2002      	movs	r0, #2
 8001c00:	f7fe fe4b 	bl	800089a <set_cursor>
		  Puts(str_4);
 8001c04:	483b      	ldr	r0, [pc, #236]	; (8001cf4 <main+0xea0>)
 8001c06:	f7fe fe65 	bl	80008d4 <Puts>
		  set_cursor(2,12);
 8001c0a:	210c      	movs	r1, #12
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	f7fe fe44 	bl	800089a <set_cursor>
		  Puts(str_1);
 8001c12:	4834      	ldr	r0, [pc, #208]	; (8001ce4 <main+0xe90>)
 8001c14:	f7fe fe5e 	bl	80008d4 <Puts>

		  mecanum(9,test_speed,0,0);
 8001c18:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <main+0xe6c>)
 8001c1a:	8819      	ldrh	r1, [r3, #0]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2009      	movs	r0, #9
 8001c22:	f001 f86f 	bl	8002d04 <mecanum>
		  houi = JY901_yaw_get(houi_def);
 8001c26:	4b36      	ldr	r3, [pc, #216]	; (8001d00 <main+0xeac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fd8f 	bl	8000750 <JY901_yaw_get>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <main+0xeb0>)
 8001c36:	601a      	str	r2, [r3, #0]
		  houi_rot = houi + 10;
 8001c38:	4b32      	ldr	r3, [pc, #200]	; (8001d04 <main+0xeb0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	330a      	adds	r3, #10
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	4b23      	ldr	r3, [pc, #140]	; (8001cd0 <main+0xe7c>)
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	e09c      	b.n	8001d82 <main+0xf2e>

	  }else if(SW_4 == 1){
 8001c48:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <main+0xe74>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d05b      	beq.n	8001d08 <main+0xeb4>
		  OLED_Init();
 8001c50:	f7fe fe10 	bl	8000874 <OLED_Init>
		  set_cursor(1,0);
 8001c54:	2100      	movs	r1, #0
 8001c56:	2001      	movs	r0, #1
 8001c58:	f7fe fe1f 	bl	800089a <set_cursor>
		  Puts("test mode");
 8001c5c:	4823      	ldr	r0, [pc, #140]	; (8001cec <main+0xe98>)
 8001c5e:	f7fe fe39 	bl	80008d4 <Puts>
		  set_cursor(2,0);			//seigyoL debug
 8001c62:	2100      	movs	r1, #0
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7fe fe18 	bl	800089a <set_cursor>
		  Puts(str_5);
 8001c6a:	4821      	ldr	r0, [pc, #132]	; (8001cf0 <main+0xe9c>)
 8001c6c:	f7fe fe32 	bl	80008d4 <Puts>
		  set_cursor(2,4);			//seigyoR debug
 8001c70:	2104      	movs	r1, #4
 8001c72:	2002      	movs	r0, #2
 8001c74:	f7fe fe11 	bl	800089a <set_cursor>
		  Puts(str_4);
 8001c78:	481e      	ldr	r0, [pc, #120]	; (8001cf4 <main+0xea0>)
 8001c7a:	f7fe fe2b 	bl	80008d4 <Puts>
		  set_cursor(2,12);
 8001c7e:	210c      	movs	r1, #12
 8001c80:	2002      	movs	r0, #2
 8001c82:	f7fe fe0a 	bl	800089a <set_cursor>
		  Puts(str_1);
 8001c86:	4817      	ldr	r0, [pc, #92]	; (8001ce4 <main+0xe90>)
 8001c88:	f7fe fe24 	bl	80008d4 <Puts>

		  mecanum(10,test_speed,0,0);
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <main+0xe6c>)
 8001c8e:	8819      	ldrh	r1, [r3, #0]
 8001c90:	2300      	movs	r3, #0
 8001c92:	2200      	movs	r2, #0
 8001c94:	200a      	movs	r0, #10
 8001c96:	f001 f835 	bl	8002d04 <mecanum>
		  houi = JY901_yaw_get(houi_def);
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <main+0xeac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fd55 	bl	8000750 <JY901_yaw_get>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <main+0xeb0>)
 8001caa:	601a      	str	r2, [r3, #0]
		  houi_rot = houi - 10;
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <main+0xeb0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	3b0a      	subs	r3, #10
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <main+0xe7c>)
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	e062      	b.n	8001d82 <main+0xf2e>
 8001cbc:	2000009d 	.word	0x2000009d
 8001cc0:	200000a4 	.word	0x200000a4
 8001cc4:	2000009e 	.word	0x2000009e
 8001cc8:	2000009f 	.word	0x2000009f
 8001ccc:	20000546 	.word	0x20000546
 8001cd0:	200000aa 	.word	0x200000aa
 8001cd4:	08008a6c 	.word	0x08008a6c
 8001cd8:	200002c0 	.word	0x200002c0
 8001cdc:	08008aa0 	.word	0x08008aa0
 8001ce0:	08008ab0 	.word	0x08008ab0
 8001ce4:	200003ac 	.word	0x200003ac
 8001ce8:	2000009c 	.word	0x2000009c
 8001cec:	08008ab8 	.word	0x08008ab8
 8001cf0:	20000124 	.word	0x20000124
 8001cf4:	20000478 	.word	0x20000478
 8001cf8:	200000a6 	.word	0x200000a6
 8001cfc:	200000a8 	.word	0x200000a8
 8001d00:	20000548 	.word	0x20000548
 8001d04:	200003a8 	.word	0x200003a8

	  }else if(status_1 + status_2 + status_3 == 0){
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <main+0xf38>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <main+0xf3c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <main+0xf40>)
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d131      	bne.n	8001d82 <main+0xf2e>
		  OLED_Init();
 8001d1e:	f7fe fda9 	bl	8000874 <OLED_Init>
		  set_cursor(1,0);
 8001d22:	2100      	movs	r1, #0
 8001d24:	2001      	movs	r0, #1
 8001d26:	f7fe fdb8 	bl	800089a <set_cursor>
		  Puts("status: free ");
 8001d2a:	481b      	ldr	r0, [pc, #108]	; (8001d98 <main+0xf44>)
 8001d2c:	f7fe fdd2 	bl	80008d4 <Puts>
		  set_cursor(2,0);
 8001d30:	2100      	movs	r1, #0
 8001d32:	2002      	movs	r0, #2
 8001d34:	f7fe fdb1 	bl	800089a <set_cursor>
		  Puts("^o^)/ waiting...");
 8001d38:	4818      	ldr	r0, [pc, #96]	; (8001d9c <main+0xf48>)
 8001d3a:	f7fe fdcb 	bl	80008d4 <Puts>
		  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12,RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8001d44:	4816      	ldr	r0, [pc, #88]	; (8001da0 <main+0xf4c>)
 8001d46:	f002 fce3 	bl	8004710 <HAL_GPIO_WritePin>

		  mecanum(0,0,0,0);
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	2000      	movs	r0, #0
 8001d52:	f000 ffd7 	bl	8002d04 <mecanum>
		  motor_5(0,0);
 8001d56:	2100      	movs	r1, #0
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7fe fecb 	bl	8000af4 <motor_5>
		  motor_6(0,0);
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7fe fedf 	bl	8000b24 <motor_6>
		  motor_7(0,0);
 8001d66:	2100      	movs	r1, #0
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f7fe fef3 	bl	8000b54 <motor_7>
		  motor_air(0,0);
 8001d6e:	2100      	movs	r1, #0
 8001d70:	2000      	movs	r0, #0
 8001d72:	f7fe ff1f 	bl	8000bb4 <motor_air>
		  motor_sol(0,0);
 8001d76:	2100      	movs	r1, #0
 8001d78:	2000      	movs	r0, #0
 8001d7a:	f7fe ff03 	bl	8000b84 <motor_sol>
 8001d7e:	e000      	b.n	8001d82 <main+0xf2e>
		  if(rxbuf[0] == 'k'){
 8001d80:	bf00      	nop

	  }

	  HAL_Delay(5);
 8001d82:	2005      	movs	r0, #5
 8001d84:	f001 fe36 	bl	80039f4 <HAL_Delay>
	  sprintf(str_3,"%d",LS_1);
 8001d88:	f7ff b92b 	b.w	8000fe2 <main+0x18e>
 8001d8c:	20000238 	.word	0x20000238
 8001d90:	200003a4 	.word	0x200003a4
 8001d94:	20000546 	.word	0x20000546
 8001d98:	08008ac4 	.word	0x08008ac4
 8001d9c:	08008ad4 	.word	0x08008ad4
 8001da0:	40021000 	.word	0x40021000

08001da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b0b8      	sub	sp, #224	; 0xe0
 8001da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001daa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dae:	2234      	movs	r2, #52	; 0x34
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f006 fa34 	bl	8008220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	2290      	movs	r2, #144	; 0x90
 8001dce:	2100      	movs	r1, #0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f006 fa25 	bl	8008220 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <SystemClock_Config+0x120>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a3a      	ldr	r2, [pc, #232]	; (8001ec4 <SystemClock_Config+0x120>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <SystemClock_Config+0x120>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dee:	4b36      	ldr	r3, [pc, #216]	; (8001ec8 <SystemClock_Config+0x124>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a35      	ldr	r2, [pc, #212]	; (8001ec8 <SystemClock_Config+0x124>)
 8001df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <SystemClock_Config+0x124>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e06:	2302      	movs	r3, #2
 8001e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e12:	2310      	movs	r3, #16
 8001e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e24:	2308      	movs	r3, #8
 8001e26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001e2a:	23d8      	movs	r3, #216	; 0xd8
 8001e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e30:	2302      	movs	r3, #2
 8001e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e36:	2302      	movs	r3, #2
 8001e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e3c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 f9ff 	bl	8005244 <HAL_RCC_OscConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001e4c:	f000 fef2 	bl	8002c34 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e50:	f003 f9a8 	bl	80051a4 <HAL_PWREx_EnableOverDrive>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001e5a:	f000 feeb 	bl	8002c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5e:	230f      	movs	r3, #15
 8001e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e64:	2302      	movs	r3, #2
 8001e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e80:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e84:	2107      	movs	r1, #7
 8001e86:	4618      	mov	r0, r3
 8001e88:	f003 fc4e 	bl	8005728 <HAL_RCC_ClockConfig>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001e92:	f000 fecf 	bl	8002c34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8001e96:	f248 03c0 	movw	r3, #32960	; 0x80c0
 8001e9a:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea8:	f107 0308 	add.w	r3, r7, #8
 8001eac:	4618      	mov	r0, r3
 8001eae:	f003 fe09 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <SystemClock_Config+0x118>
  {
    Error_Handler();
 8001eb8:	f000 febc 	bl	8002c34 <Error_Handler>
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	37e0      	adds	r7, #224	; 0xe0
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40007000 	.word	0x40007000

08001ecc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <MX_I2C2_Init+0x78>)
 8001ed4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <MX_I2C2_Init+0x7c>)
 8001eda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ee2:	4b17      	ldr	r3, [pc, #92]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f06:	480e      	ldr	r0, [pc, #56]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001f08:	f002 fc4e 	bl	80047a8 <HAL_I2C_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001f12:	f000 fe8f 	bl	8002c34 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f16:	2100      	movs	r1, #0
 8001f18:	4809      	ldr	r0, [pc, #36]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001f1a:	f003 f8ab 	bl	8005074 <HAL_I2CEx_ConfigAnalogFilter>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f24:	f000 fe86 	bl	8002c34 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_I2C2_Init+0x74>)
 8001f2c:	f003 f8ed 	bl	800510a <HAL_I2CEx_ConfigDigitalFilter>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f36:	f000 fe7d 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	200001ec 	.word	0x200001ec
 8001f44:	40005800 	.word	0x40005800
 8001f48:	20404768 	.word	0x20404768

08001f4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b09a      	sub	sp, #104	; 0x68
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f60:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	615a      	str	r2, [r3, #20]
 8001f7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	222c      	movs	r2, #44	; 0x2c
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f006 f94a 	bl	8008220 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f8c:	4b50      	ldr	r3, [pc, #320]	; (80020d0 <MX_TIM1_Init+0x184>)
 8001f8e:	4a51      	ldr	r2, [pc, #324]	; (80020d4 <MX_TIM1_Init+0x188>)
 8001f90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4320-1;
 8001f92:	4b4f      	ldr	r3, [pc, #316]	; (80020d0 <MX_TIM1_Init+0x184>)
 8001f94:	f241 02df 	movw	r2, #4319	; 0x10df
 8001f98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f9a:	4b4d      	ldr	r3, [pc, #308]	; (80020d0 <MX_TIM1_Init+0x184>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001fa0:	4b4b      	ldr	r3, [pc, #300]	; (80020d0 <MX_TIM1_Init+0x184>)
 8001fa2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fa6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa8:	4b49      	ldr	r3, [pc, #292]	; (80020d0 <MX_TIM1_Init+0x184>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fae:	4b48      	ldr	r3, [pc, #288]	; (80020d0 <MX_TIM1_Init+0x184>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fb4:	4b46      	ldr	r3, [pc, #280]	; (80020d0 <MX_TIM1_Init+0x184>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fba:	4845      	ldr	r0, [pc, #276]	; (80020d0 <MX_TIM1_Init+0x184>)
 8001fbc:	f004 f9a8 	bl	8006310 <HAL_TIM_Base_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001fc6:	f000 fe35 	bl	8002c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fce:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	483e      	ldr	r0, [pc, #248]	; (80020d0 <MX_TIM1_Init+0x184>)
 8001fd8:	f004 fca2 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001fe2:	f000 fe27 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fe6:	483a      	ldr	r0, [pc, #232]	; (80020d0 <MX_TIM1_Init+0x184>)
 8001fe8:	f004 f9e8 	bl	80063bc <HAL_TIM_PWM_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001ff2:	f000 fe1f 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffe:	2300      	movs	r3, #0
 8002000:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002002:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002006:	4619      	mov	r1, r3
 8002008:	4831      	ldr	r0, [pc, #196]	; (80020d0 <MX_TIM1_Init+0x184>)
 800200a:	f005 f933 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002014:	f000 fe0e 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002018:	2360      	movs	r3, #96	; 0x60
 800201a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002020:	2300      	movs	r3, #0
 8002022:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002024:	2300      	movs	r3, #0
 8002026:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002038:	2200      	movs	r2, #0
 800203a:	4619      	mov	r1, r3
 800203c:	4824      	ldr	r0, [pc, #144]	; (80020d0 <MX_TIM1_Init+0x184>)
 800203e:	f004 fb57 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8002048:	f000 fdf4 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800204c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002050:	2204      	movs	r2, #4
 8002052:	4619      	mov	r1, r3
 8002054:	481e      	ldr	r0, [pc, #120]	; (80020d0 <MX_TIM1_Init+0x184>)
 8002056:	f004 fb4b 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8002060:	f000 fde8 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002068:	220c      	movs	r2, #12
 800206a:	4619      	mov	r1, r3
 800206c:	4818      	ldr	r0, [pc, #96]	; (80020d0 <MX_TIM1_Init+0x184>)
 800206e:	f004 fb3f 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8002078:	f000 fddc 	bl	8002c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800207c:	2300      	movs	r3, #0
 800207e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002080:	2300      	movs	r3, #0
 8002082:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002094:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800209e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020ac:	1d3b      	adds	r3, r7, #4
 80020ae:	4619      	mov	r1, r3
 80020b0:	4807      	ldr	r0, [pc, #28]	; (80020d0 <MX_TIM1_Init+0x184>)
 80020b2:	f005 f93b 	bl	800732c <HAL_TIMEx_ConfigBreakDeadTime>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 80020bc:	f000 fdba 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <MX_TIM1_Init+0x184>)
 80020c2:	f001 f87f 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 80020c6:	bf00      	nop
 80020c8:	3768      	adds	r7, #104	; 0x68
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200003f4 	.word	0x200003f4
 80020d4:	40010000 	.word	0x40010000

080020d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08e      	sub	sp, #56	; 0x38
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	605a      	str	r2, [r3, #4]
 80020e8:	609a      	str	r2, [r3, #8]
 80020ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
 80020f4:	605a      	str	r2, [r3, #4]
 80020f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020f8:	463b      	mov	r3, r7
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	605a      	str	r2, [r3, #4]
 8002100:	609a      	str	r2, [r3, #8]
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	611a      	str	r2, [r3, #16]
 8002106:	615a      	str	r2, [r3, #20]
 8002108:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800210a:	4b3e      	ldr	r3, [pc, #248]	; (8002204 <MX_TIM2_Init+0x12c>)
 800210c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002110:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216-1;
 8002112:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <MX_TIM2_Init+0x12c>)
 8002114:	22d7      	movs	r2, #215	; 0xd7
 8002116:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002118:	4b3a      	ldr	r3, [pc, #232]	; (8002204 <MX_TIM2_Init+0x12c>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <MX_TIM2_Init+0x12c>)
 8002120:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002124:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002126:	4b37      	ldr	r3, [pc, #220]	; (8002204 <MX_TIM2_Init+0x12c>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212c:	4b35      	ldr	r3, [pc, #212]	; (8002204 <MX_TIM2_Init+0x12c>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002132:	4834      	ldr	r0, [pc, #208]	; (8002204 <MX_TIM2_Init+0x12c>)
 8002134:	f004 f8ec 	bl	8006310 <HAL_TIM_Base_Init>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800213e:	f000 fd79 	bl	8002c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002148:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800214c:	4619      	mov	r1, r3
 800214e:	482d      	ldr	r0, [pc, #180]	; (8002204 <MX_TIM2_Init+0x12c>)
 8002150:	f004 fbe6 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800215a:	f000 fd6b 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800215e:	4829      	ldr	r0, [pc, #164]	; (8002204 <MX_TIM2_Init+0x12c>)
 8002160:	f004 f92c 	bl	80063bc <HAL_TIM_PWM_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800216a:	f000 fd63 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4821      	ldr	r0, [pc, #132]	; (8002204 <MX_TIM2_Init+0x12c>)
 800217e:	f005 f879 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002188:	f000 fd54 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800218c:	2360      	movs	r3, #96	; 0x60
 800218e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800219c:	463b      	mov	r3, r7
 800219e:	2200      	movs	r2, #0
 80021a0:	4619      	mov	r1, r3
 80021a2:	4818      	ldr	r0, [pc, #96]	; (8002204 <MX_TIM2_Init+0x12c>)
 80021a4:	f004 faa4 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80021ae:	f000 fd41 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021b2:	463b      	mov	r3, r7
 80021b4:	2204      	movs	r2, #4
 80021b6:	4619      	mov	r1, r3
 80021b8:	4812      	ldr	r0, [pc, #72]	; (8002204 <MX_TIM2_Init+0x12c>)
 80021ba:	f004 fa99 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80021c4:	f000 fd36 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021c8:	463b      	mov	r3, r7
 80021ca:	2208      	movs	r2, #8
 80021cc:	4619      	mov	r1, r3
 80021ce:	480d      	ldr	r0, [pc, #52]	; (8002204 <MX_TIM2_Init+0x12c>)
 80021d0:	f004 fa8e 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80021da:	f000 fd2b 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021de:	463b      	mov	r3, r7
 80021e0:	220c      	movs	r2, #12
 80021e2:	4619      	mov	r1, r3
 80021e4:	4807      	ldr	r0, [pc, #28]	; (8002204 <MX_TIM2_Init+0x12c>)
 80021e6:	f004 fa83 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80021f0:	f000 fd20 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021f4:	4803      	ldr	r0, [pc, #12]	; (8002204 <MX_TIM2_Init+0x12c>)
 80021f6:	f000 ffe5 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 80021fa:	bf00      	nop
 80021fc:	3738      	adds	r7, #56	; 0x38
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	2000047c 	.word	0x2000047c

08002208 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08e      	sub	sp, #56	; 0x38
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800220e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
 8002218:	609a      	str	r2, [r3, #8]
 800221a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002228:	463b      	mov	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	611a      	str	r2, [r3, #16]
 8002236:	615a      	str	r2, [r3, #20]
 8002238:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <MX_TIM3_Init+0x128>)
 800223c:	4a3d      	ldr	r2, [pc, #244]	; (8002334 <MX_TIM3_Init+0x12c>)
 800223e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216-1;
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <MX_TIM3_Init+0x128>)
 8002242:	22d7      	movs	r2, #215	; 0xd7
 8002244:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002246:	4b3a      	ldr	r3, [pc, #232]	; (8002330 <MX_TIM3_Init+0x128>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800224c:	4b38      	ldr	r3, [pc, #224]	; (8002330 <MX_TIM3_Init+0x128>)
 800224e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002252:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <MX_TIM3_Init+0x128>)
 8002256:	2200      	movs	r2, #0
 8002258:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800225a:	4b35      	ldr	r3, [pc, #212]	; (8002330 <MX_TIM3_Init+0x128>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002260:	4833      	ldr	r0, [pc, #204]	; (8002330 <MX_TIM3_Init+0x128>)
 8002262:	f004 f855 	bl	8006310 <HAL_TIM_Base_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800226c:	f000 fce2 	bl	8002c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002270:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800227a:	4619      	mov	r1, r3
 800227c:	482c      	ldr	r0, [pc, #176]	; (8002330 <MX_TIM3_Init+0x128>)
 800227e:	f004 fb4f 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002288:	f000 fcd4 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800228c:	4828      	ldr	r0, [pc, #160]	; (8002330 <MX_TIM3_Init+0x128>)
 800228e:	f004 f895 	bl	80063bc <HAL_TIM_PWM_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002298:	f000 fccc 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022a4:	f107 031c 	add.w	r3, r7, #28
 80022a8:	4619      	mov	r1, r3
 80022aa:	4821      	ldr	r0, [pc, #132]	; (8002330 <MX_TIM3_Init+0x128>)
 80022ac:	f004 ffe2 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80022b6:	f000 fcbd 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ba:	2360      	movs	r3, #96	; 0x60
 80022bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ca:	463b      	mov	r3, r7
 80022cc:	2200      	movs	r2, #0
 80022ce:	4619      	mov	r1, r3
 80022d0:	4817      	ldr	r0, [pc, #92]	; (8002330 <MX_TIM3_Init+0x128>)
 80022d2:	f004 fa0d 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80022dc:	f000 fcaa 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022e0:	463b      	mov	r3, r7
 80022e2:	2204      	movs	r2, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4812      	ldr	r0, [pc, #72]	; (8002330 <MX_TIM3_Init+0x128>)
 80022e8:	f004 fa02 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80022f2:	f000 fc9f 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022f6:	463b      	mov	r3, r7
 80022f8:	2208      	movs	r2, #8
 80022fa:	4619      	mov	r1, r3
 80022fc:	480c      	ldr	r0, [pc, #48]	; (8002330 <MX_TIM3_Init+0x128>)
 80022fe:	f004 f9f7 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8002308:	f000 fc94 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800230c:	463b      	mov	r3, r7
 800230e:	220c      	movs	r2, #12
 8002310:	4619      	mov	r1, r3
 8002312:	4807      	ldr	r0, [pc, #28]	; (8002330 <MX_TIM3_Init+0x128>)
 8002314:	f004 f9ec 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800231e:	f000 fc89 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002322:	4803      	ldr	r0, [pc, #12]	; (8002330 <MX_TIM3_Init+0x128>)
 8002324:	f000 ff4e 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 8002328:	bf00      	nop
 800232a:	3738      	adds	r7, #56	; 0x38
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	2000027c 	.word	0x2000027c
 8002334:	40000400 	.word	0x40000400

08002338 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08e      	sub	sp, #56	; 0x38
 800233c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	605a      	str	r2, [r3, #4]
 8002348:	609a      	str	r2, [r3, #8]
 800234a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002358:	463b      	mov	r3, r7
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]
 8002360:	609a      	str	r2, [r3, #8]
 8002362:	60da      	str	r2, [r3, #12]
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	615a      	str	r2, [r3, #20]
 8002368:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <MX_TIM4_Init+0x128>)
 800236c:	4a3d      	ldr	r2, [pc, #244]	; (8002464 <MX_TIM4_Init+0x12c>)
 800236e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 216-1;
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <MX_TIM4_Init+0x128>)
 8002372:	22d7      	movs	r2, #215	; 0xd7
 8002374:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <MX_TIM4_Init+0x128>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800237c:	4b38      	ldr	r3, [pc, #224]	; (8002460 <MX_TIM4_Init+0x128>)
 800237e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002382:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002384:	4b36      	ldr	r3, [pc, #216]	; (8002460 <MX_TIM4_Init+0x128>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238a:	4b35      	ldr	r3, [pc, #212]	; (8002460 <MX_TIM4_Init+0x128>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002390:	4833      	ldr	r0, [pc, #204]	; (8002460 <MX_TIM4_Init+0x128>)
 8002392:	f003 ffbd 	bl	8006310 <HAL_TIM_Base_Init>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800239c:	f000 fc4a 	bl	8002c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80023a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023aa:	4619      	mov	r1, r3
 80023ac:	482c      	ldr	r0, [pc, #176]	; (8002460 <MX_TIM4_Init+0x128>)
 80023ae:	f004 fab7 	bl	8006920 <HAL_TIM_ConfigClockSource>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80023b8:	f000 fc3c 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023bc:	4828      	ldr	r0, [pc, #160]	; (8002460 <MX_TIM4_Init+0x128>)
 80023be:	f003 fffd 	bl	80063bc <HAL_TIM_PWM_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80023c8:	f000 fc34 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d0:	2300      	movs	r3, #0
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023d4:	f107 031c 	add.w	r3, r7, #28
 80023d8:	4619      	mov	r1, r3
 80023da:	4821      	ldr	r0, [pc, #132]	; (8002460 <MX_TIM4_Init+0x128>)
 80023dc:	f004 ff4a 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80023e6:	f000 fc25 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ea:	2360      	movs	r3, #96	; 0x60
 80023ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023ee:	2300      	movs	r3, #0
 80023f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023fa:	463b      	mov	r3, r7
 80023fc:	2200      	movs	r2, #0
 80023fe:	4619      	mov	r1, r3
 8002400:	4817      	ldr	r0, [pc, #92]	; (8002460 <MX_TIM4_Init+0x128>)
 8002402:	f004 f975 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800240c:	f000 fc12 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002410:	463b      	mov	r3, r7
 8002412:	2204      	movs	r2, #4
 8002414:	4619      	mov	r1, r3
 8002416:	4812      	ldr	r0, [pc, #72]	; (8002460 <MX_TIM4_Init+0x128>)
 8002418:	f004 f96a 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8002422:	f000 fc07 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002426:	463b      	mov	r3, r7
 8002428:	2208      	movs	r2, #8
 800242a:	4619      	mov	r1, r3
 800242c:	480c      	ldr	r0, [pc, #48]	; (8002460 <MX_TIM4_Init+0x128>)
 800242e:	f004 f95f 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8002438:	f000 fbfc 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800243c:	463b      	mov	r3, r7
 800243e:	220c      	movs	r2, #12
 8002440:	4619      	mov	r1, r3
 8002442:	4807      	ldr	r0, [pc, #28]	; (8002460 <MX_TIM4_Init+0x128>)
 8002444:	f004 f954 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <MX_TIM4_Init+0x11a>
  {
    Error_Handler();
 800244e:	f000 fbf1 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002452:	4803      	ldr	r0, [pc, #12]	; (8002460 <MX_TIM4_Init+0x128>)
 8002454:	f000 feb6 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 8002458:	bf00      	nop
 800245a:	3738      	adds	r7, #56	; 0x38
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000168 	.word	0x20000168
 8002464:	40000800 	.word	0x40000800

08002468 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08e      	sub	sp, #56	; 0x38
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	f107 031c 	add.w	r3, r7, #28
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002488:	463b      	mov	r3, r7
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
 8002494:	611a      	str	r2, [r3, #16]
 8002496:	615a      	str	r2, [r3, #20]
 8002498:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800249a:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <MX_TIM5_Init+0x128>)
 800249c:	4a3d      	ldr	r2, [pc, #244]	; (8002594 <MX_TIM5_Init+0x12c>)
 800249e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 216-1;
 80024a0:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <MX_TIM5_Init+0x128>)
 80024a2:	22d7      	movs	r2, #215	; 0xd7
 80024a4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a6:	4b3a      	ldr	r3, [pc, #232]	; (8002590 <MX_TIM5_Init+0x128>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80024ac:	4b38      	ldr	r3, [pc, #224]	; (8002590 <MX_TIM5_Init+0x128>)
 80024ae:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b4:	4b36      	ldr	r3, [pc, #216]	; (8002590 <MX_TIM5_Init+0x128>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ba:	4b35      	ldr	r3, [pc, #212]	; (8002590 <MX_TIM5_Init+0x128>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024c0:	4833      	ldr	r0, [pc, #204]	; (8002590 <MX_TIM5_Init+0x128>)
 80024c2:	f003 ff25 	bl	8006310 <HAL_TIM_Base_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 80024cc:	f000 fbb2 	bl	8002c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024da:	4619      	mov	r1, r3
 80024dc:	482c      	ldr	r0, [pc, #176]	; (8002590 <MX_TIM5_Init+0x128>)
 80024de:	f004 fa1f 	bl	8006920 <HAL_TIM_ConfigClockSource>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 80024e8:	f000 fba4 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80024ec:	4828      	ldr	r0, [pc, #160]	; (8002590 <MX_TIM5_Init+0x128>)
 80024ee:	f003 ff65 	bl	80063bc <HAL_TIM_PWM_Init>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80024f8:	f000 fb9c 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002504:	f107 031c 	add.w	r3, r7, #28
 8002508:	4619      	mov	r1, r3
 800250a:	4821      	ldr	r0, [pc, #132]	; (8002590 <MX_TIM5_Init+0x128>)
 800250c:	f004 feb2 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002516:	f000 fb8d 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251a:	2360      	movs	r3, #96	; 0x60
 800251c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252a:	463b      	mov	r3, r7
 800252c:	2200      	movs	r2, #0
 800252e:	4619      	mov	r1, r3
 8002530:	4817      	ldr	r0, [pc, #92]	; (8002590 <MX_TIM5_Init+0x128>)
 8002532:	f004 f8dd 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 800253c:	f000 fb7a 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002540:	463b      	mov	r3, r7
 8002542:	2204      	movs	r2, #4
 8002544:	4619      	mov	r1, r3
 8002546:	4812      	ldr	r0, [pc, #72]	; (8002590 <MX_TIM5_Init+0x128>)
 8002548:	f004 f8d2 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM5_Init+0xee>
  {
    Error_Handler();
 8002552:	f000 fb6f 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002556:	463b      	mov	r3, r7
 8002558:	2208      	movs	r2, #8
 800255a:	4619      	mov	r1, r3
 800255c:	480c      	ldr	r0, [pc, #48]	; (8002590 <MX_TIM5_Init+0x128>)
 800255e:	f004 f8c7 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MX_TIM5_Init+0x104>
  {
    Error_Handler();
 8002568:	f000 fb64 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800256c:	463b      	mov	r3, r7
 800256e:	220c      	movs	r2, #12
 8002570:	4619      	mov	r1, r3
 8002572:	4807      	ldr	r0, [pc, #28]	; (8002590 <MX_TIM5_Init+0x128>)
 8002574:	f004 f8bc 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_TIM5_Init+0x11a>
  {
    Error_Handler();
 800257e:	f000 fb59 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002582:	4803      	ldr	r0, [pc, #12]	; (8002590 <MX_TIM5_Init+0x128>)
 8002584:	f000 fe1e 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 8002588:	bf00      	nop
 800258a:	3738      	adds	r7, #56	; 0x38
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	2000023c 	.word	0x2000023c
 8002594:	40000c00 	.word	0x40000c00

08002598 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800259e:	1d3b      	adds	r3, r7, #4
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <MX_TIM6_Init+0x68>)
 80025aa:	4a16      	ldr	r2, [pc, #88]	; (8002604 <MX_TIM6_Init+0x6c>)
 80025ac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10800-1;
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <MX_TIM6_Init+0x68>)
 80025b0:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80025b4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <MX_TIM6_Init+0x68>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000-1;
 80025bc:	4b10      	ldr	r3, [pc, #64]	; (8002600 <MX_TIM6_Init+0x68>)
 80025be:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80025c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025c4:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <MX_TIM6_Init+0x68>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025ca:	480d      	ldr	r0, [pc, #52]	; (8002600 <MX_TIM6_Init+0x68>)
 80025cc:	f003 fea0 	bl	8006310 <HAL_TIM_Base_Init>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80025d6:	f000 fb2d 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025e2:	1d3b      	adds	r3, r7, #4
 80025e4:	4619      	mov	r1, r3
 80025e6:	4806      	ldr	r0, [pc, #24]	; (8002600 <MX_TIM6_Init+0x68>)
 80025e8:	f004 fe44 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80025f2:	f000 fb1f 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200003b4 	.word	0x200003b4
 8002604:	40001000 	.word	0x40001000

08002608 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b09a      	sub	sp, #104	; 0x68
 800260c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800260e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800261c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002628:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	60da      	str	r2, [r3, #12]
 8002636:	611a      	str	r2, [r3, #16]
 8002638:	615a      	str	r2, [r3, #20]
 800263a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800263c:	1d3b      	adds	r3, r7, #4
 800263e:	222c      	movs	r2, #44	; 0x2c
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f005 fdec 	bl	8008220 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <MX_TIM8_Init+0x184>)
 800264a:	4a51      	ldr	r2, [pc, #324]	; (8002790 <MX_TIM8_Init+0x188>)
 800264c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 4320-1;
 800264e:	4b4f      	ldr	r3, [pc, #316]	; (800278c <MX_TIM8_Init+0x184>)
 8002650:	f241 02df 	movw	r2, #4319	; 0x10df
 8002654:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002656:	4b4d      	ldr	r3, [pc, #308]	; (800278c <MX_TIM8_Init+0x184>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 800265c:	4b4b      	ldr	r3, [pc, #300]	; (800278c <MX_TIM8_Init+0x184>)
 800265e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002662:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002664:	4b49      	ldr	r3, [pc, #292]	; (800278c <MX_TIM8_Init+0x184>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800266a:	4b48      	ldr	r3, [pc, #288]	; (800278c <MX_TIM8_Init+0x184>)
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002670:	4b46      	ldr	r3, [pc, #280]	; (800278c <MX_TIM8_Init+0x184>)
 8002672:	2200      	movs	r2, #0
 8002674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002676:	4845      	ldr	r0, [pc, #276]	; (800278c <MX_TIM8_Init+0x184>)
 8002678:	f003 fe4a 	bl	8006310 <HAL_TIM_Base_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8002682:	f000 fad7 	bl	8002c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800268a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800268c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002690:	4619      	mov	r1, r3
 8002692:	483e      	ldr	r0, [pc, #248]	; (800278c <MX_TIM8_Init+0x184>)
 8002694:	f004 f944 	bl	8006920 <HAL_TIM_ConfigClockSource>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d001      	beq.n	80026a2 <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800269e:	f000 fac9 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026a2:	483a      	ldr	r0, [pc, #232]	; (800278c <MX_TIM8_Init+0x184>)
 80026a4:	f003 fe8a 	bl	80063bc <HAL_TIM_PWM_Init>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80026ae:	f000 fac1 	bl	8002c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b2:	2300      	movs	r3, #0
 80026b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026c2:	4619      	mov	r1, r3
 80026c4:	4831      	ldr	r0, [pc, #196]	; (800278c <MX_TIM8_Init+0x184>)
 80026c6:	f004 fdd5 	bl	8007274 <HAL_TIMEx_MasterConfigSynchronization>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80026d0:	f000 fab0 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026d4:	2360      	movs	r3, #96	; 0x60
 80026d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026dc:	2300      	movs	r3, #0
 80026de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026e0:	2300      	movs	r3, #0
 80026e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026e8:	2300      	movs	r3, #0
 80026ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026ec:	2300      	movs	r3, #0
 80026ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80026f4:	2200      	movs	r2, #0
 80026f6:	4619      	mov	r1, r3
 80026f8:	4824      	ldr	r0, [pc, #144]	; (800278c <MX_TIM8_Init+0x184>)
 80026fa:	f003 fff9 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8002704:	f000 fa96 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800270c:	2204      	movs	r2, #4
 800270e:	4619      	mov	r1, r3
 8002710:	481e      	ldr	r0, [pc, #120]	; (800278c <MX_TIM8_Init+0x184>)
 8002712:	f003 ffed 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800271c:	f000 fa8a 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002720:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002724:	220c      	movs	r2, #12
 8002726:	4619      	mov	r1, r3
 8002728:	4818      	ldr	r0, [pc, #96]	; (800278c <MX_TIM8_Init+0x184>)
 800272a:	f003 ffe1 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_TIM8_Init+0x130>
  {
    Error_Handler();
 8002734:	f000 fa7e 	bl	8002c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002738:	2300      	movs	r3, #0
 800273a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002744:	2300      	movs	r3, #0
 8002746:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800274c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002750:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800275a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002764:	2300      	movs	r3, #0
 8002766:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	4619      	mov	r1, r3
 800276c:	4807      	ldr	r0, [pc, #28]	; (800278c <MX_TIM8_Init+0x184>)
 800276e:	f004 fddd 	bl	800732c <HAL_TIMEx_ConfigBreakDeadTime>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <MX_TIM8_Init+0x174>
  {
    Error_Handler();
 8002778:	f000 fa5c 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800277c:	4803      	ldr	r0, [pc, #12]	; (800278c <MX_TIM8_Init+0x184>)
 800277e:	f000 fd21 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 8002782:	bf00      	nop
 8002784:	3768      	adds	r7, #104	; 0x68
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000128 	.word	0x20000128
 8002790:	40010400 	.word	0x40010400

08002794 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800279a:	463b      	mov	r3, r7
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <MX_TIM9_Init+0x6c>)
 80027a8:	4a16      	ldr	r2, [pc, #88]	; (8002804 <MX_TIM9_Init+0x70>)
 80027aa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 80027ac:	4b14      	ldr	r3, [pc, #80]	; (8002800 <MX_TIM9_Init+0x6c>)
 80027ae:	22d7      	movs	r2, #215	; 0xd7
 80027b0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	4b13      	ldr	r3, [pc, #76]	; (8002800 <MX_TIM9_Init+0x6c>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 80027b8:	4b11      	ldr	r3, [pc, #68]	; (8002800 <MX_TIM9_Init+0x6c>)
 80027ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027be:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <MX_TIM9_Init+0x6c>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <MX_TIM9_Init+0x6c>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80027cc:	480c      	ldr	r0, [pc, #48]	; (8002800 <MX_TIM9_Init+0x6c>)
 80027ce:	f003 fd9f 	bl	8006310 <HAL_TIM_Base_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80027d8:	f000 fa2c 	bl	8002c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80027e2:	463b      	mov	r3, r7
 80027e4:	4619      	mov	r1, r3
 80027e6:	4806      	ldr	r0, [pc, #24]	; (8002800 <MX_TIM9_Init+0x6c>)
 80027e8:	f004 f89a 	bl	8006920 <HAL_TIM_ConfigClockSource>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80027f2:	f000 fa1f 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20000438 	.word	0x20000438
 8002804:	40014000 	.word	0x40014000

08002808 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
 800281c:	615a      	str	r2, [r3, #20]
 800281e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <MX_TIM10_Init+0x94>)
 8002822:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <MX_TIM10_Init+0x98>)
 8002824:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4320-1;
 8002826:	4b1d      	ldr	r3, [pc, #116]	; (800289c <MX_TIM10_Init+0x94>)
 8002828:	f241 02df 	movw	r2, #4319	; 0x10df
 800282c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <MX_TIM10_Init+0x94>)
 8002830:	2200      	movs	r2, #0
 8002832:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8002834:	4b19      	ldr	r3, [pc, #100]	; (800289c <MX_TIM10_Init+0x94>)
 8002836:	f240 32e7 	movw	r2, #999	; 0x3e7
 800283a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283c:	4b17      	ldr	r3, [pc, #92]	; (800289c <MX_TIM10_Init+0x94>)
 800283e:	2200      	movs	r2, #0
 8002840:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <MX_TIM10_Init+0x94>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002848:	4814      	ldr	r0, [pc, #80]	; (800289c <MX_TIM10_Init+0x94>)
 800284a:	f003 fd61 	bl	8006310 <HAL_TIM_Base_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8002854:	f000 f9ee 	bl	8002c34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002858:	4810      	ldr	r0, [pc, #64]	; (800289c <MX_TIM10_Init+0x94>)
 800285a:	f003 fdaf 	bl	80063bc <HAL_TIM_PWM_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8002864:	f000 f9e6 	bl	8002c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002868:	2360      	movs	r3, #96	; 0x60
 800286a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2200      	movs	r2, #0
 800287c:	4619      	mov	r1, r3
 800287e:	4807      	ldr	r0, [pc, #28]	; (800289c <MX_TIM10_Init+0x94>)
 8002880:	f003 ff36 	bl	80066f0 <HAL_TIM_PWM_ConfigChannel>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800288a:	f000 f9d3 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800288e:	4803      	ldr	r0, [pc, #12]	; (800289c <MX_TIM10_Init+0x94>)
 8002890:	f000 fc98 	bl	80031c4 <HAL_TIM_MspPostInit>

}
 8002894:	bf00      	nop
 8002896:	3720      	adds	r7, #32
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	200001ac 	.word	0x200001ac
 80028a0:	40014400 	.word	0x40014400

080028a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028aa:	4a15      	ldr	r2, [pc, #84]	; (8002900 <MX_USART1_UART_Init+0x5c>)
 80028ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028ca:	220c      	movs	r2, #12
 80028cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028dc:	2200      	movs	r2, #0
 80028de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_USART1_UART_Init+0x58>)
 80028e8:	f004 fdbc 	bl	8007464 <HAL_UART_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80028f2:	f000 f99f 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000324 	.word	0x20000324
 8002900:	40011000 	.word	0x40011000

08002904 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002908:	4b16      	ldr	r3, [pc, #88]	; (8002964 <MX_USART2_UART_Init+0x60>)
 800290a:	4a17      	ldr	r2, [pc, #92]	; (8002968 <MX_USART2_UART_Init+0x64>)
 800290c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800290e:	4b15      	ldr	r3, [pc, #84]	; (8002964 <MX_USART2_UART_Init+0x60>)
 8002910:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002914:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <MX_USART2_UART_Init+0x60>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <MX_USART2_UART_Init+0x60>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <MX_USART2_UART_Init+0x60>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <MX_USART2_UART_Init+0x60>)
 800292a:	220c      	movs	r2, #12
 800292c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292e:	4b0d      	ldr	r3, [pc, #52]	; (8002964 <MX_USART2_UART_Init+0x60>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <MX_USART2_UART_Init+0x60>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800293a:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <MX_USART2_UART_Init+0x60>)
 800293c:	2200      	movs	r2, #0
 800293e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXINVERT_INIT;
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <MX_USART2_UART_Init+0x60>)
 8002942:	2202      	movs	r2, #2
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8002946:	4b07      	ldr	r3, [pc, #28]	; (8002964 <MX_USART2_UART_Init+0x60>)
 8002948:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800294e:	4805      	ldr	r0, [pc, #20]	; (8002964 <MX_USART2_UART_Init+0x60>)
 8002950:	f004 fd88 	bl	8007464 <HAL_UART_Init>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800295a:	f000 f96b 	bl	8002c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800295e:	bf00      	nop
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	200004bc 	.word	0x200004bc
 8002968:	40004400 	.word	0x40004400

0800296c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002972:	4b16      	ldr	r3, [pc, #88]	; (80029cc <MX_DMA_Init+0x60>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	4a15      	ldr	r2, [pc, #84]	; (80029cc <MX_DMA_Init+0x60>)
 8002978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800297c:	6313      	str	r3, [r2, #48]	; 0x30
 800297e:	4b13      	ldr	r3, [pc, #76]	; (80029cc <MX_DMA_Init+0x60>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002986:	607b      	str	r3, [r7, #4]
 8002988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <MX_DMA_Init+0x60>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <MX_DMA_Init+0x60>)
 8002990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <MX_DMA_Init+0x60>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299e:	603b      	str	r3, [r7, #0]
 80029a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	2010      	movs	r0, #16
 80029a8:	f001 f921 	bl	8003bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80029ac:	2010      	movs	r0, #16
 80029ae:	f001 f93a 	bl	8003c26 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	2100      	movs	r1, #0
 80029b6:	203a      	movs	r0, #58	; 0x3a
 80029b8:	f001 f919 	bl	8003bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80029bc:	203a      	movs	r0, #58	; 0x3a
 80029be:	f001 f932 	bl	8003c26 <HAL_NVIC_EnableIRQ>

}
 80029c2:	bf00      	nop
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
 80029e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029e6:	4b8a      	ldr	r3, [pc, #552]	; (8002c10 <MX_GPIO_Init+0x240>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a89      	ldr	r2, [pc, #548]	; (8002c10 <MX_GPIO_Init+0x240>)
 80029ec:	f043 0320 	orr.w	r3, r3, #32
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b87      	ldr	r3, [pc, #540]	; (8002c10 <MX_GPIO_Init+0x240>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0320 	and.w	r3, r3, #32
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029fe:	4b84      	ldr	r3, [pc, #528]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	4a83      	ldr	r2, [pc, #524]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a04:	f043 0304 	orr.w	r3, r3, #4
 8002a08:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0a:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a16:	4b7e      	ldr	r3, [pc, #504]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	4a7d      	ldr	r2, [pc, #500]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6313      	str	r3, [r2, #48]	; 0x30
 8002a22:	4b7b      	ldr	r3, [pc, #492]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2e:	4b78      	ldr	r3, [pc, #480]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a77      	ldr	r2, [pc, #476]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b75      	ldr	r3, [pc, #468]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a46:	4b72      	ldr	r3, [pc, #456]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a71      	ldr	r2, [pc, #452]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b6f      	ldr	r3, [pc, #444]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a5e:	4b6c      	ldr	r3, [pc, #432]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	4a6b      	ldr	r2, [pc, #428]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a64:	f043 0310 	orr.w	r3, r3, #16
 8002a68:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6a:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	607b      	str	r3, [r7, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a76:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a65      	ldr	r2, [pc, #404]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <MX_GPIO_Init+0x240>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, enable_7_Pin|enable_6_Pin, GPIO_PIN_RESET);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	210c      	movs	r1, #12
 8002a92:	4860      	ldr	r0, [pc, #384]	; (8002c14 <MX_GPIO_Init+0x244>)
 8002a94:	f001 fe3c 	bl	8004710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	485e      	ldr	r0, [pc, #376]	; (8002c18 <MX_GPIO_Init+0x248>)
 8002a9e:	f001 fe37 	bl	8004710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Enable_1_Pin|Enable_2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	21c3      	movs	r1, #195	; 0xc3
 8002aa6:	485d      	ldr	r0, [pc, #372]	; (8002c1c <MX_GPIO_Init+0x24c>)
 8002aa8:	f001 fe32 	bl	8004710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Enable_4_Pin|Enable_3_5_Pin|LED_White_Pin|LED_Green_Pin 
 8002aac:	2200      	movs	r2, #0
 8002aae:	f44f 5176 	mov.w	r1, #15744	; 0x3d80
 8002ab2:	485b      	ldr	r0, [pc, #364]	; (8002c20 <MX_GPIO_Init+0x250>)
 8002ab4:	f001 fe2c 	bl	8004710 <HAL_GPIO_WritePin>
                          |LED_Red_Pin|LED_Yellow_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : enable_7_Pin enable_6_Pin */
  GPIO_InitStruct.Pin = enable_7_Pin|enable_6_Pin;
 8002ab8:	230c      	movs	r3, #12
 8002aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002abc:	2301      	movs	r3, #1
 8002abe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	4619      	mov	r1, r3
 8002ace:	4851      	ldr	r0, [pc, #324]	; (8002c14 <MX_GPIO_Init+0x244>)
 8002ad0:	f001 fc5c 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002ad4:	2310      	movs	r3, #16
 8002ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002ad8:	4b52      	ldr	r3, [pc, #328]	; (8002c24 <MX_GPIO_Init+0x254>)
 8002ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4850      	ldr	r0, [pc, #320]	; (8002c28 <MX_GPIO_Init+0x258>)
 8002ae8:	f001 fc50 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002aec:	2301      	movs	r3, #1
 8002aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af0:	2301      	movs	r3, #1
 8002af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af8:	2300      	movs	r3, #0
 8002afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4619      	mov	r1, r3
 8002b02:	4845      	ldr	r0, [pc, #276]	; (8002c18 <MX_GPIO_Init+0x248>)
 8002b04:	f001 fc42 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pin : Botton_Black_Pin */
  GPIO_InitStruct.Pin = Botton_Black_Pin;
 8002b08:	2304      	movs	r3, #4
 8002b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002b0c:	4b45      	ldr	r3, [pc, #276]	; (8002c24 <MX_GPIO_Init+0x254>)
 8002b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Botton_Black_GPIO_Port, &GPIO_InitStruct);
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	4619      	mov	r1, r3
 8002b1a:	483f      	ldr	r0, [pc, #252]	; (8002c18 <MX_GPIO_Init+0x248>)
 8002b1c:	f001 fc36 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : Botton_Red_Pin Botton_Blue_Pin PF13 PF14 
                           PF15 */
  GPIO_InitStruct.Pin = Botton_Red_Pin|Botton_Blue_Pin|GPIO_PIN_13|GPIO_PIN_14 
 8002b20:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b24:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002b26:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <MX_GPIO_Init+0x254>)
 8002b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	483d      	ldr	r0, [pc, #244]	; (8002c2c <MX_GPIO_Init+0x25c>)
 8002b36:	f001 fc29 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable_1_Pin Enable_2_Pin PG6 PG7 */
  GPIO_InitStruct.Pin = Enable_1_Pin|Enable_2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8002b3a:	23c3      	movs	r3, #195	; 0xc3
 8002b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b42:	2300      	movs	r3, #0
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b46:	2300      	movs	r3, #0
 8002b48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b4a:	f107 031c 	add.w	r3, r7, #28
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4832      	ldr	r0, [pc, #200]	; (8002c1c <MX_GPIO_Init+0x24c>)
 8002b52:	f001 fc1b 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : Enable_4_Pin Enable_3_5_Pin LED_White_Pin LED_Green_Pin 
                           LED_Red_Pin LED_Yellow_Pin */
  GPIO_InitStruct.Pin = Enable_4_Pin|Enable_3_5_Pin|LED_White_Pin|LED_Green_Pin 
 8002b56:	f44f 5376 	mov.w	r3, #15744	; 0x3d80
 8002b5a:	61fb      	str	r3, [r7, #28]
                          |LED_Red_Pin|LED_Yellow_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	482c      	ldr	r0, [pc, #176]	; (8002c20 <MX_GPIO_Init+0x250>)
 8002b70:	f001 fc0c 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0;
 8002b74:	f240 4301 	movw	r3, #1025	; 0x401
 8002b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <MX_GPIO_Init+0x254>)
 8002b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	4619      	mov	r1, r3
 8002b88:	4829      	ldr	r0, [pc, #164]	; (8002c30 <MX_GPIO_Init+0x260>)
 8002b8a:	f001 fbff 	bl	800438c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002b8e:	2328      	movs	r3, #40	; 0x28
 8002b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002b92:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <MX_GPIO_Init+0x254>)
 8002b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b9a:	f107 031c 	add.w	r3, r7, #28
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	481e      	ldr	r0, [pc, #120]	; (8002c1c <MX_GPIO_Init+0x24c>)
 8002ba2:	f001 fbf3 	bl	800438c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	2100      	movs	r1, #0
 8002baa:	2006      	movs	r0, #6
 8002bac:	f001 f81f 	bl	8003bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002bb0:	2006      	movs	r0, #6
 8002bb2:	f001 f838 	bl	8003c26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2008      	movs	r0, #8
 8002bbc:	f001 f817 	bl	8003bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002bc0:	2008      	movs	r0, #8
 8002bc2:	f001 f830 	bl	8003c26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	2009      	movs	r0, #9
 8002bcc:	f001 f80f 	bl	8003bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002bd0:	2009      	movs	r0, #9
 8002bd2:	f001 f828 	bl	8003c26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	200a      	movs	r0, #10
 8002bdc:	f001 f807 	bl	8003bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002be0:	200a      	movs	r0, #10
 8002be2:	f001 f820 	bl	8003c26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2017      	movs	r0, #23
 8002bec:	f000 ffff 	bl	8003bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002bf0:	2017      	movs	r0, #23
 8002bf2:	f001 f818 	bl	8003c26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	2028      	movs	r0, #40	; 0x28
 8002bfc:	f000 fff7 	bl	8003bee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c00:	2028      	movs	r0, #40	; 0x28
 8002c02:	f001 f810 	bl	8003c26 <HAL_NVIC_EnableIRQ>

}
 8002c06:	bf00      	nop
 8002c08:	3730      	adds	r7, #48	; 0x30
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40020800 	.word	0x40020800
 8002c18:	40020400 	.word	0x40020400
 8002c1c:	40021800 	.word	0x40021800
 8002c20:	40021000 	.word	0x40021000
 8002c24:	10310000 	.word	0x10310000
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40021400 	.word	0x40021400
 8002c30:	40020c00 	.word	0x40020c00

08002c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
	...

08002c44 <motor_1>:
 */

#include "mecanum.h"


void motor_1(uint16_t ina , uint16_t inb){
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	460a      	mov	r2, r1
 8002c4e:	80fb      	strh	r3, [r7, #6]
 8002c50:	4613      	mov	r3, r2
 8002c52:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,ina);
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <motor_1+0x2c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	88fa      	ldrh	r2, [r7, #6]
 8002c5a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,inb);
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <motor_1+0x2c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	88ba      	ldrh	r2, [r7, #4]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	2000027c 	.word	0x2000027c

08002c74 <motor_2>:
void motor_2(uint16_t ina , uint16_t inb){
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	460a      	mov	r2, r1
 8002c7e:	80fb      	strh	r3, [r7, #6]
 8002c80:	4613      	mov	r3, r2
 8002c82:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,inb);
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <motor_2+0x2c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	88ba      	ldrh	r2, [r7, #4]
 8002c8a:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,ina);
 8002c8c:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <motor_2+0x2c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	88fa      	ldrh	r2, [r7, #6]
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	2000027c 	.word	0x2000027c

08002ca4 <motor_3>:
void motor_3(uint16_t ina , uint16_t inb){
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	460a      	mov	r2, r1
 8002cae:	80fb      	strh	r3, [r7, #6]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,ina);
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <motor_3+0x2c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	88fa      	ldrh	r2, [r7, #6]
 8002cba:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,inb);
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <motor_3+0x2c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	88ba      	ldrh	r2, [r7, #4]
 8002cc2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	20000168 	.word	0x20000168

08002cd4 <motor_4>:
void motor_4(uint16_t ina , uint16_t inb){
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	460a      	mov	r2, r1
 8002cde:	80fb      	strh	r3, [r7, #6]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	80bb      	strh	r3, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,inb);
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <motor_4+0x2c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	88ba      	ldrh	r2, [r7, #4]
 8002cea:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,ina);
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <motor_4+0x2c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	88fa      	ldrh	r2, [r7, #6]
 8002cf2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	20000168 	.word	0x20000168

08002d04 <mecanum>:

void mecanum(uint8_t command , uint16_t speed , uint16_t seigyoR , uint16_t seigyoL){
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	4623      	mov	r3, r4
 8002d14:	71fb      	strb	r3, [r7, #7]
 8002d16:	4603      	mov	r3, r0
 8002d18:	80bb      	strh	r3, [r7, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	807b      	strh	r3, [r7, #2]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	803b      	strh	r3, [r7, #0]
	switch(command){
 8002d22:	79fb      	ldrb	r3, [r7, #7]
 8002d24:	2b0a      	cmp	r3, #10
 8002d26:	f200 810c 	bhi.w	8002f42 <mecanum+0x23e>
 8002d2a:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <mecanum+0x2c>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d5d 	.word	0x08002d5d
 8002d34:	08002d7f 	.word	0x08002d7f
 8002d38:	08002dc1 	.word	0x08002dc1
 8002d3c:	08002e03 	.word	0x08002e03
 8002d40:	08002e2d 	.word	0x08002e2d
 8002d44:	08002e57 	.word	0x08002e57
 8002d48:	08002e7d 	.word	0x08002e7d
 8002d4c:	08002ea3 	.word	0x08002ea3
 8002d50:	08002ec9 	.word	0x08002ec9
 8002d54:	08002eef 	.word	0x08002eef
 8002d58:	08002f19 	.word	0x08002f19
	case 0:			//stop
		motor_1(0,0);
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7ff ff70 	bl	8002c44 <motor_1>
		motor_2(0,0);
 8002d64:	2100      	movs	r1, #0
 8002d66:	2000      	movs	r0, #0
 8002d68:	f7ff ff84 	bl	8002c74 <motor_2>
		motor_3(0,0);
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	2000      	movs	r0, #0
 8002d70:	f7ff ff98 	bl	8002ca4 <motor_3>
		motor_4(0,0);
 8002d74:	2100      	movs	r1, #0
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7ff ffac 	bl	8002cd4 <motor_4>

		break;
 8002d7c:	e0f1      	b.n	8002f62 <mecanum+0x25e>

	case 1:			//forward
		motor_1(speed + seigyoL,0);
 8002d7e:	88ba      	ldrh	r2, [r7, #4]
 8002d80:	883b      	ldrh	r3, [r7, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff5b 	bl	8002c44 <motor_1>
		motor_2(speed + seigyoR ,0);
 8002d8e:	88ba      	ldrh	r2, [r7, #4]
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	4413      	add	r3, r2
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2100      	movs	r1, #0
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff ff6b 	bl	8002c74 <motor_2>
		motor_3(speed + seigyoL,0);
 8002d9e:	88ba      	ldrh	r2, [r7, #4]
 8002da0:	883b      	ldrh	r3, [r7, #0]
 8002da2:	4413      	add	r3, r2
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff7b 	bl	8002ca4 <motor_3>
		motor_4(speed + seigyoR ,0);
 8002dae:	88ba      	ldrh	r2, [r7, #4]
 8002db0:	887b      	ldrh	r3, [r7, #2]
 8002db2:	4413      	add	r3, r2
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff8b 	bl	8002cd4 <motor_4>

		break;
 8002dbe:	e0d0      	b.n	8002f62 <mecanum+0x25e>

	case 2:			//back
		motor_1(0,speed + seigyoR);
 8002dc0:	88ba      	ldrh	r2, [r7, #4]
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	4619      	mov	r1, r3
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7ff ff3a 	bl	8002c44 <motor_1>
		motor_2(0,speed + seigyoL);
 8002dd0:	88ba      	ldrh	r2, [r7, #4]
 8002dd2:	883b      	ldrh	r3, [r7, #0]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4619      	mov	r1, r3
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7ff ff4a 	bl	8002c74 <motor_2>
		motor_3(0,speed + seigyoR);
 8002de0:	88ba      	ldrh	r2, [r7, #4]
 8002de2:	887b      	ldrh	r3, [r7, #2]
 8002de4:	4413      	add	r3, r2
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	4619      	mov	r1, r3
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7ff ff5a 	bl	8002ca4 <motor_3>
		motor_4(0,speed + seigyoL);
 8002df0:	88ba      	ldrh	r2, [r7, #4]
 8002df2:	883b      	ldrh	r3, [r7, #0]
 8002df4:	4413      	add	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4619      	mov	r1, r3
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f7ff ff6a 	bl	8002cd4 <motor_4>
		break;
 8002e00:	e0af      	b.n	8002f62 <mecanum+0x25e>

	case 3:			//migi heikou idou
		motor_1(speed,0);
 8002e02:	88bb      	ldrh	r3, [r7, #4]
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff1c 	bl	8002c44 <motor_1>
		motor_2(0,speed);
 8002e0c:	88bb      	ldrh	r3, [r7, #4]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7ff ff2f 	bl	8002c74 <motor_2>
		motor_3(0,speed);
 8002e16:	88bb      	ldrh	r3, [r7, #4]
 8002e18:	4619      	mov	r1, r3
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7ff ff42 	bl	8002ca4 <motor_3>
		motor_4(speed,0);
 8002e20:	88bb      	ldrh	r3, [r7, #4]
 8002e22:	2100      	movs	r1, #0
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff55 	bl	8002cd4 <motor_4>
		break;
 8002e2a:	e09a      	b.n	8002f62 <mecanum+0x25e>

	case 4:			//hidari heikou idou
		motor_1(0,speed);
 8002e2c:	88bb      	ldrh	r3, [r7, #4]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7ff ff07 	bl	8002c44 <motor_1>
		motor_2(speed,0);
 8002e36:	88bb      	ldrh	r3, [r7, #4]
 8002e38:	2100      	movs	r1, #0
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff1a 	bl	8002c74 <motor_2>
		motor_3(speed,0);
 8002e40:	88bb      	ldrh	r3, [r7, #4]
 8002e42:	2100      	movs	r1, #0
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff ff2d 	bl	8002ca4 <motor_3>
		motor_4(0,speed);
 8002e4a:	88bb      	ldrh	r3, [r7, #4]
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	2000      	movs	r0, #0
 8002e50:	f7ff ff40 	bl	8002cd4 <motor_4>
		break;
 8002e54:	e085      	b.n	8002f62 <mecanum+0x25e>

	case 5:			// migi naname mae
		motor_1(speed,0);
 8002e56:	88bb      	ldrh	r3, [r7, #4]
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff fef2 	bl	8002c44 <motor_1>
		motor_2(0,0);
 8002e60:	2100      	movs	r1, #0
 8002e62:	2000      	movs	r0, #0
 8002e64:	f7ff ff06 	bl	8002c74 <motor_2>
		motor_3(0,0);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	f7ff ff1a 	bl	8002ca4 <motor_3>
		motor_4(speed,0);
 8002e70:	88bb      	ldrh	r3, [r7, #4]
 8002e72:	2100      	movs	r1, #0
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff ff2d 	bl	8002cd4 <motor_4>
		break;
 8002e7a:	e072      	b.n	8002f62 <mecanum+0x25e>

	case 6:			// hidari naname mae
		motor_1(0,0);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2000      	movs	r0, #0
 8002e80:	f7ff fee0 	bl	8002c44 <motor_1>
		motor_2(speed,0);
 8002e84:	88bb      	ldrh	r3, [r7, #4]
 8002e86:	2100      	movs	r1, #0
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff fef3 	bl	8002c74 <motor_2>
		motor_3(speed,0);
 8002e8e:	88bb      	ldrh	r3, [r7, #4]
 8002e90:	2100      	movs	r1, #0
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff06 	bl	8002ca4 <motor_3>
		motor_4(0,0);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7ff ff1a 	bl	8002cd4 <motor_4>
		break;
 8002ea0:	e05f      	b.n	8002f62 <mecanum+0x25e>

	case 7:			// migi naname usiro
		motor_1(0,speed);
 8002ea2:	88bb      	ldrh	r3, [r7, #4]
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f7ff fecc 	bl	8002c44 <motor_1>
		motor_2(0,0);
 8002eac:	2100      	movs	r1, #0
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7ff fee0 	bl	8002c74 <motor_2>
		motor_3(0,0);
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7ff fef4 	bl	8002ca4 <motor_3>
		motor_4(0,speed);
 8002ebc:	88bb      	ldrh	r3, [r7, #4]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f7ff ff07 	bl	8002cd4 <motor_4>
		break;
 8002ec6:	e04c      	b.n	8002f62 <mecanum+0x25e>

	case 8:			// hidari naname usiro
		motor_1(0,0);
 8002ec8:	2100      	movs	r1, #0
 8002eca:	2000      	movs	r0, #0
 8002ecc:	f7ff feba 	bl	8002c44 <motor_1>
		motor_2(0,speed);
 8002ed0:	88bb      	ldrh	r3, [r7, #4]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	f7ff fecd 	bl	8002c74 <motor_2>
		motor_3(0,speed);
 8002eda:	88bb      	ldrh	r3, [r7, #4]
 8002edc:	4619      	mov	r1, r3
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7ff fee0 	bl	8002ca4 <motor_3>
		motor_4(0,0);
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	f7ff fef4 	bl	8002cd4 <motor_4>
		break;
 8002eec:	e039      	b.n	8002f62 <mecanum+0x25e>

	case 9:			// migi senkai
		motor_1(speed,0);
 8002eee:	88bb      	ldrh	r3, [r7, #4]
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f7ff fea6 	bl	8002c44 <motor_1>
		motor_2(0,speed);
 8002ef8:	88bb      	ldrh	r3, [r7, #4]
 8002efa:	4619      	mov	r1, r3
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7ff feb9 	bl	8002c74 <motor_2>
		motor_3(speed,0);
 8002f02:	88bb      	ldrh	r3, [r7, #4]
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fecc 	bl	8002ca4 <motor_3>
		motor_4(0,speed);
 8002f0c:	88bb      	ldrh	r3, [r7, #4]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7ff fedf 	bl	8002cd4 <motor_4>
		break;
 8002f16:	e024      	b.n	8002f62 <mecanum+0x25e>

	case 10:		// hidari senkai
		motor_1(0,speed);
 8002f18:	88bb      	ldrh	r3, [r7, #4]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7ff fe91 	bl	8002c44 <motor_1>
		motor_2(speed,0);
 8002f22:	88bb      	ldrh	r3, [r7, #4]
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff fea4 	bl	8002c74 <motor_2>
		motor_3(0,speed);
 8002f2c:	88bb      	ldrh	r3, [r7, #4]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	2000      	movs	r0, #0
 8002f32:	f7ff feb7 	bl	8002ca4 <motor_3>
		motor_4(speed,0);
 8002f36:	88bb      	ldrh	r3, [r7, #4]
 8002f38:	2100      	movs	r1, #0
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7ff feca 	bl	8002cd4 <motor_4>
		break;
 8002f40:	e00f      	b.n	8002f62 <mecanum+0x25e>
	default :
		motor_1(0,0);
 8002f42:	2100      	movs	r1, #0
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7ff fe7d 	bl	8002c44 <motor_1>
		motor_2(0,0);
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7ff fe91 	bl	8002c74 <motor_2>
		motor_3(0,0);
 8002f52:	2100      	movs	r1, #0
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7ff fea5 	bl	8002ca4 <motor_3>
		motor_4(0,0);
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7ff feb9 	bl	8002cd4 <motor_4>
	}
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd90      	pop	{r4, r7, pc}
 8002f6a:	bf00      	nop

08002f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <HAL_MspInit+0x44>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	4a0e      	ldr	r2, [pc, #56]	; (8002fb0 <HAL_MspInit+0x44>)
 8002f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <HAL_MspInit+0x44>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_MspInit+0x44>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a08      	ldr	r2, [pc, #32]	; (8002fb0 <HAL_MspInit+0x44>)
 8002f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_MspInit+0x44>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800

08002fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b08a      	sub	sp, #40	; 0x28
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a17      	ldr	r2, [pc, #92]	; (8003030 <HAL_I2C_MspInit+0x7c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d127      	bne.n	8003026 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fd6:	4b17      	ldr	r3, [pc, #92]	; (8003034 <HAL_I2C_MspInit+0x80>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a16      	ldr	r2, [pc, #88]	; (8003034 <HAL_I2C_MspInit+0x80>)
 8002fdc:	f043 0320 	orr.w	r3, r3, #32
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b14      	ldr	r3, [pc, #80]	; (8003034 <HAL_I2C_MspInit+0x80>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ff2:	2312      	movs	r3, #18
 8002ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ffe:	2304      	movs	r3, #4
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003002:	f107 0314 	add.w	r3, r7, #20
 8003006:	4619      	mov	r1, r3
 8003008:	480b      	ldr	r0, [pc, #44]	; (8003038 <HAL_I2C_MspInit+0x84>)
 800300a:	f001 f9bf 	bl	800438c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800300e:	4b09      	ldr	r3, [pc, #36]	; (8003034 <HAL_I2C_MspInit+0x80>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a08      	ldr	r2, [pc, #32]	; (8003034 <HAL_I2C_MspInit+0x80>)
 8003014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_I2C_MspInit+0x80>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003026:	bf00      	nop
 8003028:	3728      	adds	r7, #40	; 0x28
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40005800 	.word	0x40005800
 8003034:	40023800 	.word	0x40023800
 8003038:	40021400 	.word	0x40021400

0800303c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08c      	sub	sp, #48	; 0x30
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a55      	ldr	r2, [pc, #340]	; (80031a0 <HAL_TIM_Base_MspInit+0x164>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10c      	bne.n	8003068 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800304e:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003054:	f043 0301 	orr.w	r3, r3, #1
 8003058:	6453      	str	r3, [r2, #68]	; 0x44
 800305a:	4b52      	ldr	r3, [pc, #328]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003066:	e096      	b.n	8003196 <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM2)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003070:	d10c      	bne.n	800308c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003072:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	4a4b      	ldr	r2, [pc, #300]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003078:	f043 0301 	orr.w	r3, r3, #1
 800307c:	6413      	str	r3, [r2, #64]	; 0x40
 800307e:	4b49      	ldr	r3, [pc, #292]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
 8003088:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800308a:	e084      	b.n	8003196 <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM3)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a45      	ldr	r2, [pc, #276]	; (80031a8 <HAL_TIM_Base_MspInit+0x16c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10c      	bne.n	80030b0 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003096:	4b43      	ldr	r3, [pc, #268]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4a42      	ldr	r2, [pc, #264]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 800309c:	f043 0302 	orr.w	r3, r3, #2
 80030a0:	6413      	str	r3, [r2, #64]	; 0x40
 80030a2:	4b40      	ldr	r3, [pc, #256]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80030ae:	e072      	b.n	8003196 <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM4)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a3d      	ldr	r2, [pc, #244]	; (80031ac <HAL_TIM_Base_MspInit+0x170>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d10c      	bne.n	80030d4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ba:	4b3a      	ldr	r3, [pc, #232]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	4a39      	ldr	r2, [pc, #228]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6413      	str	r3, [r2, #64]	; 0x40
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	623b      	str	r3, [r7, #32]
 80030d0:	6a3b      	ldr	r3, [r7, #32]
}
 80030d2:	e060      	b.n	8003196 <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM5)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a35      	ldr	r2, [pc, #212]	; (80031b0 <HAL_TIM_Base_MspInit+0x174>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10c      	bne.n	80030f8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030de:	4b31      	ldr	r3, [pc, #196]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	4a30      	ldr	r2, [pc, #192]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 80030e4:	f043 0308 	orr.w	r3, r3, #8
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	61fb      	str	r3, [r7, #28]
 80030f4:	69fb      	ldr	r3, [r7, #28]
}
 80030f6:	e04e      	b.n	8003196 <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM6)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2d      	ldr	r2, [pc, #180]	; (80031b4 <HAL_TIM_Base_MspInit+0x178>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d114      	bne.n	800312c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003102:	4b28      	ldr	r3, [pc, #160]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003108:	f043 0310 	orr.w	r3, r3, #16
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b25      	ldr	r3, [pc, #148]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	2036      	movs	r0, #54	; 0x36
 8003120:	f000 fd65 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003124:	2036      	movs	r0, #54	; 0x36
 8003126:	f000 fd7e 	bl	8003c26 <HAL_NVIC_EnableIRQ>
}
 800312a:	e034      	b.n	8003196 <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM8)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a21      	ldr	r2, [pc, #132]	; (80031b8 <HAL_TIM_Base_MspInit+0x17c>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d10c      	bne.n	8003150 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003136:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800313a:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 800313c:	f043 0302 	orr.w	r3, r3, #2
 8003140:	6453      	str	r3, [r2, #68]	; 0x44
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	697b      	ldr	r3, [r7, #20]
}
 800314e:	e022      	b.n	8003196 <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM9)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a19      	ldr	r2, [pc, #100]	; (80031bc <HAL_TIM_Base_MspInit+0x180>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10c      	bne.n	8003174 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6453      	str	r3, [r2, #68]	; 0x44
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316e:	613b      	str	r3, [r7, #16]
 8003170:	693b      	ldr	r3, [r7, #16]
}
 8003172:	e010      	b.n	8003196 <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM10)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a11      	ldr	r2, [pc, #68]	; (80031c0 <HAL_TIM_Base_MspInit+0x184>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d10b      	bne.n	8003196 <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	4a08      	ldr	r2, [pc, #32]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 8003184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003188:	6453      	str	r3, [r2, #68]	; 0x44
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <HAL_TIM_Base_MspInit+0x168>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
}
 8003196:	bf00      	nop
 8003198:	3730      	adds	r7, #48	; 0x30
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40001000 	.word	0x40001000
 80031b8:	40010400 	.word	0x40010400
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40014400 	.word	0x40014400

080031c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b092      	sub	sp, #72	; 0x48
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031d0:	2200      	movs	r2, #0
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	609a      	str	r2, [r3, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a9f      	ldr	r2, [pc, #636]	; (8003460 <HAL_TIM_MspPostInit+0x29c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d13a      	bne.n	800325c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031e6:	4b9f      	ldr	r3, [pc, #636]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4a9e      	ldr	r2, [pc, #632]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80031ec:	f043 0310 	orr.w	r3, r3, #16
 80031f0:	6313      	str	r3, [r2, #48]	; 0x30
 80031f2:	4b9c      	ldr	r3, [pc, #624]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	633b      	str	r3, [r7, #48]	; 0x30
 80031fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fe:	4b99      	ldr	r3, [pc, #612]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a98      	ldr	r2, [pc, #608]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b96      	ldr	r3, [pc, #600]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE14     ------> TIM1_CH4
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8003216:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003224:	2300      	movs	r3, #0
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003228:	2301      	movs	r3, #1
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800322c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003230:	4619      	mov	r1, r3
 8003232:	488d      	ldr	r0, [pc, #564]	; (8003468 <HAL_TIM_MspPostInit+0x2a4>)
 8003234:	f001 f8aa 	bl	800438c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003238:	f44f 7300 	mov.w	r3, #512	; 0x200
 800323c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323e:	2302      	movs	r3, #2
 8003240:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003242:	2300      	movs	r3, #0
 8003244:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003246:	2300      	movs	r3, #0
 8003248:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800324a:	2301      	movs	r3, #1
 800324c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003252:	4619      	mov	r1, r3
 8003254:	4885      	ldr	r0, [pc, #532]	; (800346c <HAL_TIM_MspPostInit+0x2a8>)
 8003256:	f001 f899 	bl	800438c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800325a:	e139      	b.n	80034d0 <HAL_TIM_MspPostInit+0x30c>
  else if(htim->Instance==TIM2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d139      	bne.n	80032da <HAL_TIM_MspPostInit+0x116>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003266:	4b7f      	ldr	r3, [pc, #508]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326a:	4a7e      	ldr	r2, [pc, #504]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6313      	str	r3, [r2, #48]	; 0x30
 8003272:	4b7c      	ldr	r3, [pc, #496]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	62bb      	str	r3, [r7, #40]	; 0x28
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800327e:	4b79      	ldr	r3, [pc, #484]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a78      	ldr	r2, [pc, #480]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003284:	f043 0302 	orr.w	r3, r3, #2
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b76      	ldr	r3, [pc, #472]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003296:	2320      	movs	r3, #32
 8003298:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032a6:	2301      	movs	r3, #1
 80032a8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032ae:	4619      	mov	r1, r3
 80032b0:	486e      	ldr	r0, [pc, #440]	; (800346c <HAL_TIM_MspPostInit+0x2a8>)
 80032b2:	f001 f86b 	bl	800438c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_3;
 80032b6:	f640 4308 	movw	r3, #3080	; 0xc08
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032bc:	2302      	movs	r3, #2
 80032be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2300      	movs	r3, #0
 80032c6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032c8:	2301      	movs	r3, #1
 80032ca:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032d0:	4619      	mov	r1, r3
 80032d2:	4867      	ldr	r0, [pc, #412]	; (8003470 <HAL_TIM_MspPostInit+0x2ac>)
 80032d4:	f001 f85a 	bl	800438c <HAL_GPIO_Init>
}
 80032d8:	e0fa      	b.n	80034d0 <HAL_TIM_MspPostInit+0x30c>
  else if(htim->Instance==TIM3)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a65      	ldr	r2, [pc, #404]	; (8003474 <HAL_TIM_MspPostInit+0x2b0>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d155      	bne.n	8003390 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e4:	4b5f      	ldr	r3, [pc, #380]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	4a5e      	ldr	r2, [pc, #376]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6313      	str	r3, [r2, #48]	; 0x30
 80032f0:	4b5c      	ldr	r3, [pc, #368]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80032f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	623b      	str	r3, [r7, #32]
 80032fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fc:	4b59      	ldr	r3, [pc, #356]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a58      	ldr	r2, [pc, #352]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b56      	ldr	r3, [pc, #344]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003314:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4a52      	ldr	r2, [pc, #328]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 800331a:	f043 0304 	orr.w	r3, r3, #4
 800331e:	6313      	str	r3, [r2, #48]	; 0x30
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800332c:	2340      	movs	r3, #64	; 0x40
 800332e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003330:	2302      	movs	r3, #2
 8003332:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003334:	2300      	movs	r3, #0
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003338:	2300      	movs	r3, #0
 800333a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800333c:	2302      	movs	r3, #2
 800333e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003340:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003344:	4619      	mov	r1, r3
 8003346:	4849      	ldr	r0, [pc, #292]	; (800346c <HAL_TIM_MspPostInit+0x2a8>)
 8003348:	f001 f820 	bl	800438c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800334c:	2322      	movs	r3, #34	; 0x22
 800334e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003358:	2300      	movs	r3, #0
 800335a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800335c:	2302      	movs	r3, #2
 800335e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003360:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003364:	4619      	mov	r1, r3
 8003366:	4842      	ldr	r0, [pc, #264]	; (8003470 <HAL_TIM_MspPostInit+0x2ac>)
 8003368:	f001 f810 	bl	800438c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800336c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800337e:	2302      	movs	r3, #2
 8003380:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003382:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003386:	4619      	mov	r1, r3
 8003388:	483b      	ldr	r0, [pc, #236]	; (8003478 <HAL_TIM_MspPostInit+0x2b4>)
 800338a:	f000 ffff 	bl	800438c <HAL_GPIO_Init>
}
 800338e:	e09f      	b.n	80034d0 <HAL_TIM_MspPostInit+0x30c>
  else if(htim->Instance==TIM4)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a39      	ldr	r2, [pc, #228]	; (800347c <HAL_TIM_MspPostInit+0x2b8>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d11d      	bne.n	80033d6 <HAL_TIM_MspPostInit+0x212>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800339a:	4b32      	ldr	r3, [pc, #200]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a31      	ldr	r2, [pc, #196]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80033a0:	f043 0308 	orr.w	r3, r3, #8
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b2f      	ldr	r3, [pc, #188]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f003 0308 	and.w	r3, r3, #8
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80033b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033b8:	2302      	movs	r3, #2
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033bc:	2300      	movs	r3, #0
 80033be:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	2300      	movs	r3, #0
 80033c2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033c4:	2302      	movs	r3, #2
 80033c6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033cc:	4619      	mov	r1, r3
 80033ce:	482c      	ldr	r0, [pc, #176]	; (8003480 <HAL_TIM_MspPostInit+0x2bc>)
 80033d0:	f000 ffdc 	bl	800438c <HAL_GPIO_Init>
}
 80033d4:	e07c      	b.n	80034d0 <HAL_TIM_MspPostInit+0x30c>
  else if(htim->Instance==TIM5)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a2a      	ldr	r2, [pc, #168]	; (8003484 <HAL_TIM_MspPostInit+0x2c0>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d11c      	bne.n	800341a <HAL_TIM_MspPostInit+0x256>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e0:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4a1f      	ldr	r2, [pc, #124]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	6313      	str	r3, [r2, #48]	; 0x30
 80033ec:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80033f8:	230f      	movs	r3, #15
 80033fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	2300      	movs	r3, #0
 8003406:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003408:	2302      	movs	r3, #2
 800340a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003410:	4619      	mov	r1, r3
 8003412:	4816      	ldr	r0, [pc, #88]	; (800346c <HAL_TIM_MspPostInit+0x2a8>)
 8003414:	f000 ffba 	bl	800438c <HAL_GPIO_Init>
}
 8003418:	e05a      	b.n	80034d0 <HAL_TIM_MspPostInit+0x30c>
  else if(htim->Instance==TIM8)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a1a      	ldr	r2, [pc, #104]	; (8003488 <HAL_TIM_MspPostInit+0x2c4>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d133      	bne.n	800348c <HAL_TIM_MspPostInit+0x2c8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003424:	4b0f      	ldr	r3, [pc, #60]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6313      	str	r3, [r2, #48]	; 0x30
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <HAL_TIM_MspPostInit+0x2a0>)
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800343c:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8003440:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800344e:	2303      	movs	r3, #3
 8003450:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003452:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003456:	4619      	mov	r1, r3
 8003458:	4807      	ldr	r0, [pc, #28]	; (8003478 <HAL_TIM_MspPostInit+0x2b4>)
 800345a:	f000 ff97 	bl	800438c <HAL_GPIO_Init>
}
 800345e:	e037      	b.n	80034d0 <HAL_TIM_MspPostInit+0x30c>
 8003460:	40010000 	.word	0x40010000
 8003464:	40023800 	.word	0x40023800
 8003468:	40021000 	.word	0x40021000
 800346c:	40020000 	.word	0x40020000
 8003470:	40020400 	.word	0x40020400
 8003474:	40000400 	.word	0x40000400
 8003478:	40020800 	.word	0x40020800
 800347c:	40000800 	.word	0x40000800
 8003480:	40020c00 	.word	0x40020c00
 8003484:	40000c00 	.word	0x40000c00
 8003488:	40010400 	.word	0x40010400
  else if(htim->Instance==TIM10)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a11      	ldr	r2, [pc, #68]	; (80034d8 <HAL_TIM_MspPostInit+0x314>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d11c      	bne.n	80034d0 <HAL_TIM_MspPostInit+0x30c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003496:	4b11      	ldr	r3, [pc, #68]	; (80034dc <HAL_TIM_MspPostInit+0x318>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349a:	4a10      	ldr	r2, [pc, #64]	; (80034dc <HAL_TIM_MspPostInit+0x318>)
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	6313      	str	r3, [r2, #48]	; 0x30
 80034a2:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HAL_TIM_MspPostInit+0x318>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80034ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b4:	2302      	movs	r3, #2
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034bc:	2300      	movs	r3, #0
 80034be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80034c0:	2303      	movs	r3, #3
 80034c2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80034c8:	4619      	mov	r1, r3
 80034ca:	4805      	ldr	r0, [pc, #20]	; (80034e0 <HAL_TIM_MspPostInit+0x31c>)
 80034cc:	f000 ff5e 	bl	800438c <HAL_GPIO_Init>
}
 80034d0:	bf00      	nop
 80034d2:	3748      	adds	r7, #72	; 0x48
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	40014400 	.word	0x40014400
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40020400 	.word	0x40020400

080034e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	; 0x30
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ec:	f107 031c 	add.w	r3, r7, #28
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
 80034f8:	60da      	str	r2, [r3, #12]
 80034fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a66      	ldr	r2, [pc, #408]	; (800369c <HAL_UART_MspInit+0x1b8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d161      	bne.n	80035ca <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003506:	4b66      	ldr	r3, [pc, #408]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4a65      	ldr	r2, [pc, #404]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 800350c:	f043 0310 	orr.w	r3, r3, #16
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	4b63      	ldr	r3, [pc, #396]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f003 0310 	and.w	r3, r3, #16
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800351e:	4b60      	ldr	r3, [pc, #384]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4a5f      	ldr	r2, [pc, #380]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4b5d      	ldr	r3, [pc, #372]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003536:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800353a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353c:	2302      	movs	r3, #2
 800353e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003544:	2303      	movs	r3, #3
 8003546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003548:	2304      	movs	r3, #4
 800354a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	4619      	mov	r1, r3
 8003552:	4854      	ldr	r0, [pc, #336]	; (80036a4 <HAL_UART_MspInit+0x1c0>)
 8003554:	f000 ff1a 	bl	800438c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003558:	4b53      	ldr	r3, [pc, #332]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 800355a:	4a54      	ldr	r2, [pc, #336]	; (80036ac <HAL_UART_MspInit+0x1c8>)
 800355c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800355e:	4b52      	ldr	r3, [pc, #328]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 8003560:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003564:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003566:	4b50      	ldr	r3, [pc, #320]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 8003568:	2200      	movs	r2, #0
 800356a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800356c:	4b4e      	ldr	r3, [pc, #312]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 800356e:	2200      	movs	r2, #0
 8003570:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003572:	4b4d      	ldr	r3, [pc, #308]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 8003574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003578:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800357a:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 800357c:	2200      	movs	r2, #0
 800357e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003580:	4b49      	ldr	r3, [pc, #292]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 8003582:	2200      	movs	r2, #0
 8003584:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003586:	4b48      	ldr	r3, [pc, #288]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 8003588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800358c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 8003590:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003594:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003596:	4b44      	ldr	r3, [pc, #272]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 8003598:	2200      	movs	r2, #0
 800359a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800359c:	4842      	ldr	r0, [pc, #264]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 800359e:	f000 fb5d 	bl	8003c5c <HAL_DMA_Init>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80035a8:	f7ff fb44 	bl	8002c34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a3e      	ldr	r2, [pc, #248]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 80035b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80035b2:	4a3d      	ldr	r2, [pc, #244]	; (80036a8 <HAL_UART_MspInit+0x1c4>)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2100      	movs	r1, #0
 80035bc:	2025      	movs	r0, #37	; 0x25
 80035be:	f000 fb16 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035c2:	2025      	movs	r0, #37	; 0x25
 80035c4:	f000 fb2f 	bl	8003c26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80035c8:	e064      	b.n	8003694 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART2)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a38      	ldr	r2, [pc, #224]	; (80036b0 <HAL_UART_MspInit+0x1cc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d15f      	bne.n	8003694 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035d4:	4b32      	ldr	r3, [pc, #200]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 80035d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d8:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 80035da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035de:	6413      	str	r3, [r2, #64]	; 0x40
 80035e0:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ec:	4b2c      	ldr	r3, [pc, #176]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	4a2b      	ldr	r2, [pc, #172]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 80035f2:	f043 0308 	orr.w	r3, r3, #8
 80035f6:	6313      	str	r3, [r2, #48]	; 0x30
 80035f8:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <HAL_UART_MspInit+0x1bc>)
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003604:	2360      	movs	r3, #96	; 0x60
 8003606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003608:	2302      	movs	r3, #2
 800360a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003610:	2303      	movs	r3, #3
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003614:	2307      	movs	r3, #7
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	4619      	mov	r1, r3
 800361e:	4825      	ldr	r0, [pc, #148]	; (80036b4 <HAL_UART_MspInit+0x1d0>)
 8003620:	f000 feb4 	bl	800438c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003624:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 8003626:	4a25      	ldr	r2, [pc, #148]	; (80036bc <HAL_UART_MspInit+0x1d8>)
 8003628:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800362a:	4b23      	ldr	r3, [pc, #140]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 800362c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003630:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003632:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003638:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800363e:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 8003640:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003644:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003646:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 8003648:	2200      	movs	r2, #0
 800364a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 800364e:	2200      	movs	r2, #0
 8003650:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 8003654:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003658:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800365a:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 800365c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003660:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003662:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 8003664:	2200      	movs	r2, #0
 8003666:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003668:	4813      	ldr	r0, [pc, #76]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 800366a:	f000 faf7 	bl	8003c5c <HAL_DMA_Init>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8003674:	f7ff fade 	bl	8002c34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a0f      	ldr	r2, [pc, #60]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 800367c:	66da      	str	r2, [r3, #108]	; 0x6c
 800367e:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <HAL_UART_MspInit+0x1d4>)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003684:	2200      	movs	r2, #0
 8003686:	2100      	movs	r1, #0
 8003688:	2026      	movs	r0, #38	; 0x26
 800368a:	f000 fab0 	bl	8003bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800368e:	2026      	movs	r0, #38	; 0x26
 8003690:	f000 fac9 	bl	8003c26 <HAL_NVIC_EnableIRQ>
}
 8003694:	bf00      	nop
 8003696:	3730      	adds	r7, #48	; 0x30
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40011000 	.word	0x40011000
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40020400 	.word	0x40020400
 80036a8:	200002c4 	.word	0x200002c4
 80036ac:	40026440 	.word	0x40026440
 80036b0:	40004400 	.word	0x40004400
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	200000c4 	.word	0x200000c4
 80036bc:	40026088 	.word	0x40026088

080036c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80036c4:	bf00      	nop
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr

080036ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036ce:	b480      	push	{r7}
 80036d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036d2:	e7fe      	b.n	80036d2 <HardFault_Handler+0x4>

080036d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036d8:	e7fe      	b.n	80036d8 <MemManage_Handler+0x4>

080036da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036da:	b480      	push	{r7}
 80036dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036de:	e7fe      	b.n	80036de <BusFault_Handler+0x4>

080036e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036e4:	e7fe      	b.n	80036e4 <UsageFault_Handler+0x4>

080036e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80036e6:	b480      	push	{r7}
 80036e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003714:	f000 f94e 	bl	80039b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003718:	bf00      	nop
 800371a:	bd80      	pop	{r7, pc}

0800371c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003720:	2001      	movs	r0, #1
 8003722:	f001 f829 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}

0800372a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800372e:	2004      	movs	r0, #4
 8003730:	f001 f822 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003734:	bf00      	nop
 8003736:	bd80      	pop	{r7, pc}

08003738 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800373c:	2008      	movs	r0, #8
 800373e:	f001 f81b 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}

08003746 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800374a:	2010      	movs	r0, #16
 800374c:	f001 f814 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}

08003754 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003758:	4802      	ldr	r0, [pc, #8]	; (8003764 <DMA1_Stream5_IRQHandler+0x10>)
 800375a:	f000 fbaf 	bl	8003ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	200000c4 	.word	0x200000c4

08003768 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800376c:	2020      	movs	r0, #32
 800376e:	f001 f803 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800377c:	4802      	ldr	r0, [pc, #8]	; (8003788 <USART1_IRQHandler+0x10>)
 800377e:	f003 ff43 	bl	8007608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003782:	bf00      	nop
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000324 	.word	0x20000324

0800378c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <USART2_IRQHandler+0x10>)
 8003792:	f003 ff39 	bl	8007608 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200004bc 	.word	0x200004bc

080037a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80037a4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80037a8:	f000 ffe6 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80037ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80037b0:	f000 ffe2 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80037b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80037b8:	f000 ffde 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80037bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80037c0:	f000 ffda 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80037c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80037c8:	f000 ffd6 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80037cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80037d0:	f000 ffd2 	bl	8004778 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037dc:	4808      	ldr	r0, [pc, #32]	; (8003800 <TIM6_DAC_IRQHandler+0x28>)
 80037de:	f002 fe67 	bl	80064b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  HAL_UART_Receive_DMA(&huart2,(uint8_t *)rxbuf ,1);
 80037e2:	2201      	movs	r2, #1
 80037e4:	4907      	ldr	r1, [pc, #28]	; (8003804 <TIM6_DAC_IRQHandler+0x2c>)
 80037e6:	4808      	ldr	r0, [pc, #32]	; (8003808 <TIM6_DAC_IRQHandler+0x30>)
 80037e8:	f003 fe8a 	bl	8007500 <HAL_UART_Receive_DMA>
  rxbuf[0] = 'k';
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <TIM6_DAC_IRQHandler+0x2c>)
 80037ee:	226b      	movs	r2, #107	; 0x6b
 80037f0:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_0);
 80037f2:	2101      	movs	r1, #1
 80037f4:	4805      	ldr	r0, [pc, #20]	; (800380c <TIM6_DAC_IRQHandler+0x34>)
 80037f6:	f000 ffa4 	bl	8004742 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200003b4 	.word	0x200003b4
 8003804:	200000c0 	.word	0x200000c0
 8003808:	200004bc 	.word	0x200004bc
 800380c:	40020400 	.word	0x40020400

08003810 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003814:	4802      	ldr	r0, [pc, #8]	; (8003820 <DMA2_Stream2_IRQHandler+0x10>)
 8003816:	f000 fb51 	bl	8003ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200002c4 	.word	0x200002c4

08003824 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <_sbrk+0x50>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d102      	bne.n	800383a <_sbrk+0x16>
		heap_end = &end;
 8003834:	4b0f      	ldr	r3, [pc, #60]	; (8003874 <_sbrk+0x50>)
 8003836:	4a10      	ldr	r2, [pc, #64]	; (8003878 <_sbrk+0x54>)
 8003838:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800383a:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <_sbrk+0x50>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003840:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <_sbrk+0x50>)
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4413      	add	r3, r2
 8003848:	466a      	mov	r2, sp
 800384a:	4293      	cmp	r3, r2
 800384c:	d907      	bls.n	800385e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800384e:	f004 fcbd 	bl	80081cc <__errno>
 8003852:	4602      	mov	r2, r0
 8003854:	230c      	movs	r3, #12
 8003856:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003858:	f04f 33ff 	mov.w	r3, #4294967295
 800385c:	e006      	b.n	800386c <_sbrk+0x48>
	}

	heap_end += incr;
 800385e:	4b05      	ldr	r3, [pc, #20]	; (8003874 <_sbrk+0x50>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	4a03      	ldr	r2, [pc, #12]	; (8003874 <_sbrk+0x50>)
 8003868:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800386a:	68fb      	ldr	r3, [r7, #12]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	200000ac 	.word	0x200000ac
 8003878:	20000558 	.word	0x20000558

0800387c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003880:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <SystemInit+0x5c>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003886:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <SystemInit+0x5c>)
 8003888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800388c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <SystemInit+0x60>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a11      	ldr	r2, [pc, #68]	; (80038dc <SystemInit+0x60>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <SystemInit+0x60>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038a2:	4b0e      	ldr	r3, [pc, #56]	; (80038dc <SystemInit+0x60>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	490d      	ldr	r1, [pc, #52]	; (80038dc <SystemInit+0x60>)
 80038a8:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <SystemInit+0x64>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80038ae:	4b0b      	ldr	r3, [pc, #44]	; (80038dc <SystemInit+0x60>)
 80038b0:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <SystemInit+0x68>)
 80038b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038b4:	4b09      	ldr	r3, [pc, #36]	; (80038dc <SystemInit+0x60>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a08      	ldr	r2, [pc, #32]	; (80038dc <SystemInit+0x60>)
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <SystemInit+0x60>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038c6:	4b04      	ldr	r3, [pc, #16]	; (80038d8 <SystemInit+0x5c>)
 80038c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038cc:	609a      	str	r2, [r3, #8]
#endif
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000ed00 	.word	0xe000ed00
 80038dc:	40023800 	.word	0x40023800
 80038e0:	fef6ffff 	.word	0xfef6ffff
 80038e4:	24003010 	.word	0x24003010

080038e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80038e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003920 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80038ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80038ee:	e003      	b.n	80038f8 <LoopCopyDataInit>

080038f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80038f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80038f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80038f6:	3104      	adds	r1, #4

080038f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80038f8:	480b      	ldr	r0, [pc, #44]	; (8003928 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80038fa:	4b0c      	ldr	r3, [pc, #48]	; (800392c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80038fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80038fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003900:	d3f6      	bcc.n	80038f0 <CopyDataInit>
  ldr  r2, =_sbss
 8003902:	4a0b      	ldr	r2, [pc, #44]	; (8003930 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003904:	e002      	b.n	800390c <LoopFillZerobss>

08003906 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003906:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003908:	f842 3b04 	str.w	r3, [r2], #4

0800390c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800390e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003910:	d3f9      	bcc.n	8003906 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003912:	f7ff ffb3 	bl	800387c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003916:	f004 fc5f 	bl	80081d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800391a:	f7fd fa9b 	bl	8000e54 <main>
  bx  lr    
 800391e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003920:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003924:	08008b4c 	.word	0x08008b4c
  ldr  r0, =_sdata
 8003928:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800392c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8003930:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8003934:	20000554 	.word	0x20000554

08003938 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003938:	e7fe      	b.n	8003938 <ADC_IRQHandler>

0800393a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800393a:	b580      	push	{r7, lr}
 800393c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800393e:	2003      	movs	r0, #3
 8003940:	f000 f94a 	bl	8003bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003944:	2000      	movs	r0, #0
 8003946:	f000 f805 	bl	8003954 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800394a:	f7ff fb0f 	bl	8002f6c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800395c:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <HAL_InitTick+0x54>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b12      	ldr	r3, [pc, #72]	; (80039ac <HAL_InitTick+0x58>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800396a:	fbb3 f3f1 	udiv	r3, r3, r1
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	4618      	mov	r0, r3
 8003974:	f000 f965 	bl	8003c42 <HAL_SYSTICK_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d001      	beq.n	8003982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e00e      	b.n	80039a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b0f      	cmp	r3, #15
 8003986:	d80a      	bhi.n	800399e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003988:	2200      	movs	r2, #0
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	f000 f92d 	bl	8003bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003994:	4a06      	ldr	r2, [pc, #24]	; (80039b0 <HAL_InitTick+0x5c>)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	e000      	b.n	80039a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000010 	.word	0x20000010
 80039ac:	20000018 	.word	0x20000018
 80039b0:	20000014 	.word	0x20000014

080039b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_IncTick+0x20>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	461a      	mov	r2, r3
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_IncTick+0x24>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4413      	add	r3, r2
 80039c4:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <HAL_IncTick+0x24>)
 80039c6:	6013      	str	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	20000018 	.word	0x20000018
 80039d8:	2000054c 	.word	0x2000054c

080039dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return uwTick;
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_GetTick+0x14>)
 80039e2:	681b      	ldr	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	2000054c 	.word	0x2000054c

080039f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff ffee 	bl	80039dc <HAL_GetTick>
 8003a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0c:	d005      	beq.n	8003a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_Delay+0x40>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	461a      	mov	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4413      	add	r3, r2
 8003a18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a1a:	bf00      	nop
 8003a1c:	f7ff ffde 	bl	80039dc <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d8f7      	bhi.n	8003a1c <HAL_Delay+0x28>
  {
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20000018 	.word	0x20000018

08003a38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a48:	4b0b      	ldr	r3, [pc, #44]	; (8003a78 <__NVIC_SetPriorityGrouping+0x40>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a54:	4013      	ands	r3, r2
 8003a56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a60:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <__NVIC_SetPriorityGrouping+0x44>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a66:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <__NVIC_SetPriorityGrouping+0x40>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	60d3      	str	r3, [r2, #12]
}
 8003a6c:	bf00      	nop
 8003a6e:	3714      	adds	r7, #20
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000ed00 	.word	0xe000ed00
 8003a7c:	05fa0000 	.word	0x05fa0000

08003a80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a84:	4b04      	ldr	r3, [pc, #16]	; (8003a98 <__NVIC_GetPriorityGrouping+0x18>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	0a1b      	lsrs	r3, r3, #8
 8003a8a:	f003 0307 	and.w	r3, r3, #7
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	e000ed00 	.word	0xe000ed00

08003a9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	db0b      	blt.n	8003ac6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	f003 021f 	and.w	r2, r3, #31
 8003ab4:	4907      	ldr	r1, [pc, #28]	; (8003ad4 <__NVIC_EnableIRQ+0x38>)
 8003ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	2001      	movs	r0, #1
 8003abe:	fa00 f202 	lsl.w	r2, r0, r2
 8003ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	e000e100 	.word	0xe000e100

08003ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	6039      	str	r1, [r7, #0]
 8003ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	db0a      	blt.n	8003b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	490c      	ldr	r1, [pc, #48]	; (8003b24 <__NVIC_SetPriority+0x4c>)
 8003af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af6:	0112      	lsls	r2, r2, #4
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	440b      	add	r3, r1
 8003afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b00:	e00a      	b.n	8003b18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	4908      	ldr	r1, [pc, #32]	; (8003b28 <__NVIC_SetPriority+0x50>)
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	3b04      	subs	r3, #4
 8003b10:	0112      	lsls	r2, r2, #4
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	440b      	add	r3, r1
 8003b16:	761a      	strb	r2, [r3, #24]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000e100 	.word	0xe000e100
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	f1c3 0307 	rsb	r3, r3, #7
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	bf28      	it	cs
 8003b4a:	2304      	movcs	r3, #4
 8003b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	3304      	adds	r3, #4
 8003b52:	2b06      	cmp	r3, #6
 8003b54:	d902      	bls.n	8003b5c <NVIC_EncodePriority+0x30>
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3b03      	subs	r3, #3
 8003b5a:	e000      	b.n	8003b5e <NVIC_EncodePriority+0x32>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b60:	f04f 32ff 	mov.w	r2, #4294967295
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	43da      	mvns	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	401a      	ands	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b74:	f04f 31ff 	mov.w	r1, #4294967295
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b7e:	43d9      	mvns	r1, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b84:	4313      	orrs	r3, r2
         );
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3724      	adds	r7, #36	; 0x24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
	...

08003b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ba4:	d301      	bcc.n	8003baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e00f      	b.n	8003bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003baa:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <SysTick_Config+0x40>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bb2:	210f      	movs	r1, #15
 8003bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb8:	f7ff ff8e 	bl	8003ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bbc:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <SysTick_Config+0x40>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bc2:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <SysTick_Config+0x40>)
 8003bc4:	2207      	movs	r2, #7
 8003bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	e000e010 	.word	0xe000e010

08003bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ff29 	bl	8003a38 <__NVIC_SetPriorityGrouping>
}
 8003be6:	bf00      	nop
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b086      	sub	sp, #24
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	607a      	str	r2, [r7, #4]
 8003bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c00:	f7ff ff3e 	bl	8003a80 <__NVIC_GetPriorityGrouping>
 8003c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	6978      	ldr	r0, [r7, #20]
 8003c0c:	f7ff ff8e 	bl	8003b2c <NVIC_EncodePriority>
 8003c10:	4602      	mov	r2, r0
 8003c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c16:	4611      	mov	r1, r2
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7ff ff5d 	bl	8003ad8 <__NVIC_SetPriority>
}
 8003c1e:	bf00      	nop
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c26:	b580      	push	{r7, lr}
 8003c28:	b082      	sub	sp, #8
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff ff31 	bl	8003a9c <__NVIC_EnableIRQ>
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff ffa2 	bl	8003b94 <SysTick_Config>
 8003c50:	4603      	mov	r3, r0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c68:	f7ff feb8 	bl	80039dc <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e099      	b.n	8003dac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2202      	movs	r2, #2
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0201 	bic.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c98:	e00f      	b.n	8003cba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c9a:	f7ff fe9f 	bl	80039dc <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b05      	cmp	r3, #5
 8003ca6:	d908      	bls.n	8003cba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2203      	movs	r2, #3
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e078      	b.n	8003dac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e8      	bne.n	8003c9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4b38      	ldr	r3, [pc, #224]	; (8003db4 <HAL_DMA_Init+0x158>)
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685a      	ldr	r2, [r3, #4]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a1b      	ldr	r3, [r3, #32]
 8003d04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d107      	bne.n	8003d24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f023 0307 	bic.w	r3, r3, #7
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d117      	bne.n	8003d7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 fa99 	bl	8004298 <DMA_CheckFifoParam>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2240      	movs	r2, #64	; 0x40
 8003d70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e016      	b.n	8003dac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f000 fa50 	bl	800422c <DMA_CalcBaseAndBitshift>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	223f      	movs	r2, #63	; 0x3f
 8003d96:	409a      	lsls	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	e010803f 	.word	0xe010803f

08003db8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	607a      	str	r2, [r7, #4]
 8003dc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d101      	bne.n	8003dde <HAL_DMA_Start_IT+0x26>
 8003dda:	2302      	movs	r3, #2
 8003ddc:	e048      	b.n	8003e70 <HAL_DMA_Start_IT+0xb8>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d137      	bne.n	8003e62 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68b9      	ldr	r1, [r7, #8]
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f000 f9e2 	bl	80041d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	223f      	movs	r2, #63	; 0x3f
 8003e12:	409a      	lsls	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0216 	orr.w	r2, r2, #22
 8003e26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e36:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d007      	beq.n	8003e50 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0208 	orr.w	r2, r2, #8
 8003e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0201 	orr.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e005      	b.n	8003e6e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3718      	adds	r7, #24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d004      	beq.n	8003e96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e00c      	b.n	8003eb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2205      	movs	r2, #5
 8003e9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003ec8:	4b92      	ldr	r3, [pc, #584]	; (8004114 <HAL_DMA_IRQHandler+0x258>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a92      	ldr	r2, [pc, #584]	; (8004118 <HAL_DMA_IRQHandler+0x25c>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	0a9b      	lsrs	r3, r3, #10
 8003ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01a      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d013      	beq.n	8003f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0204 	bic.w	r2, r2, #4
 8003f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f14:	2208      	movs	r2, #8
 8003f16:	409a      	lsls	r2, r3
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f20:	f043 0201 	orr.w	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	409a      	lsls	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4013      	ands	r3, r2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d012      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	f043 0202 	orr.w	r2, r3, #2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f62:	2204      	movs	r2, #4
 8003f64:	409a      	lsls	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d012      	beq.n	8003f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00b      	beq.n	8003f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	2204      	movs	r2, #4
 8003f82:	409a      	lsls	r2, r3
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	f043 0204 	orr.w	r2, r3, #4
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f98:	2210      	movs	r2, #16
 8003f9a:	409a      	lsls	r2, r3
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d043      	beq.n	800402c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d03c      	beq.n	800402c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	409a      	lsls	r2, r3
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d018      	beq.n	8003ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d108      	bne.n	8003fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d024      	beq.n	800402c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	4798      	blx	r3
 8003fea:	e01f      	b.n	800402c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01b      	beq.n	800402c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	4798      	blx	r3
 8003ffc:	e016      	b.n	800402c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0208 	bic.w	r2, r2, #8
 800401a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	2220      	movs	r2, #32
 8004032:	409a      	lsls	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4013      	ands	r3, r2
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 808e 	beq.w	800415a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8086 	beq.w	800415a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	2220      	movs	r2, #32
 8004054:	409a      	lsls	r2, r3
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004060:	b2db      	uxtb	r3, r3
 8004062:	2b05      	cmp	r3, #5
 8004064:	d136      	bne.n	80040d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f022 0216 	bic.w	r2, r2, #22
 8004074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d103      	bne.n	8004096 <HAL_DMA_IRQHandler+0x1da>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0208 	bic.w	r2, r2, #8
 80040a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040aa:	223f      	movs	r2, #63	; 0x3f
 80040ac:	409a      	lsls	r2, r3
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d07d      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
        }
        return;
 80040d2:	e078      	b.n	80041c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01c      	beq.n	800411c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d108      	bne.n	8004102 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d030      	beq.n	800415a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4798      	blx	r3
 8004100:	e02b      	b.n	800415a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d027      	beq.n	800415a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	4798      	blx	r3
 8004112:	e022      	b.n	800415a <HAL_DMA_IRQHandler+0x29e>
 8004114:	20000010 	.word	0x20000010
 8004118:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 0210 	bic.w	r2, r2, #16
 8004138:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415e:	2b00      	cmp	r3, #0
 8004160:	d032      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	d022      	beq.n	80041b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2205      	movs	r2, #5
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	3301      	adds	r3, #1
 800418a:	60bb      	str	r3, [r7, #8]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	429a      	cmp	r2, r3
 8004190:	d307      	bcc.n	80041a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f2      	bne.n	8004186 <HAL_DMA_IRQHandler+0x2ca>
 80041a0:	e000      	b.n	80041a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80041a2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
 80041c4:	e000      	b.n	80041c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80041c6:	bf00      	nop
    }
  }
}
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop

080041d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
 80041dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d108      	bne.n	8004210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800420e:	e007      	b.n	8004220 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	60da      	str	r2, [r3, #12]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	b2db      	uxtb	r3, r3
 800423a:	3b10      	subs	r3, #16
 800423c:	4a13      	ldr	r2, [pc, #76]	; (800428c <DMA_CalcBaseAndBitshift+0x60>)
 800423e:	fba2 2303 	umull	r2, r3, r2, r3
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004246:	4a12      	ldr	r2, [pc, #72]	; (8004290 <DMA_CalcBaseAndBitshift+0x64>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b03      	cmp	r3, #3
 8004258:	d908      	bls.n	800426c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <DMA_CalcBaseAndBitshift+0x68>)
 8004262:	4013      	ands	r3, r2
 8004264:	1d1a      	adds	r2, r3, #4
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	659a      	str	r2, [r3, #88]	; 0x58
 800426a:	e006      	b.n	800427a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	4b08      	ldr	r3, [pc, #32]	; (8004294 <DMA_CalcBaseAndBitshift+0x68>)
 8004274:	4013      	ands	r3, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	aaaaaaab 	.word	0xaaaaaaab
 8004290:	08008b00 	.word	0x08008b00
 8004294:	fffffc00 	.word	0xfffffc00

08004298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042a0:	2300      	movs	r3, #0
 80042a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11f      	bne.n	80042f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d855      	bhi.n	8004364 <DMA_CheckFifoParam+0xcc>
 80042b8:	a201      	add	r2, pc, #4	; (adr r2, 80042c0 <DMA_CheckFifoParam+0x28>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042d1 	.word	0x080042d1
 80042c4:	080042e3 	.word	0x080042e3
 80042c8:	080042d1 	.word	0x080042d1
 80042cc:	08004365 	.word	0x08004365
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d045      	beq.n	8004368 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e0:	e042      	b.n	8004368 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042ea:	d13f      	bne.n	800436c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042f0:	e03c      	b.n	800436c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042fa:	d121      	bne.n	8004340 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d836      	bhi.n	8004370 <DMA_CheckFifoParam+0xd8>
 8004302:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <DMA_CheckFifoParam+0x70>)
 8004304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004308:	08004319 	.word	0x08004319
 800430c:	0800431f 	.word	0x0800431f
 8004310:	08004319 	.word	0x08004319
 8004314:	08004331 	.word	0x08004331
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	73fb      	strb	r3, [r7, #15]
      break;
 800431c:	e02f      	b.n	800437e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d024      	beq.n	8004374 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800432e:	e021      	b.n	8004374 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004338:	d11e      	bne.n	8004378 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800433e:	e01b      	b.n	8004378 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d902      	bls.n	800434c <DMA_CheckFifoParam+0xb4>
 8004346:	2b03      	cmp	r3, #3
 8004348:	d003      	beq.n	8004352 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800434a:	e018      	b.n	800437e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	73fb      	strb	r3, [r7, #15]
      break;
 8004350:	e015      	b.n	800437e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00e      	beq.n	800437c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	73fb      	strb	r3, [r7, #15]
      break;
 8004362:	e00b      	b.n	800437c <DMA_CheckFifoParam+0xe4>
      break;
 8004364:	bf00      	nop
 8004366:	e00a      	b.n	800437e <DMA_CheckFifoParam+0xe6>
      break;
 8004368:	bf00      	nop
 800436a:	e008      	b.n	800437e <DMA_CheckFifoParam+0xe6>
      break;
 800436c:	bf00      	nop
 800436e:	e006      	b.n	800437e <DMA_CheckFifoParam+0xe6>
      break;
 8004370:	bf00      	nop
 8004372:	e004      	b.n	800437e <DMA_CheckFifoParam+0xe6>
      break;
 8004374:	bf00      	nop
 8004376:	e002      	b.n	800437e <DMA_CheckFifoParam+0xe6>
      break;   
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <DMA_CheckFifoParam+0xe6>
      break;
 800437c:	bf00      	nop
    }
  } 
  
  return status; 
 800437e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800438c:	b480      	push	{r7}
 800438e:	b089      	sub	sp, #36	; 0x24
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800439e:	2300      	movs	r3, #0
 80043a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	e175      	b.n	8004698 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80043ac:	2201      	movs	r2, #1
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4013      	ands	r3, r2
 80043be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	f040 8164 	bne.w	8004692 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d003      	beq.n	80043da <HAL_GPIO_Init+0x4e>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b12      	cmp	r3, #18
 80043d8:	d123      	bne.n	8004422 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	08da      	lsrs	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3208      	adds	r2, #8
 80043e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	220f      	movs	r2, #15
 80043f2:	fa02 f303 	lsl.w	r3, r2, r3
 80043f6:	43db      	mvns	r3, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4013      	ands	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4313      	orrs	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	08da      	lsrs	r2, r3, #3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3208      	adds	r2, #8
 800441c:	69b9      	ldr	r1, [r7, #24]
 800441e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	2203      	movs	r2, #3
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	43db      	mvns	r3, r3
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	4013      	ands	r3, r2
 8004438:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0203 	and.w	r2, r3, #3
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d00b      	beq.n	8004476 <HAL_GPIO_Init+0xea>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d007      	beq.n	8004476 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800446a:	2b11      	cmp	r3, #17
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b12      	cmp	r3, #18
 8004474:	d130      	bne.n	80044d8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	2203      	movs	r2, #3
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43db      	mvns	r3, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4013      	ands	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044ac:	2201      	movs	r2, #1
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	fa02 f303 	lsl.w	r3, r2, r3
 80044b4:	43db      	mvns	r3, r3
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	4013      	ands	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f003 0201 	and.w	r2, r3, #1
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	005b      	lsls	r3, r3, #1
 80044e2:	2203      	movs	r2, #3
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	43db      	mvns	r3, r3
 80044ea:	69ba      	ldr	r2, [r7, #24]
 80044ec:	4013      	ands	r3, r2
 80044ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80be 	beq.w	8004692 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004516:	4b65      	ldr	r3, [pc, #404]	; (80046ac <HAL_GPIO_Init+0x320>)
 8004518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800451a:	4a64      	ldr	r2, [pc, #400]	; (80046ac <HAL_GPIO_Init+0x320>)
 800451c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004520:	6453      	str	r3, [r2, #68]	; 0x44
 8004522:	4b62      	ldr	r3, [pc, #392]	; (80046ac <HAL_GPIO_Init+0x320>)
 8004524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800452e:	4a60      	ldr	r2, [pc, #384]	; (80046b0 <HAL_GPIO_Init+0x324>)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	089b      	lsrs	r3, r3, #2
 8004534:	3302      	adds	r3, #2
 8004536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800453a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	220f      	movs	r2, #15
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a57      	ldr	r2, [pc, #348]	; (80046b4 <HAL_GPIO_Init+0x328>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d037      	beq.n	80045ca <HAL_GPIO_Init+0x23e>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a56      	ldr	r2, [pc, #344]	; (80046b8 <HAL_GPIO_Init+0x32c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d031      	beq.n	80045c6 <HAL_GPIO_Init+0x23a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a55      	ldr	r2, [pc, #340]	; (80046bc <HAL_GPIO_Init+0x330>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d02b      	beq.n	80045c2 <HAL_GPIO_Init+0x236>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a54      	ldr	r2, [pc, #336]	; (80046c0 <HAL_GPIO_Init+0x334>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d025      	beq.n	80045be <HAL_GPIO_Init+0x232>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a53      	ldr	r2, [pc, #332]	; (80046c4 <HAL_GPIO_Init+0x338>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d01f      	beq.n	80045ba <HAL_GPIO_Init+0x22e>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a52      	ldr	r2, [pc, #328]	; (80046c8 <HAL_GPIO_Init+0x33c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d019      	beq.n	80045b6 <HAL_GPIO_Init+0x22a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a51      	ldr	r2, [pc, #324]	; (80046cc <HAL_GPIO_Init+0x340>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <HAL_GPIO_Init+0x226>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a50      	ldr	r2, [pc, #320]	; (80046d0 <HAL_GPIO_Init+0x344>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d00d      	beq.n	80045ae <HAL_GPIO_Init+0x222>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a4f      	ldr	r2, [pc, #316]	; (80046d4 <HAL_GPIO_Init+0x348>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d007      	beq.n	80045aa <HAL_GPIO_Init+0x21e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a4e      	ldr	r2, [pc, #312]	; (80046d8 <HAL_GPIO_Init+0x34c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d101      	bne.n	80045a6 <HAL_GPIO_Init+0x21a>
 80045a2:	2309      	movs	r3, #9
 80045a4:	e012      	b.n	80045cc <HAL_GPIO_Init+0x240>
 80045a6:	230a      	movs	r3, #10
 80045a8:	e010      	b.n	80045cc <HAL_GPIO_Init+0x240>
 80045aa:	2308      	movs	r3, #8
 80045ac:	e00e      	b.n	80045cc <HAL_GPIO_Init+0x240>
 80045ae:	2307      	movs	r3, #7
 80045b0:	e00c      	b.n	80045cc <HAL_GPIO_Init+0x240>
 80045b2:	2306      	movs	r3, #6
 80045b4:	e00a      	b.n	80045cc <HAL_GPIO_Init+0x240>
 80045b6:	2305      	movs	r3, #5
 80045b8:	e008      	b.n	80045cc <HAL_GPIO_Init+0x240>
 80045ba:	2304      	movs	r3, #4
 80045bc:	e006      	b.n	80045cc <HAL_GPIO_Init+0x240>
 80045be:	2303      	movs	r3, #3
 80045c0:	e004      	b.n	80045cc <HAL_GPIO_Init+0x240>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e002      	b.n	80045cc <HAL_GPIO_Init+0x240>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <HAL_GPIO_Init+0x240>
 80045ca:	2300      	movs	r3, #0
 80045cc:	69fa      	ldr	r2, [r7, #28]
 80045ce:	f002 0203 	and.w	r2, r2, #3
 80045d2:	0092      	lsls	r2, r2, #2
 80045d4:	4093      	lsls	r3, r2
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80045dc:	4934      	ldr	r1, [pc, #208]	; (80046b0 <HAL_GPIO_Init+0x324>)
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	089b      	lsrs	r3, r3, #2
 80045e2:	3302      	adds	r3, #2
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045ea:	4b3c      	ldr	r3, [pc, #240]	; (80046dc <HAL_GPIO_Init+0x350>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	43db      	mvns	r3, r3
 80045f4:	69ba      	ldr	r2, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800460e:	4a33      	ldr	r2, [pc, #204]	; (80046dc <HAL_GPIO_Init+0x350>)
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004614:	4b31      	ldr	r3, [pc, #196]	; (80046dc <HAL_GPIO_Init+0x350>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	43db      	mvns	r3, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4013      	ands	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004638:	4a28      	ldr	r2, [pc, #160]	; (80046dc <HAL_GPIO_Init+0x350>)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800463e:	4b27      	ldr	r3, [pc, #156]	; (80046dc <HAL_GPIO_Init+0x350>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d003      	beq.n	8004662 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004662:	4a1e      	ldr	r2, [pc, #120]	; (80046dc <HAL_GPIO_Init+0x350>)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004668:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <HAL_GPIO_Init+0x350>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800468c:	4a13      	ldr	r2, [pc, #76]	; (80046dc <HAL_GPIO_Init+0x350>)
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	3301      	adds	r3, #1
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	2b0f      	cmp	r3, #15
 800469c:	f67f ae86 	bls.w	80043ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80046a0:	bf00      	nop
 80046a2:	3724      	adds	r7, #36	; 0x24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	40023800 	.word	0x40023800
 80046b0:	40013800 	.word	0x40013800
 80046b4:	40020000 	.word	0x40020000
 80046b8:	40020400 	.word	0x40020400
 80046bc:	40020800 	.word	0x40020800
 80046c0:	40020c00 	.word	0x40020c00
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40021400 	.word	0x40021400
 80046cc:	40021800 	.word	0x40021800
 80046d0:	40021c00 	.word	0x40021c00
 80046d4:	40022000 	.word	0x40022000
 80046d8:	40022400 	.word	0x40022400
 80046dc:	40013c00 	.word	0x40013c00

080046e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	460b      	mov	r3, r1
 80046ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	887b      	ldrh	r3, [r7, #2]
 80046f2:	4013      	ands	r3, r2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d002      	beq.n	80046fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
 80046fc:	e001      	b.n	8004702 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80046fe:	2300      	movs	r3, #0
 8004700:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004702:	7bfb      	ldrb	r3, [r7, #15]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	460b      	mov	r3, r1
 800471a:	807b      	strh	r3, [r7, #2]
 800471c:	4613      	mov	r3, r2
 800471e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004720:	787b      	ldrb	r3, [r7, #1]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800472c:	e003      	b.n	8004736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800472e:	887b      	ldrh	r3, [r7, #2]
 8004730:	041a      	lsls	r2, r3, #16
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	619a      	str	r2, [r3, #24]
}
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	695a      	ldr	r2, [r3, #20]
 8004752:	887b      	ldrh	r3, [r7, #2]
 8004754:	401a      	ands	r2, r3
 8004756:	887b      	ldrh	r3, [r7, #2]
 8004758:	429a      	cmp	r2, r3
 800475a:	d104      	bne.n	8004766 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800475c:	887b      	ldrh	r3, [r7, #2]
 800475e:	041a      	lsls	r2, r3, #16
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004764:	e002      	b.n	800476c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004766:	887a      	ldrh	r2, [r7, #2]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	619a      	str	r2, [r3, #24]
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	4603      	mov	r3, r0
 8004780:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004782:	4b08      	ldr	r3, [pc, #32]	; (80047a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004784:	695a      	ldr	r2, [r3, #20]
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	4013      	ands	r3, r2
 800478a:	2b00      	cmp	r3, #0
 800478c:	d006      	beq.n	800479c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800478e:	4a05      	ldr	r2, [pc, #20]	; (80047a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fc f8b2 	bl	8000900 <HAL_GPIO_EXTI_Callback>
  }
}
 800479c:	bf00      	nop
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40013c00 	.word	0x40013c00

080047a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e07f      	b.n	80048ba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fe fbf0 	bl	8002fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0201 	bic.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80047f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004808:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d107      	bne.n	8004822 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800481e:	609a      	str	r2, [r3, #8]
 8004820:	e006      	b.n	8004830 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800482e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b02      	cmp	r3, #2
 8004836:	d104      	bne.n	8004842 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004840:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6859      	ldr	r1, [r3, #4]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <HAL_I2C_Init+0x11c>)
 800484e:	430b      	orrs	r3, r1
 8004850:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68da      	ldr	r2, [r3, #12]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004860:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691a      	ldr	r2, [r3, #16]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	ea42 0103 	orr.w	r1, r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	021a      	lsls	r2, r3, #8
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	69d9      	ldr	r1, [r3, #28]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a1a      	ldr	r2, [r3, #32]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	02008000 	.word	0x02008000

080048c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	460b      	mov	r3, r1
 80048d6:	817b      	strh	r3, [r7, #10]
 80048d8:	4613      	mov	r3, r2
 80048da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	f040 80da 	bne.w	8004a9e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_I2C_Master_Transmit+0x30>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e0d3      	b.n	8004aa0 <HAL_I2C_Master_Transmit+0x1d8>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004900:	f7ff f86c 	bl	80039dc <HAL_GetTick>
 8004904:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	2319      	movs	r3, #25
 800490c:	2201      	movs	r2, #1
 800490e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fa5e 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e0be      	b.n	8004aa0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2221      	movs	r2, #33	; 0x21
 8004926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2210      	movs	r2, #16
 800492e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	893a      	ldrh	r2, [r7, #8]
 8004942:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494e:	b29b      	uxth	r3, r3
 8004950:	2bff      	cmp	r3, #255	; 0xff
 8004952:	d90e      	bls.n	8004972 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	22ff      	movs	r2, #255	; 0xff
 8004958:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	b2da      	uxtb	r2, r3
 8004960:	8979      	ldrh	r1, [r7, #10]
 8004962:	4b51      	ldr	r3, [pc, #324]	; (8004aa8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fb54 	bl	8005018 <I2C_TransferConfig>
 8004970:	e06c      	b.n	8004a4c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004976:	b29a      	uxth	r2, r3
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	b2da      	uxtb	r2, r3
 8004982:	8979      	ldrh	r1, [r7, #10]
 8004984:	4b48      	ldr	r3, [pc, #288]	; (8004aa8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f000 fb43 	bl	8005018 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004992:	e05b      	b.n	8004a4c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	6a39      	ldr	r1, [r7, #32]
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 fa5b 	bl	8004e54 <I2C_WaitOnTXISFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e07b      	b.n	8004aa0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ac:	781a      	ldrb	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b01      	subs	r3, #1
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d034      	beq.n	8004a4c <HAL_I2C_Master_Transmit+0x184>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d130      	bne.n	8004a4c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	2200      	movs	r2, #0
 80049f2:	2180      	movs	r1, #128	; 0x80
 80049f4:	68f8      	ldr	r0, [r7, #12]
 80049f6:	f000 f9ed 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e04d      	b.n	8004aa0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2bff      	cmp	r3, #255	; 0xff
 8004a0c:	d90e      	bls.n	8004a2c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	22ff      	movs	r2, #255	; 0xff
 8004a12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	8979      	ldrh	r1, [r7, #10]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 faf7 	bl	8005018 <I2C_TransferConfig>
 8004a2a:	e00f      	b.n	8004a4c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	8979      	ldrh	r1, [r7, #10]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fae6 	bl	8005018 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d19e      	bne.n	8004994 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	6a39      	ldr	r1, [r7, #32]
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fa3a 	bl	8004ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e01a      	b.n	8004aa0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_I2C_Master_Transmit+0x1e4>)
 8004a7e:	400b      	ands	r3, r1
 8004a80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	e000      	b.n	8004aa0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004a9e:	2302      	movs	r3, #2
  }
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3718      	adds	r7, #24
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	80002000 	.word	0x80002000
 8004aac:	fe00e800 	.word	0xfe00e800

08004ab0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af02      	add	r7, sp, #8
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	4608      	mov	r0, r1
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	4603      	mov	r3, r0
 8004ac0:	817b      	strh	r3, [r7, #10]
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	813b      	strh	r3, [r7, #8]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b20      	cmp	r3, #32
 8004ad4:	f040 80fd 	bne.w	8004cd2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_I2C_Mem_Read+0x34>
 8004ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d105      	bne.n	8004af0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004aea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e0f1      	b.n	8004cd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_I2C_Mem_Read+0x4e>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e0ea      	b.n	8004cd4 <HAL_I2C_Mem_Read+0x224>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004b06:	f7fe ff69 	bl	80039dc <HAL_GetTick>
 8004b0a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2319      	movs	r3, #25
 8004b12:	2201      	movs	r2, #1
 8004b14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f95b 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e0d5      	b.n	8004cd4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2222      	movs	r2, #34	; 0x22
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2240      	movs	r2, #64	; 0x40
 8004b34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6a3a      	ldr	r2, [r7, #32]
 8004b42:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004b48:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b50:	88f8      	ldrh	r0, [r7, #6]
 8004b52:	893a      	ldrh	r2, [r7, #8]
 8004b54:	8979      	ldrh	r1, [r7, #10]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	9300      	str	r3, [sp, #0]
 8004b5e:	4603      	mov	r3, r0
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f8bf 	bl	8004ce4 <I2C_RequestMemoryRead>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d005      	beq.n	8004b78 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e0ad      	b.n	8004cd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2bff      	cmp	r3, #255	; 0xff
 8004b80:	d90e      	bls.n	8004ba0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	22ff      	movs	r2, #255	; 0xff
 8004b86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	8979      	ldrh	r1, [r7, #10]
 8004b90:	4b52      	ldr	r3, [pc, #328]	; (8004cdc <HAL_I2C_Mem_Read+0x22c>)
 8004b92:	9300      	str	r3, [sp, #0]
 8004b94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fa3d 	bl	8005018 <I2C_TransferConfig>
 8004b9e:	e00f      	b.n	8004bc0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	8979      	ldrh	r1, [r7, #10]
 8004bb2:	4b4a      	ldr	r3, [pc, #296]	; (8004cdc <HAL_I2C_Mem_Read+0x22c>)
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fa2c 	bl	8005018 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2104      	movs	r1, #4
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f902 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e07c      	b.n	8004cd4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be4:	b2d2      	uxtb	r2, r2
 8004be6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d034      	beq.n	8004c80 <HAL_I2C_Mem_Read+0x1d0>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d130      	bne.n	8004c80 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	2200      	movs	r2, #0
 8004c26:	2180      	movs	r1, #128	; 0x80
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f8d3 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e04d      	b.n	8004cd4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2bff      	cmp	r3, #255	; 0xff
 8004c40:	d90e      	bls.n	8004c60 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	8979      	ldrh	r1, [r7, #10]
 8004c50:	2300      	movs	r3, #0
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 f9dd 	bl	8005018 <I2C_TransferConfig>
 8004c5e:	e00f      	b.n	8004c80 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	8979      	ldrh	r1, [r7, #10]
 8004c72:	2300      	movs	r3, #0
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f000 f9cc 	bl	8005018 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d19a      	bne.n	8004bc0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c8a:	697a      	ldr	r2, [r7, #20]
 8004c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f920 	bl	8004ed4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e01a      	b.n	8004cd4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6859      	ldr	r1, [r3, #4]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_I2C_Mem_Read+0x230>)
 8004cb2:	400b      	ands	r3, r1
 8004cb4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	e000      	b.n	8004cd4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004cd2:	2302      	movs	r3, #2
  }
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3718      	adds	r7, #24
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	80002400 	.word	0x80002400
 8004ce0:	fe00e800 	.word	0xfe00e800

08004ce4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b086      	sub	sp, #24
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	817b      	strh	r3, [r7, #10]
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	813b      	strh	r3, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004cfe:	88fb      	ldrh	r3, [r7, #6]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	8979      	ldrh	r1, [r7, #10]
 8004d04:	4b20      	ldr	r3, [pc, #128]	; (8004d88 <I2C_RequestMemoryRead+0xa4>)
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f984 	bl	8005018 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	69b9      	ldr	r1, [r7, #24]
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 f89d 	bl	8004e54 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e02c      	b.n	8004d7e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d2a:	893b      	ldrh	r3, [r7, #8]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	629a      	str	r2, [r3, #40]	; 0x28
 8004d34:	e015      	b.n	8004d62 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004d36:	893b      	ldrh	r3, [r7, #8]
 8004d38:	0a1b      	lsrs	r3, r3, #8
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	69b9      	ldr	r1, [r7, #24]
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	f000 f883 	bl	8004e54 <I2C_WaitOnTXISFlagUntilTimeout>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e012      	b.n	8004d7e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004d58:	893b      	ldrh	r3, [r7, #8]
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	9300      	str	r3, [sp, #0]
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	2140      	movs	r1, #64	; 0x40
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f831 	bl	8004dd4 <I2C_WaitOnFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	80002000 	.word	0x80002000

08004d8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d103      	bne.n	8004daa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2200      	movs	r2, #0
 8004da8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d007      	beq.n	8004dc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	619a      	str	r2, [r3, #24]
  }
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004de4:	e022      	b.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d01e      	beq.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dee:	f7fe fdf5 	bl	80039dc <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d302      	bcc.n	8004e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d113      	bne.n	8004e2c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	f043 0220 	orr.w	r2, r3, #32
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e00f      	b.n	8004e4c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	699a      	ldr	r2, [r3, #24]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4013      	ands	r3, r2
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d0cd      	beq.n	8004de6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e60:	e02c      	b.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f000 f870 	bl	8004f4c <I2C_IsAcknowledgeFailed>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d001      	beq.n	8004e76 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e02a      	b.n	8004ecc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e7c:	d01e      	beq.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e7e:	f7fe fdad 	bl	80039dc <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d302      	bcc.n	8004e94 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d113      	bne.n	8004ebc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	f043 0220 	orr.w	r2, r3, #32
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e007      	b.n	8004ecc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d1cb      	bne.n	8004e62 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ee0:	e028      	b.n	8004f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f830 	bl	8004f4c <I2C_IsAcknowledgeFailed>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e026      	b.n	8004f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef6:	f7fe fd71 	bl	80039dc <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d302      	bcc.n	8004f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d113      	bne.n	8004f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f10:	f043 0220 	orr.w	r2, r3, #32
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e007      	b.n	8004f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d1cf      	bne.n	8004ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	2b10      	cmp	r3, #16
 8004f64:	d151      	bne.n	800500a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f66:	e022      	b.n	8004fae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d01e      	beq.n	8004fae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f70:	f7fe fd34 	bl	80039dc <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d302      	bcc.n	8004f86 <I2C_IsAcknowledgeFailed+0x3a>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d113      	bne.n	8004fae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	f043 0220 	orr.w	r2, r3, #32
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e02e      	b.n	800500c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b20      	cmp	r3, #32
 8004fba:	d1d5      	bne.n	8004f68 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2210      	movs	r2, #16
 8004fc2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2220      	movs	r2, #32
 8004fca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f7ff fedd 	bl	8004d8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6859      	ldr	r1, [r3, #4]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <I2C_IsAcknowledgeFailed+0xc8>)
 8004fde:	400b      	ands	r3, r1
 8004fe0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe6:	f043 0204 	orr.w	r2, r3, #4
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	fe00e800 	.word	0xfe00e800

08005018 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	607b      	str	r3, [r7, #4]
 8005022:	460b      	mov	r3, r1
 8005024:	817b      	strh	r3, [r7, #10]
 8005026:	4613      	mov	r3, r2
 8005028:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	69bb      	ldr	r3, [r7, #24]
 8005032:	0d5b      	lsrs	r3, r3, #21
 8005034:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <I2C_TransferConfig+0x58>)
 800503a:	430b      	orrs	r3, r1
 800503c:	43db      	mvns	r3, r3
 800503e:	ea02 0103 	and.w	r1, r2, r3
 8005042:	897b      	ldrh	r3, [r7, #10]
 8005044:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005048:	7a7b      	ldrb	r3, [r7, #9]
 800504a:	041b      	lsls	r3, r3, #16
 800504c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005050:	431a      	orrs	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	431a      	orrs	r2, r3
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	431a      	orrs	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	03ff63ff 	.word	0x03ff63ff

08005074 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b20      	cmp	r3, #32
 8005088:	d138      	bne.n	80050fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005090:	2b01      	cmp	r3, #1
 8005092:	d101      	bne.n	8005098 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005094:	2302      	movs	r3, #2
 8005096:	e032      	b.n	80050fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	; 0x24
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f022 0201 	bic.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80050c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	e000      	b.n	80050fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050fc:	2302      	movs	r3, #2
  }
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800510a:	b480      	push	{r7}
 800510c:	b085      	sub	sp, #20
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b20      	cmp	r3, #32
 800511e:	d139      	bne.n	8005194 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005126:	2b01      	cmp	r3, #1
 8005128:	d101      	bne.n	800512e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800512a:	2302      	movs	r3, #2
 800512c:	e033      	b.n	8005196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2224      	movs	r2, #36	; 0x24
 800513a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800515c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	021b      	lsls	r3, r3, #8
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	e000      	b.n	8005196 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005194:	2302      	movs	r3, #2
  }
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80051aa:	2300      	movs	r3, #0
 80051ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80051ae:	4b23      	ldr	r3, [pc, #140]	; (800523c <HAL_PWREx_EnableOverDrive+0x98>)
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	4a22      	ldr	r2, [pc, #136]	; (800523c <HAL_PWREx_EnableOverDrive+0x98>)
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6413      	str	r3, [r2, #64]	; 0x40
 80051ba:	4b20      	ldr	r3, [pc, #128]	; (800523c <HAL_PWREx_EnableOverDrive+0x98>)
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c2:	603b      	str	r3, [r7, #0]
 80051c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80051c6:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a1d      	ldr	r2, [pc, #116]	; (8005240 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80051d2:	f7fe fc03 	bl	80039dc <HAL_GetTick>
 80051d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051d8:	e009      	b.n	80051ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80051da:	f7fe fbff 	bl	80039dc <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051e8:	d901      	bls.n	80051ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e022      	b.n	8005234 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80051ee:	4b14      	ldr	r3, [pc, #80]	; (8005240 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051fa:	d1ee      	bne.n	80051da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80051fc:	4b10      	ldr	r3, [pc, #64]	; (8005240 <HAL_PWREx_EnableOverDrive+0x9c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a0f      	ldr	r2, [pc, #60]	; (8005240 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005206:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005208:	f7fe fbe8 	bl	80039dc <HAL_GetTick>
 800520c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800520e:	e009      	b.n	8005224 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005210:	f7fe fbe4 	bl	80039dc <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800521e:	d901      	bls.n	8005224 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e007      	b.n	8005234 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005224:	4b06      	ldr	r3, [pc, #24]	; (8005240 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005230:	d1ee      	bne.n	8005210 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	40023800 	.word	0x40023800
 8005240:	40007000 	.word	0x40007000

08005244 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800524c:	2300      	movs	r3, #0
 800524e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e25e      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 8087 	beq.w	8005376 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005268:	4b96      	ldr	r3, [pc, #600]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f003 030c 	and.w	r3, r3, #12
 8005270:	2b04      	cmp	r3, #4
 8005272:	d00c      	beq.n	800528e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005274:	4b93      	ldr	r3, [pc, #588]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 030c 	and.w	r3, r3, #12
 800527c:	2b08      	cmp	r3, #8
 800527e:	d112      	bne.n	80052a6 <HAL_RCC_OscConfig+0x62>
 8005280:	4b90      	ldr	r3, [pc, #576]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800528c:	d10b      	bne.n	80052a6 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528e:	4b8d      	ldr	r3, [pc, #564]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d06c      	beq.n	8005374 <HAL_RCC_OscConfig+0x130>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d168      	bne.n	8005374 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e238      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ae:	d106      	bne.n	80052be <HAL_RCC_OscConfig+0x7a>
 80052b0:	4b84      	ldr	r3, [pc, #528]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a83      	ldr	r2, [pc, #524]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80052b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ba:	6013      	str	r3, [r2, #0]
 80052bc:	e02e      	b.n	800531c <HAL_RCC_OscConfig+0xd8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10c      	bne.n	80052e0 <HAL_RCC_OscConfig+0x9c>
 80052c6:	4b7f      	ldr	r3, [pc, #508]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a7e      	ldr	r2, [pc, #504]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80052cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d0:	6013      	str	r3, [r2, #0]
 80052d2:	4b7c      	ldr	r3, [pc, #496]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a7b      	ldr	r2, [pc, #492]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80052d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	e01d      	b.n	800531c <HAL_RCC_OscConfig+0xd8>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0xc0>
 80052ea:	4b76      	ldr	r3, [pc, #472]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a75      	ldr	r2, [pc, #468]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80052f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052f4:	6013      	str	r3, [r2, #0]
 80052f6:	4b73      	ldr	r3, [pc, #460]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a72      	ldr	r2, [pc, #456]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e00b      	b.n	800531c <HAL_RCC_OscConfig+0xd8>
 8005304:	4b6f      	ldr	r3, [pc, #444]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a6e      	ldr	r2, [pc, #440]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 800530a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530e:	6013      	str	r3, [r2, #0]
 8005310:	4b6c      	ldr	r3, [pc, #432]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a6b      	ldr	r2, [pc, #428]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005316:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800531a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005324:	f7fe fb5a 	bl	80039dc <HAL_GetTick>
 8005328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800532a:	e008      	b.n	800533e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800532c:	f7fe fb56 	bl	80039dc <HAL_GetTick>
 8005330:	4602      	mov	r2, r0
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	1ad3      	subs	r3, r2, r3
 8005336:	2b64      	cmp	r3, #100	; 0x64
 8005338:	d901      	bls.n	800533e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e1ec      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533e:	4b61      	ldr	r3, [pc, #388]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0f0      	beq.n	800532c <HAL_RCC_OscConfig+0xe8>
 800534a:	e014      	b.n	8005376 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fe fb46 	bl	80039dc <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005354:	f7fe fb42 	bl	80039dc <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b64      	cmp	r3, #100	; 0x64
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e1d8      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005366:	4b57      	ldr	r3, [pc, #348]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x110>
 8005372:	e000      	b.n	8005376 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d069      	beq.n	8005456 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005382:	4b50      	ldr	r3, [pc, #320]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800538e:	4b4d      	ldr	r3, [pc, #308]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f003 030c 	and.w	r3, r3, #12
 8005396:	2b08      	cmp	r3, #8
 8005398:	d11c      	bne.n	80053d4 <HAL_RCC_OscConfig+0x190>
 800539a:	4b4a      	ldr	r3, [pc, #296]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d116      	bne.n	80053d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053a6:	4b47      	ldr	r3, [pc, #284]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d005      	beq.n	80053be <HAL_RCC_OscConfig+0x17a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d001      	beq.n	80053be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e1ac      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053be:	4b41      	ldr	r3, [pc, #260]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	493d      	ldr	r1, [pc, #244]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d2:	e040      	b.n	8005456 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d023      	beq.n	8005424 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053dc:	4b39      	ldr	r3, [pc, #228]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a38      	ldr	r2, [pc, #224]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fe faf8 	bl	80039dc <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f0:	f7fe faf4 	bl	80039dc <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e18a      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005402:	4b30      	ldr	r3, [pc, #192]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800540e:	4b2d      	ldr	r3, [pc, #180]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	4929      	ldr	r1, [pc, #164]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]
 8005422:	e018      	b.n	8005456 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005424:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005430:	f7fe fad4 	bl	80039dc <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005438:	f7fe fad0 	bl	80039dc <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b02      	cmp	r3, #2
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e166      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544a:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d038      	beq.n	80054d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d019      	beq.n	800549e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800546a:	4b16      	ldr	r3, [pc, #88]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 800546c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800546e:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005476:	f7fe fab1 	bl	80039dc <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800547e:	f7fe faad 	bl	80039dc <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e143      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005490:	4b0c      	ldr	r3, [pc, #48]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 8005492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x23a>
 800549c:	e01a      	b.n	80054d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800549e:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80054a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a2:	4a08      	ldr	r2, [pc, #32]	; (80054c4 <HAL_RCC_OscConfig+0x280>)
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054aa:	f7fe fa97 	bl	80039dc <HAL_GetTick>
 80054ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054b0:	e00a      	b.n	80054c8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054b2:	f7fe fa93 	bl	80039dc <HAL_GetTick>
 80054b6:	4602      	mov	r2, r0
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	1ad3      	subs	r3, r2, r3
 80054bc:	2b02      	cmp	r3, #2
 80054be:	d903      	bls.n	80054c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054c0:	2303      	movs	r3, #3
 80054c2:	e129      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
 80054c4:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c8:	4b95      	ldr	r3, [pc, #596]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80054ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054cc:	f003 0302 	and.w	r3, r3, #2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1ee      	bne.n	80054b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80a4 	beq.w	800562a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054e2:	4b8f      	ldr	r3, [pc, #572]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d10d      	bne.n	800550a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ee:	4b8c      	ldr	r3, [pc, #560]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	4a8b      	ldr	r2, [pc, #556]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80054f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054f8:	6413      	str	r3, [r2, #64]	; 0x40
 80054fa:	4b89      	ldr	r3, [pc, #548]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005506:	2301      	movs	r3, #1
 8005508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800550a:	4b86      	ldr	r3, [pc, #536]	; (8005724 <HAL_RCC_OscConfig+0x4e0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005512:	2b00      	cmp	r3, #0
 8005514:	d118      	bne.n	8005548 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005516:	4b83      	ldr	r3, [pc, #524]	; (8005724 <HAL_RCC_OscConfig+0x4e0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a82      	ldr	r2, [pc, #520]	; (8005724 <HAL_RCC_OscConfig+0x4e0>)
 800551c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005522:	f7fe fa5b 	bl	80039dc <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005528:	e008      	b.n	800553c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800552a:	f7fe fa57 	bl	80039dc <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b64      	cmp	r3, #100	; 0x64
 8005536:	d901      	bls.n	800553c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e0ed      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800553c:	4b79      	ldr	r3, [pc, #484]	; (8005724 <HAL_RCC_OscConfig+0x4e0>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0f0      	beq.n	800552a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d106      	bne.n	800555e <HAL_RCC_OscConfig+0x31a>
 8005550:	4b73      	ldr	r3, [pc, #460]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	4a72      	ldr	r2, [pc, #456]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005556:	f043 0301 	orr.w	r3, r3, #1
 800555a:	6713      	str	r3, [r2, #112]	; 0x70
 800555c:	e02d      	b.n	80055ba <HAL_RCC_OscConfig+0x376>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10c      	bne.n	8005580 <HAL_RCC_OscConfig+0x33c>
 8005566:	4b6e      	ldr	r3, [pc, #440]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556a:	4a6d      	ldr	r2, [pc, #436]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 800556c:	f023 0301 	bic.w	r3, r3, #1
 8005570:	6713      	str	r3, [r2, #112]	; 0x70
 8005572:	4b6b      	ldr	r3, [pc, #428]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	4a6a      	ldr	r2, [pc, #424]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005578:	f023 0304 	bic.w	r3, r3, #4
 800557c:	6713      	str	r3, [r2, #112]	; 0x70
 800557e:	e01c      	b.n	80055ba <HAL_RCC_OscConfig+0x376>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b05      	cmp	r3, #5
 8005586:	d10c      	bne.n	80055a2 <HAL_RCC_OscConfig+0x35e>
 8005588:	4b65      	ldr	r3, [pc, #404]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a64      	ldr	r2, [pc, #400]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 800558e:	f043 0304 	orr.w	r3, r3, #4
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
 8005594:	4b62      	ldr	r3, [pc, #392]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	4a61      	ldr	r2, [pc, #388]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6713      	str	r3, [r2, #112]	; 0x70
 80055a0:	e00b      	b.n	80055ba <HAL_RCC_OscConfig+0x376>
 80055a2:	4b5f      	ldr	r3, [pc, #380]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a5e      	ldr	r2, [pc, #376]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
 80055ae:	4b5c      	ldr	r3, [pc, #368]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	4a5b      	ldr	r2, [pc, #364]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80055b4:	f023 0304 	bic.w	r3, r3, #4
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d015      	beq.n	80055ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c2:	f7fe fa0b 	bl	80039dc <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c8:	e00a      	b.n	80055e0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ca:	f7fe fa07 	bl	80039dc <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d8:	4293      	cmp	r3, r2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e09b      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e0:	4b4f      	ldr	r3, [pc, #316]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80055e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0ee      	beq.n	80055ca <HAL_RCC_OscConfig+0x386>
 80055ec:	e014      	b.n	8005618 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ee:	f7fe f9f5 	bl	80039dc <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f4:	e00a      	b.n	800560c <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f6:	f7fe f9f1 	bl	80039dc <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	f241 3288 	movw	r2, #5000	; 0x1388
 8005604:	4293      	cmp	r3, r2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e085      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560c:	4b44      	ldr	r3, [pc, #272]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1ee      	bne.n	80055f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d105      	bne.n	800562a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561e:	4b40      	ldr	r3, [pc, #256]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	4a3f      	ldr	r2, [pc, #252]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005628:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d071      	beq.n	8005716 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005632:	4b3b      	ldr	r3, [pc, #236]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 030c 	and.w	r3, r3, #12
 800563a:	2b08      	cmp	r3, #8
 800563c:	d069      	beq.n	8005712 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d14b      	bne.n	80056de <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005646:	4b36      	ldr	r3, [pc, #216]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a35      	ldr	r2, [pc, #212]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 800564c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005652:	f7fe f9c3 	bl	80039dc <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800565a:	f7fe f9bf 	bl	80039dc <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e055      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566c:	4b2c      	ldr	r3, [pc, #176]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1f0      	bne.n	800565a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	019b      	lsls	r3, r3, #6
 8005688:	431a      	orrs	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	3b01      	subs	r3, #1
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	431a      	orrs	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	071b      	lsls	r3, r3, #28
 80056a4:	491e      	ldr	r1, [pc, #120]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056aa:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a1c      	ldr	r2, [pc, #112]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80056b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b6:	f7fe f991 	bl	80039dc <HAL_GetTick>
 80056ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056bc:	e008      	b.n	80056d0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056be:	f7fe f98d 	bl	80039dc <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d901      	bls.n	80056d0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e023      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056d0:	4b13      	ldr	r3, [pc, #76]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d0f0      	beq.n	80056be <HAL_RCC_OscConfig+0x47a>
 80056dc:	e01b      	b.n	8005716 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056de:	4b10      	ldr	r3, [pc, #64]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a0f      	ldr	r2, [pc, #60]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 80056e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ea:	f7fe f977 	bl	80039dc <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f0:	e008      	b.n	8005704 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056f2:	f7fe f973 	bl	80039dc <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e009      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005704:	4b06      	ldr	r3, [pc, #24]	; (8005720 <HAL_RCC_OscConfig+0x4dc>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1f0      	bne.n	80056f2 <HAL_RCC_OscConfig+0x4ae>
 8005710:	e001      	b.n	8005716 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8005716:	2300      	movs	r3, #0
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40023800 	.word	0x40023800
 8005724:	40007000 	.word	0x40007000

08005728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005732:	2300      	movs	r3, #0
 8005734:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	e0ce      	b.n	80058de <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005740:	4b69      	ldr	r3, [pc, #420]	; (80058e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 030f 	and.w	r3, r3, #15
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d910      	bls.n	8005770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800574e:	4b66      	ldr	r3, [pc, #408]	; (80058e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f023 020f 	bic.w	r2, r3, #15
 8005756:	4964      	ldr	r1, [pc, #400]	; (80058e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	4313      	orrs	r3, r2
 800575c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800575e:	4b62      	ldr	r3, [pc, #392]	; (80058e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d001      	beq.n	8005770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e0b6      	b.n	80058de <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d020      	beq.n	80057be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005788:	4b58      	ldr	r3, [pc, #352]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4a57      	ldr	r2, [pc, #348]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 800578e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057a0:	4b52      	ldr	r3, [pc, #328]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	4a51      	ldr	r2, [pc, #324]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80057a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057ac:	4b4f      	ldr	r3, [pc, #316]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	494c      	ldr	r1, [pc, #304]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d040      	beq.n	800584c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d107      	bne.n	80057e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057d2:	4b46      	ldr	r3, [pc, #280]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d115      	bne.n	800580a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e07d      	b.n	80058de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d107      	bne.n	80057fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ea:	4b40      	ldr	r3, [pc, #256]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e071      	b.n	80058de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057fa:	4b3c      	ldr	r3, [pc, #240]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e069      	b.n	80058de <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800580a:	4b38      	ldr	r3, [pc, #224]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	f023 0203 	bic.w	r2, r3, #3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	4935      	ldr	r1, [pc, #212]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 8005818:	4313      	orrs	r3, r2
 800581a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800581c:	f7fe f8de 	bl	80039dc <HAL_GetTick>
 8005820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005822:	e00a      	b.n	800583a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005824:	f7fe f8da 	bl	80039dc <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e051      	b.n	80058de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800583a:	4b2c      	ldr	r3, [pc, #176]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 020c 	and.w	r2, r3, #12
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	429a      	cmp	r2, r3
 800584a:	d1eb      	bne.n	8005824 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800584c:	4b26      	ldr	r3, [pc, #152]	; (80058e8 <HAL_RCC_ClockConfig+0x1c0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d210      	bcs.n	800587c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800585a:	4b23      	ldr	r3, [pc, #140]	; (80058e8 <HAL_RCC_ClockConfig+0x1c0>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f023 020f 	bic.w	r2, r3, #15
 8005862:	4921      	ldr	r1, [pc, #132]	; (80058e8 <HAL_RCC_ClockConfig+0x1c0>)
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	4313      	orrs	r3, r2
 8005868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800586a:	4b1f      	ldr	r3, [pc, #124]	; (80058e8 <HAL_RCC_ClockConfig+0x1c0>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e030      	b.n	80058de <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b00      	cmp	r3, #0
 8005886:	d008      	beq.n	800589a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005888:	4b18      	ldr	r3, [pc, #96]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	4915      	ldr	r1, [pc, #84]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 8005896:	4313      	orrs	r3, r2
 8005898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d009      	beq.n	80058ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80058a6:	4b11      	ldr	r3, [pc, #68]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	689b      	ldr	r3, [r3, #8]
 80058aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	490d      	ldr	r1, [pc, #52]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058ba:	f000 f81d 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
 80058be:	4601      	mov	r1, r0
 80058c0:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <HAL_RCC_ClockConfig+0x1c4>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	4a09      	ldr	r2, [pc, #36]	; (80058f0 <HAL_RCC_ClockConfig+0x1c8>)
 80058cc:	5cd3      	ldrb	r3, [r2, r3]
 80058ce:	fa21 f303 	lsr.w	r3, r1, r3
 80058d2:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <HAL_RCC_ClockConfig+0x1cc>)
 80058d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80058d6:	2000      	movs	r0, #0
 80058d8:	f7fe f83c 	bl	8003954 <HAL_InitTick>

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	40023c00 	.word	0x40023c00
 80058ec:	40023800 	.word	0x40023800
 80058f0:	08008ae8 	.word	0x08008ae8
 80058f4:	20000010 	.word	0x20000010

080058f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	607b      	str	r3, [r7, #4]
 8005902:	2300      	movs	r3, #0
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	2300      	movs	r3, #0
 8005908:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800590e:	4b50      	ldr	r3, [pc, #320]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x158>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f003 030c 	and.w	r3, r3, #12
 8005916:	2b04      	cmp	r3, #4
 8005918:	d007      	beq.n	800592a <HAL_RCC_GetSysClockFreq+0x32>
 800591a:	2b08      	cmp	r3, #8
 800591c:	d008      	beq.n	8005930 <HAL_RCC_GetSysClockFreq+0x38>
 800591e:	2b00      	cmp	r3, #0
 8005920:	f040 808d 	bne.w	8005a3e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005924:	4b4b      	ldr	r3, [pc, #300]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005926:	60bb      	str	r3, [r7, #8]
       break;
 8005928:	e08c      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800592a:	4b4b      	ldr	r3, [pc, #300]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x160>)
 800592c:	60bb      	str	r3, [r7, #8]
      break;
 800592e:	e089      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005930:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x158>)
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005938:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800593a:	4b45      	ldr	r3, [pc, #276]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x158>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d023      	beq.n	800598e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005946:	4b42      	ldr	r3, [pc, #264]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x158>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	099b      	lsrs	r3, r3, #6
 800594c:	f04f 0400 	mov.w	r4, #0
 8005950:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	ea03 0501 	and.w	r5, r3, r1
 800595c:	ea04 0602 	and.w	r6, r4, r2
 8005960:	4a3d      	ldr	r2, [pc, #244]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x160>)
 8005962:	fb02 f106 	mul.w	r1, r2, r6
 8005966:	2200      	movs	r2, #0
 8005968:	fb02 f205 	mul.w	r2, r2, r5
 800596c:	440a      	add	r2, r1
 800596e:	493a      	ldr	r1, [pc, #232]	; (8005a58 <HAL_RCC_GetSysClockFreq+0x160>)
 8005970:	fba5 0101 	umull	r0, r1, r5, r1
 8005974:	1853      	adds	r3, r2, r1
 8005976:	4619      	mov	r1, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f04f 0400 	mov.w	r4, #0
 800597e:	461a      	mov	r2, r3
 8005980:	4623      	mov	r3, r4
 8005982:	f7fa fcad 	bl	80002e0 <__aeabi_uldivmod>
 8005986:	4603      	mov	r3, r0
 8005988:	460c      	mov	r4, r1
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	e049      	b.n	8005a22 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800598e:	4b30      	ldr	r3, [pc, #192]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x158>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	099b      	lsrs	r3, r3, #6
 8005994:	f04f 0400 	mov.w	r4, #0
 8005998:	f240 11ff 	movw	r1, #511	; 0x1ff
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	ea03 0501 	and.w	r5, r3, r1
 80059a4:	ea04 0602 	and.w	r6, r4, r2
 80059a8:	4629      	mov	r1, r5
 80059aa:	4632      	mov	r2, r6
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	f04f 0400 	mov.w	r4, #0
 80059b4:	0154      	lsls	r4, r2, #5
 80059b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059ba:	014b      	lsls	r3, r1, #5
 80059bc:	4619      	mov	r1, r3
 80059be:	4622      	mov	r2, r4
 80059c0:	1b49      	subs	r1, r1, r5
 80059c2:	eb62 0206 	sbc.w	r2, r2, r6
 80059c6:	f04f 0300 	mov.w	r3, #0
 80059ca:	f04f 0400 	mov.w	r4, #0
 80059ce:	0194      	lsls	r4, r2, #6
 80059d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80059d4:	018b      	lsls	r3, r1, #6
 80059d6:	1a5b      	subs	r3, r3, r1
 80059d8:	eb64 0402 	sbc.w	r4, r4, r2
 80059dc:	f04f 0100 	mov.w	r1, #0
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	00e2      	lsls	r2, r4, #3
 80059e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80059ea:	00d9      	lsls	r1, r3, #3
 80059ec:	460b      	mov	r3, r1
 80059ee:	4614      	mov	r4, r2
 80059f0:	195b      	adds	r3, r3, r5
 80059f2:	eb44 0406 	adc.w	r4, r4, r6
 80059f6:	f04f 0100 	mov.w	r1, #0
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	02a2      	lsls	r2, r4, #10
 8005a00:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005a04:	0299      	lsls	r1, r3, #10
 8005a06:	460b      	mov	r3, r1
 8005a08:	4614      	mov	r4, r2
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f04f 0400 	mov.w	r4, #0
 8005a14:	461a      	mov	r2, r3
 8005a16:	4623      	mov	r3, r4
 8005a18:	f7fa fc62 	bl	80002e0 <__aeabi_uldivmod>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8005a22:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <HAL_RCC_GetSysClockFreq+0x158>)
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	0c1b      	lsrs	r3, r3, #16
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	60bb      	str	r3, [r7, #8]
      break;
 8005a3c:	e002      	b.n	8005a44 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005a40:	60bb      	str	r3, [r7, #8]
      break;
 8005a42:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a44:	68bb      	ldr	r3, [r7, #8]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40023800 	.word	0x40023800
 8005a54:	00f42400 	.word	0x00f42400
 8005a58:	017d7840 	.word	0x017d7840

08005a5c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a60:	4b03      	ldr	r3, [pc, #12]	; (8005a70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a62:	681b      	ldr	r3, [r3, #0]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	20000010 	.word	0x20000010

08005a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a78:	f7ff fff0 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8005a7c:	4601      	mov	r1, r0
 8005a7e:	4b05      	ldr	r3, [pc, #20]	; (8005a94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	0a9b      	lsrs	r3, r3, #10
 8005a84:	f003 0307 	and.w	r3, r3, #7
 8005a88:	4a03      	ldr	r2, [pc, #12]	; (8005a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a8a:	5cd3      	ldrb	r3, [r2, r3]
 8005a8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40023800 	.word	0x40023800
 8005a98:	08008af8 	.word	0x08008af8

08005a9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005aa0:	f7ff ffdc 	bl	8005a5c <HAL_RCC_GetHCLKFreq>
 8005aa4:	4601      	mov	r1, r0
 8005aa6:	4b05      	ldr	r3, [pc, #20]	; (8005abc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	0b5b      	lsrs	r3, r3, #13
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	4a03      	ldr	r2, [pc, #12]	; (8005ac0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ab2:	5cd3      	ldrb	r3, [r2, r3]
 8005ab4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	40023800 	.word	0x40023800
 8005ac0:	08008af8 	.word	0x08008af8

08005ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d012      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005aec:	4b69      	ldr	r3, [pc, #420]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	4a68      	ldr	r2, [pc, #416]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005af2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005af6:	6093      	str	r3, [r2, #8]
 8005af8:	4b66      	ldr	r3, [pc, #408]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b00:	4964      	ldr	r1, [pc, #400]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d017      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b1e:	4b5d      	ldr	r3, [pc, #372]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	4959      	ldr	r1, [pc, #356]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b3c:	d101      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d101      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d017      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b5a:	4b4e      	ldr	r3, [pc, #312]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b68:	494a      	ldr	r1, [pc, #296]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b78:	d101      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005b86:	2301      	movs	r3, #1
 8005b88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005b96:	2301      	movs	r3, #1
 8005b98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0320 	and.w	r3, r3, #32
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f000 808b 	beq.w	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ba8:	4b3a      	ldr	r3, [pc, #232]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	4a39      	ldr	r2, [pc, #228]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8005bb4:	4b37      	ldr	r3, [pc, #220]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005bc0:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a34      	ldr	r2, [pc, #208]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005bc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bcc:	f7fd ff06 	bl	80039dc <HAL_GetTick>
 8005bd0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005bd2:	e008      	b.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd4:	f7fd ff02 	bl	80039dc <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b64      	cmp	r3, #100	; 0x64
 8005be0:	d901      	bls.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e38d      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005be6:	4b2c      	ldr	r3, [pc, #176]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0f0      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bf2:	4b28      	ldr	r3, [pc, #160]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bfa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d035      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d02e      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c10:	4b20      	ldr	r3, [pc, #128]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c1a:	4b1e      	ldr	r3, [pc, #120]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	4a1d      	ldr	r2, [pc, #116]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c24:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c26:	4b1b      	ldr	r3, [pc, #108]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	4a1a      	ldr	r2, [pc, #104]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005c32:	4a18      	ldr	r2, [pc, #96]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c38:	4b16      	ldr	r3, [pc, #88]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d114      	bne.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c44:	f7fd feca 	bl	80039dc <HAL_GetTick>
 8005c48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c4a:	e00a      	b.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c4c:	f7fd fec6 	bl	80039dc <HAL_GetTick>
 8005c50:	4602      	mov	r2, r0
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d901      	bls.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e34f      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c62:	4b0c      	ldr	r3, [pc, #48]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c66:	f003 0302 	and.w	r3, r3, #2
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d0ee      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c7a:	d111      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c88:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005c8a:	400b      	ands	r3, r1
 8005c8c:	4901      	ldr	r1, [pc, #4]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	608b      	str	r3, [r1, #8]
 8005c92:	e00b      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005c94:	40023800 	.word	0x40023800
 8005c98:	40007000 	.word	0x40007000
 8005c9c:	0ffffcff 	.word	0x0ffffcff
 8005ca0:	4bb3      	ldr	r3, [pc, #716]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	4ab2      	ldr	r2, [pc, #712]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ca6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005caa:	6093      	str	r3, [r2, #8]
 8005cac:	4bb0      	ldr	r3, [pc, #704]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb8:	49ad      	ldr	r1, [pc, #692]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0310 	and.w	r3, r3, #16
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d010      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cca:	4ba9      	ldr	r3, [pc, #676]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd0:	4aa7      	ldr	r2, [pc, #668]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005cda:	4ba5      	ldr	r3, [pc, #660]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce4:	49a2      	ldr	r1, [pc, #648]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cf8:	4b9d      	ldr	r3, [pc, #628]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d06:	499a      	ldr	r1, [pc, #616]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00a      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d1a:	4b95      	ldr	r3, [pc, #596]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d28:	4991      	ldr	r1, [pc, #580]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00a      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d3c:	4b8c      	ldr	r3, [pc, #560]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4a:	4989      	ldr	r1, [pc, #548]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00a      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005d5e:	4b84      	ldr	r3, [pc, #528]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6c:	4980      	ldr	r1, [pc, #512]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d80:	4b7b      	ldr	r3, [pc, #492]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	f023 0203 	bic.w	r2, r3, #3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d8e:	4978      	ldr	r1, [pc, #480]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00a      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005da2:	4b73      	ldr	r3, [pc, #460]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da8:	f023 020c 	bic.w	r2, r3, #12
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db0:	496f      	ldr	r1, [pc, #444]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005dc4:	4b6a      	ldr	r3, [pc, #424]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	4967      	ldr	r1, [pc, #412]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005de6:	4b62      	ldr	r3, [pc, #392]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df4:	495e      	ldr	r1, [pc, #376]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e08:	4b59      	ldr	r3, [pc, #356]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e16:	4956      	ldr	r1, [pc, #344]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005e2a:	4b51      	ldr	r3, [pc, #324]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e38:	494d      	ldr	r1, [pc, #308]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005e4c:	4b48      	ldr	r3, [pc, #288]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e5a:	4945      	ldr	r1, [pc, #276]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005e6e:	4b40      	ldr	r3, [pc, #256]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e74:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7c:	493c      	ldr	r1, [pc, #240]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005e90:	4b37      	ldr	r3, [pc, #220]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e96:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e9e:	4934      	ldr	r1, [pc, #208]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d011      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005eb2:	4b2f      	ldr	r3, [pc, #188]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ec0:	492b      	ldr	r1, [pc, #172]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ecc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0308 	and.w	r3, r3, #8
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d001      	beq.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ef2:	4b1f      	ldr	r3, [pc, #124]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f00:	491b      	ldr	r1, [pc, #108]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00b      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f14:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f24:	4912      	ldr	r1, [pc, #72]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005f38:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f48:	4909      	ldr	r1, [pc, #36]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00f      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005f5c:	4b04      	ldr	r3, [pc, #16]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6c:	e002      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005f6e:	bf00      	nop
 8005f70:	40023800 	.word	0x40023800
 8005f74:	4985      	ldr	r1, [pc, #532]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00b      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005f88:	4b80      	ldr	r3, [pc, #512]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f8e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f98:	497c      	ldr	r1, [pc, #496]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d005      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fae:	f040 80d6 	bne.w	800615e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fb2:	4b76      	ldr	r3, [pc, #472]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a75      	ldr	r2, [pc, #468]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fb8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fbe:	f7fd fd0d 	bl	80039dc <HAL_GetTick>
 8005fc2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fc4:	e008      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005fc6:	f7fd fd09 	bl	80039dc <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	2b64      	cmp	r3, #100	; 0x64
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e194      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005fd8:	4b6c      	ldr	r3, [pc, #432]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1f0      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d021      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d11d      	bne.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ff8:	4b64      	ldr	r3, [pc, #400]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006006:	4b61      	ldr	r3, [pc, #388]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800600c:	0e1b      	lsrs	r3, r3, #24
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	019a      	lsls	r2, r3, #6
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	431a      	orrs	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	061b      	lsls	r3, r3, #24
 8006024:	431a      	orrs	r2, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	071b      	lsls	r3, r3, #28
 800602c:	4957      	ldr	r1, [pc, #348]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d004      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006048:	d00a      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006052:	2b00      	cmp	r3, #0
 8006054:	d02e      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800605e:	d129      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006060:	4b4a      	ldr	r3, [pc, #296]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006066:	0c1b      	lsrs	r3, r3, #16
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800606e:	4b47      	ldr	r3, [pc, #284]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006070:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006074:	0f1b      	lsrs	r3, r3, #28
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	019a      	lsls	r2, r3, #6
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	041b      	lsls	r3, r3, #16
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	061b      	lsls	r3, r3, #24
 800608e:	431a      	orrs	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	071b      	lsls	r3, r3, #28
 8006094:	493d      	ldr	r1, [pc, #244]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800609c:	4b3b      	ldr	r3, [pc, #236]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800609e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060a2:	f023 021f 	bic.w	r2, r3, #31
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	3b01      	subs	r3, #1
 80060ac:	4937      	ldr	r1, [pc, #220]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01d      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80060c0:	4b32      	ldr	r3, [pc, #200]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060c6:	0e1b      	lsrs	r3, r3, #24
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80060ce:	4b2f      	ldr	r3, [pc, #188]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060d4:	0f1b      	lsrs	r3, r3, #28
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	019a      	lsls	r2, r3, #6
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	041b      	lsls	r3, r3, #16
 80060e8:	431a      	orrs	r2, r3
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	061b      	lsls	r3, r3, #24
 80060ee:	431a      	orrs	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	071b      	lsls	r3, r3, #28
 80060f4:	4925      	ldr	r1, [pc, #148]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d011      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	019a      	lsls	r2, r3, #6
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	041b      	lsls	r3, r3, #16
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	061b      	lsls	r3, r3, #24
 800611c:	431a      	orrs	r2, r3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	071b      	lsls	r3, r3, #28
 8006124:	4919      	ldr	r1, [pc, #100]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800612c:	4b17      	ldr	r3, [pc, #92]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a16      	ldr	r2, [pc, #88]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006132:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006138:	f7fd fc50 	bl	80039dc <HAL_GetTick>
 800613c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800613e:	e008      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006140:	f7fd fc4c 	bl	80039dc <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b64      	cmp	r3, #100	; 0x64
 800614c:	d901      	bls.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e0d7      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006152:	4b0e      	ldr	r3, [pc, #56]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b01      	cmp	r3, #1
 8006162:	f040 80cd 	bne.w	8006300 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006166:	4b09      	ldr	r3, [pc, #36]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a08      	ldr	r2, [pc, #32]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800616c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006170:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006172:	f7fd fc33 	bl	80039dc <HAL_GetTick>
 8006176:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006178:	e00a      	b.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800617a:	f7fd fc2f 	bl	80039dc <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b64      	cmp	r3, #100	; 0x64
 8006186:	d903      	bls.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e0ba      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800618c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006190:	4b5e      	ldr	r3, [pc, #376]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800619c:	d0ed      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d02e      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d12a      	bne.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061c6:	4b51      	ldr	r3, [pc, #324]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061cc:	0c1b      	lsrs	r3, r3, #16
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80061d4:	4b4d      	ldr	r3, [pc, #308]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	0f1b      	lsrs	r3, r3, #28
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	019a      	lsls	r2, r3, #6
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	041b      	lsls	r3, r3, #16
 80061ec:	431a      	orrs	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	061b      	lsls	r3, r3, #24
 80061f4:	431a      	orrs	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	071b      	lsls	r3, r3, #28
 80061fa:	4944      	ldr	r1, [pc, #272]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006202:	4b42      	ldr	r3, [pc, #264]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006208:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	3b01      	subs	r3, #1
 8006212:	021b      	lsls	r3, r3, #8
 8006214:	493d      	ldr	r1, [pc, #244]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d022      	beq.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800622c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006230:	d11d      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006232:	4b36      	ldr	r3, [pc, #216]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006238:	0e1b      	lsrs	r3, r3, #24
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006240:	4b32      	ldr	r3, [pc, #200]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	0f1b      	lsrs	r3, r3, #28
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	019a      	lsls	r2, r3, #6
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	041b      	lsls	r3, r3, #16
 800625a:	431a      	orrs	r2, r3
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	061b      	lsls	r3, r3, #24
 8006260:	431a      	orrs	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	071b      	lsls	r3, r3, #28
 8006266:	4929      	ldr	r1, [pc, #164]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006268:	4313      	orrs	r3, r2
 800626a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0308 	and.w	r3, r3, #8
 8006276:	2b00      	cmp	r3, #0
 8006278:	d028      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800627a:	4b24      	ldr	r3, [pc, #144]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	0e1b      	lsrs	r3, r3, #24
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006288:	4b20      	ldr	r3, [pc, #128]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800628a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628e:	0c1b      	lsrs	r3, r3, #16
 8006290:	f003 0303 	and.w	r3, r3, #3
 8006294:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	019a      	lsls	r2, r3, #6
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	431a      	orrs	r2, r3
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	061b      	lsls	r3, r3, #24
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69db      	ldr	r3, [r3, #28]
 80062ac:	071b      	lsls	r3, r3, #28
 80062ae:	4917      	ldr	r1, [pc, #92]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80062b6:	4b15      	ldr	r3, [pc, #84]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	4911      	ldr	r1, [pc, #68]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a0e      	ldr	r2, [pc, #56]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062d8:	f7fd fb80 	bl	80039dc <HAL_GetTick>
 80062dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062de:	e008      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80062e0:	f7fd fb7c 	bl	80039dc <HAL_GetTick>
 80062e4:	4602      	mov	r2, r0
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	2b64      	cmp	r3, #100	; 0x64
 80062ec:	d901      	bls.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e007      	b.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80062f2:	4b06      	ldr	r3, [pc, #24]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062fe:	d1ef      	bne.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3720      	adds	r7, #32
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	40023800 	.word	0x40023800

08006310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e01d      	b.n	800635e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f7fc fe80 	bl	800303c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3304      	adds	r3, #4
 800634c:	4619      	mov	r1, r3
 800634e:	4610      	mov	r0, r2
 8006350:	f000 fbd2 	bl	8006af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f042 0201 	orr.w	r2, r2, #1
 800637e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689a      	ldr	r2, [r3, #8]
 8006386:	4b0c      	ldr	r3, [pc, #48]	; (80063b8 <HAL_TIM_Base_Start_IT+0x50>)
 8006388:	4013      	ands	r3, r2
 800638a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d00b      	beq.n	80063aa <HAL_TIM_Base_Start_IT+0x42>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006398:	d007      	beq.n	80063aa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0201 	orr.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	00010007 	.word	0x00010007

080063bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e01d      	b.n	800640a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f815 	bl	8006412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f000 fb7c 	bl	8006af8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2201      	movs	r2, #1
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f000 fef4 	bl	8007228 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a17      	ldr	r2, [pc, #92]	; (80064a4 <HAL_TIM_PWM_Start+0x7c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d004      	beq.n	8006454 <HAL_TIM_PWM_Start+0x2c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a16      	ldr	r2, [pc, #88]	; (80064a8 <HAL_TIM_PWM_Start+0x80>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d101      	bne.n	8006458 <HAL_TIM_PWM_Start+0x30>
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <HAL_TIM_PWM_Start+0x32>
 8006458:	2300      	movs	r3, #0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800646c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	4b0d      	ldr	r3, [pc, #52]	; (80064ac <HAL_TIM_PWM_Start+0x84>)
 8006476:	4013      	ands	r3, r2
 8006478:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b06      	cmp	r3, #6
 800647e:	d00b      	beq.n	8006498 <HAL_TIM_PWM_Start+0x70>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006486:	d007      	beq.n	8006498 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40010000 	.word	0x40010000
 80064a8:	40010400 	.word	0x40010400
 80064ac:	00010007 	.word	0x00010007

080064b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d122      	bne.n	800650c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0302 	and.w	r3, r3, #2
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d11b      	bne.n	800650c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0202 	mvn.w	r2, #2
 80064dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f003 0303 	and.w	r3, r3, #3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fae2 	bl	8006abc <HAL_TIM_IC_CaptureCallback>
 80064f8:	e005      	b.n	8006506 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fad4 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fae5 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b04      	cmp	r3, #4
 8006518:	d122      	bne.n	8006560 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b04      	cmp	r3, #4
 8006526:	d11b      	bne.n	8006560 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0204 	mvn.w	r2, #4
 8006530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2202      	movs	r2, #2
 8006536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fab8 	bl	8006abc <HAL_TIM_IC_CaptureCallback>
 800654c:	e005      	b.n	800655a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 faaa 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fabb 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b08      	cmp	r3, #8
 800656c:	d122      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0308 	and.w	r3, r3, #8
 8006578:	2b08      	cmp	r3, #8
 800657a:	d11b      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0208 	mvn.w	r2, #8
 8006584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2204      	movs	r2, #4
 800658a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa8e 	bl	8006abc <HAL_TIM_IC_CaptureCallback>
 80065a0:	e005      	b.n	80065ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa80 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa91 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0310 	and.w	r3, r3, #16
 80065be:	2b10      	cmp	r3, #16
 80065c0:	d122      	bne.n	8006608 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0310 	and.w	r3, r3, #16
 80065cc:	2b10      	cmp	r3, #16
 80065ce:	d11b      	bne.n	8006608 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0210 	mvn.w	r2, #16
 80065d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2208      	movs	r2, #8
 80065de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fa64 	bl	8006abc <HAL_TIM_IC_CaptureCallback>
 80065f4:	e005      	b.n	8006602 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fa56 	bl	8006aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fa67 	bl	8006ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b01      	cmp	r3, #1
 8006614:	d10e      	bne.n	8006634 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b01      	cmp	r3, #1
 8006622:	d107      	bne.n	8006634 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0201 	mvn.w	r2, #1
 800662c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fa30 	bl	8006a94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800663e:	2b80      	cmp	r3, #128	; 0x80
 8006640:	d10e      	bne.n	8006660 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664c:	2b80      	cmp	r3, #128	; 0x80
 800664e:	d107      	bne.n	8006660 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 feee 	bl	800743c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666e:	d10e      	bne.n	800668e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667a:	2b80      	cmp	r3, #128	; 0x80
 800667c:	d107      	bne.n	800668e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fee1 	bl	8007450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006698:	2b40      	cmp	r3, #64	; 0x40
 800669a:	d10e      	bne.n	80066ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b40      	cmp	r3, #64	; 0x40
 80066a8:	d107      	bne.n	80066ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fa15 	bl	8006ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b20      	cmp	r3, #32
 80066c6:	d10e      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f003 0320 	and.w	r3, r3, #32
 80066d2:	2b20      	cmp	r3, #32
 80066d4:	d107      	bne.n	80066e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f06f 0220 	mvn.w	r2, #32
 80066de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 fea1 	bl	8007428 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066e6:	bf00      	nop
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006702:	2b01      	cmp	r3, #1
 8006704:	d101      	bne.n	800670a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006706:	2302      	movs	r3, #2
 8006708:	e105      	b.n	8006916 <HAL_TIM_PWM_ConfigChannel+0x226>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2b14      	cmp	r3, #20
 800671e:	f200 80f0 	bhi.w	8006902 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006722:	a201      	add	r2, pc, #4	; (adr r2, 8006728 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006728:	0800677d 	.word	0x0800677d
 800672c:	08006903 	.word	0x08006903
 8006730:	08006903 	.word	0x08006903
 8006734:	08006903 	.word	0x08006903
 8006738:	080067bd 	.word	0x080067bd
 800673c:	08006903 	.word	0x08006903
 8006740:	08006903 	.word	0x08006903
 8006744:	08006903 	.word	0x08006903
 8006748:	080067ff 	.word	0x080067ff
 800674c:	08006903 	.word	0x08006903
 8006750:	08006903 	.word	0x08006903
 8006754:	08006903 	.word	0x08006903
 8006758:	0800683f 	.word	0x0800683f
 800675c:	08006903 	.word	0x08006903
 8006760:	08006903 	.word	0x08006903
 8006764:	08006903 	.word	0x08006903
 8006768:	08006881 	.word	0x08006881
 800676c:	08006903 	.word	0x08006903
 8006770:	08006903 	.word	0x08006903
 8006774:	08006903 	.word	0x08006903
 8006778:	080068c1 	.word	0x080068c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68b9      	ldr	r1, [r7, #8]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fa58 	bl	8006c38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0208 	orr.w	r2, r2, #8
 8006796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f022 0204 	bic.w	r2, r2, #4
 80067a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6999      	ldr	r1, [r3, #24]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691a      	ldr	r2, [r3, #16]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	619a      	str	r2, [r3, #24]
      break;
 80067ba:	e0a3      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 faaa 	bl	8006d1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	699a      	ldr	r2, [r3, #24]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6999      	ldr	r1, [r3, #24]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	021a      	lsls	r2, r3, #8
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	619a      	str	r2, [r3, #24]
      break;
 80067fc:	e082      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	4618      	mov	r0, r3
 8006806:	f000 fb01 	bl	8006e0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f042 0208 	orr.w	r2, r2, #8
 8006818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69da      	ldr	r2, [r3, #28]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f022 0204 	bic.w	r2, r2, #4
 8006828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	69d9      	ldr	r1, [r3, #28]
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	691a      	ldr	r2, [r3, #16]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	61da      	str	r2, [r3, #28]
      break;
 800683c:	e062      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	4618      	mov	r0, r3
 8006846:	f000 fb57 	bl	8006ef8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69da      	ldr	r2, [r3, #28]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	69d9      	ldr	r1, [r3, #28]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	021a      	lsls	r2, r3, #8
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	61da      	str	r2, [r3, #28]
      break;
 800687e:	e041      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fb8e 	bl	8006fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0208 	orr.w	r2, r2, #8
 800689a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0204 	bic.w	r2, r2, #4
 80068aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691a      	ldr	r2, [r3, #16]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068be:	e021      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 fbc0 	bl	800704c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068ea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	021a      	lsls	r2, r3, #8
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006900:	e000      	b.n	8006904 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006902:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop

08006920 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIM_ConfigClockSource+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e0a6      	b.n	8006a86 <HAL_TIM_ConfigClockSource+0x166>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4b4f      	ldr	r3, [pc, #316]	; (8006a90 <HAL_TIM_ConfigClockSource+0x170>)
 8006954:	4013      	ands	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800695e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b40      	cmp	r3, #64	; 0x40
 800696e:	d067      	beq.n	8006a40 <HAL_TIM_ConfigClockSource+0x120>
 8006970:	2b40      	cmp	r3, #64	; 0x40
 8006972:	d80b      	bhi.n	800698c <HAL_TIM_ConfigClockSource+0x6c>
 8006974:	2b10      	cmp	r3, #16
 8006976:	d073      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x140>
 8006978:	2b10      	cmp	r3, #16
 800697a:	d802      	bhi.n	8006982 <HAL_TIM_ConfigClockSource+0x62>
 800697c:	2b00      	cmp	r3, #0
 800697e:	d06f      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006980:	e078      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006982:	2b20      	cmp	r3, #32
 8006984:	d06c      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x140>
 8006986:	2b30      	cmp	r3, #48	; 0x30
 8006988:	d06a      	beq.n	8006a60 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800698a:	e073      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800698c:	2b70      	cmp	r3, #112	; 0x70
 800698e:	d00d      	beq.n	80069ac <HAL_TIM_ConfigClockSource+0x8c>
 8006990:	2b70      	cmp	r3, #112	; 0x70
 8006992:	d804      	bhi.n	800699e <HAL_TIM_ConfigClockSource+0x7e>
 8006994:	2b50      	cmp	r3, #80	; 0x50
 8006996:	d033      	beq.n	8006a00 <HAL_TIM_ConfigClockSource+0xe0>
 8006998:	2b60      	cmp	r3, #96	; 0x60
 800699a:	d041      	beq.n	8006a20 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800699c:	e06a      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800699e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069a2:	d066      	beq.n	8006a72 <HAL_TIM_ConfigClockSource+0x152>
 80069a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a8:	d017      	beq.n	80069da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80069aa:	e063      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6818      	ldr	r0, [r3, #0]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	6899      	ldr	r1, [r3, #8]
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685a      	ldr	r2, [r3, #4]
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f000 fc14 	bl	80071e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	609a      	str	r2, [r3, #8]
      break;
 80069d8:	e04c      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6899      	ldr	r1, [r3, #8]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685a      	ldr	r2, [r3, #4]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f000 fbfd 	bl	80071e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069fc:	609a      	str	r2, [r3, #8]
      break;
 80069fe:	e039      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	6859      	ldr	r1, [r3, #4]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	f000 fb71 	bl	80070f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2150      	movs	r1, #80	; 0x50
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 fbca 	bl	80071b2 <TIM_ITRx_SetConfig>
      break;
 8006a1e:	e029      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	6859      	ldr	r1, [r3, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	f000 fb90 	bl	8007152 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2160      	movs	r1, #96	; 0x60
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f000 fbba 	bl	80071b2 <TIM_ITRx_SetConfig>
      break;
 8006a3e:	e019      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	6859      	ldr	r1, [r3, #4]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	f000 fb51 	bl	80070f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2140      	movs	r1, #64	; 0x40
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f000 fbaa 	bl	80071b2 <TIM_ITRx_SetConfig>
      break;
 8006a5e:	e009      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	f000 fba1 	bl	80071b2 <TIM_ITRx_SetConfig>
      break;
 8006a70:	e000      	b.n	8006a74 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	fffeff88 	.word	0xfffeff88

08006a94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b083      	sub	sp, #12
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ac4:	bf00      	nop
 8006ac6:	370c      	adds	r7, #12
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006aec:	bf00      	nop
 8006aee:	370c      	adds	r7, #12
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a40      	ldr	r2, [pc, #256]	; (8006c0c <TIM_Base_SetConfig+0x114>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d013      	beq.n	8006b38 <TIM_Base_SetConfig+0x40>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b16:	d00f      	beq.n	8006b38 <TIM_Base_SetConfig+0x40>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a3d      	ldr	r2, [pc, #244]	; (8006c10 <TIM_Base_SetConfig+0x118>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d00b      	beq.n	8006b38 <TIM_Base_SetConfig+0x40>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a3c      	ldr	r2, [pc, #240]	; (8006c14 <TIM_Base_SetConfig+0x11c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d007      	beq.n	8006b38 <TIM_Base_SetConfig+0x40>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a3b      	ldr	r2, [pc, #236]	; (8006c18 <TIM_Base_SetConfig+0x120>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d003      	beq.n	8006b38 <TIM_Base_SetConfig+0x40>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a3a      	ldr	r2, [pc, #232]	; (8006c1c <TIM_Base_SetConfig+0x124>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d108      	bne.n	8006b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a2f      	ldr	r2, [pc, #188]	; (8006c0c <TIM_Base_SetConfig+0x114>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d02b      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b58:	d027      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a2c      	ldr	r2, [pc, #176]	; (8006c10 <TIM_Base_SetConfig+0x118>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d023      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a2b      	ldr	r2, [pc, #172]	; (8006c14 <TIM_Base_SetConfig+0x11c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d01f      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a2a      	ldr	r2, [pc, #168]	; (8006c18 <TIM_Base_SetConfig+0x120>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d01b      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a29      	ldr	r2, [pc, #164]	; (8006c1c <TIM_Base_SetConfig+0x124>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d017      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a28      	ldr	r2, [pc, #160]	; (8006c20 <TIM_Base_SetConfig+0x128>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a27      	ldr	r2, [pc, #156]	; (8006c24 <TIM_Base_SetConfig+0x12c>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d00f      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4a26      	ldr	r2, [pc, #152]	; (8006c28 <TIM_Base_SetConfig+0x130>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d00b      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a25      	ldr	r2, [pc, #148]	; (8006c2c <TIM_Base_SetConfig+0x134>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d007      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a24      	ldr	r2, [pc, #144]	; (8006c30 <TIM_Base_SetConfig+0x138>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d003      	beq.n	8006baa <TIM_Base_SetConfig+0xb2>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a23      	ldr	r2, [pc, #140]	; (8006c34 <TIM_Base_SetConfig+0x13c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d108      	bne.n	8006bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	68fa      	ldr	r2, [r7, #12]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a0a      	ldr	r2, [pc, #40]	; (8006c0c <TIM_Base_SetConfig+0x114>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d003      	beq.n	8006bf0 <TIM_Base_SetConfig+0xf8>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4a0c      	ldr	r2, [pc, #48]	; (8006c1c <TIM_Base_SetConfig+0x124>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d103      	bne.n	8006bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	691a      	ldr	r2, [r3, #16]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	615a      	str	r2, [r3, #20]
}
 8006bfe:	bf00      	nop
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40010400 	.word	0x40010400
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40014400 	.word	0x40014400
 8006c28:	40014800 	.word	0x40014800
 8006c2c:	40001800 	.word	0x40001800
 8006c30:	40001c00 	.word	0x40001c00
 8006c34:	40002000 	.word	0x40002000

08006c38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f023 0201 	bic.w	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4b2b      	ldr	r3, [pc, #172]	; (8006d10 <TIM_OC1_SetConfig+0xd8>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f023 0303 	bic.w	r3, r3, #3
 8006c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	f023 0302 	bic.w	r3, r3, #2
 8006c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a21      	ldr	r2, [pc, #132]	; (8006d14 <TIM_OC1_SetConfig+0xdc>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d003      	beq.n	8006c9c <TIM_OC1_SetConfig+0x64>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <TIM_OC1_SetConfig+0xe0>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d10c      	bne.n	8006cb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f023 0308 	bic.w	r3, r3, #8
 8006ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	f023 0304 	bic.w	r3, r3, #4
 8006cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <TIM_OC1_SetConfig+0xdc>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d003      	beq.n	8006cc6 <TIM_OC1_SetConfig+0x8e>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <TIM_OC1_SetConfig+0xe0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d111      	bne.n	8006cea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ccc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	685a      	ldr	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	697a      	ldr	r2, [r7, #20]
 8006d02:	621a      	str	r2, [r3, #32]
}
 8006d04:	bf00      	nop
 8006d06:	371c      	adds	r7, #28
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	fffeff8f 	.word	0xfffeff8f
 8006d14:	40010000 	.word	0x40010000
 8006d18:	40010400 	.word	0x40010400

08006d1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f023 0210 	bic.w	r2, r3, #16
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4b2e      	ldr	r3, [pc, #184]	; (8006e00 <TIM_OC2_SetConfig+0xe4>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	021b      	lsls	r3, r3, #8
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f023 0320 	bic.w	r3, r3, #32
 8006d66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	011b      	lsls	r3, r3, #4
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a23      	ldr	r2, [pc, #140]	; (8006e04 <TIM_OC2_SetConfig+0xe8>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_OC2_SetConfig+0x68>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a22      	ldr	r2, [pc, #136]	; (8006e08 <TIM_OC2_SetConfig+0xec>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d10d      	bne.n	8006da0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	011b      	lsls	r3, r3, #4
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a18      	ldr	r2, [pc, #96]	; (8006e04 <TIM_OC2_SetConfig+0xe8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_OC2_SetConfig+0x94>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a17      	ldr	r2, [pc, #92]	; (8006e08 <TIM_OC2_SetConfig+0xec>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d113      	bne.n	8006dd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006db6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	695b      	ldr	r3, [r3, #20]
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	feff8fff 	.word	0xfeff8fff
 8006e04:	40010000 	.word	0x40010000
 8006e08:	40010400 	.word	0x40010400

08006e0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b087      	sub	sp, #28
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	4b2d      	ldr	r3, [pc, #180]	; (8006eec <TIM_OC3_SetConfig+0xe0>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a22      	ldr	r2, [pc, #136]	; (8006ef0 <TIM_OC3_SetConfig+0xe4>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_OC3_SetConfig+0x66>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a21      	ldr	r2, [pc, #132]	; (8006ef4 <TIM_OC3_SetConfig+0xe8>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d10d      	bne.n	8006e8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a17      	ldr	r2, [pc, #92]	; (8006ef0 <TIM_OC3_SetConfig+0xe4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d003      	beq.n	8006e9e <TIM_OC3_SetConfig+0x92>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a16      	ldr	r2, [pc, #88]	; (8006ef4 <TIM_OC3_SetConfig+0xe8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d113      	bne.n	8006ec6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	011b      	lsls	r3, r3, #4
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	693a      	ldr	r2, [r7, #16]
 8006eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	697a      	ldr	r2, [r7, #20]
 8006ede:	621a      	str	r2, [r3, #32]
}
 8006ee0:	bf00      	nop
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	fffeff8f 	.word	0xfffeff8f
 8006ef0:	40010000 	.word	0x40010000
 8006ef4:	40010400 	.word	0x40010400

08006ef8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b087      	sub	sp, #28
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	4b1e      	ldr	r3, [pc, #120]	; (8006f9c <TIM_OC4_SetConfig+0xa4>)
 8006f24:	4013      	ands	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	031b      	lsls	r3, r3, #12
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a13      	ldr	r2, [pc, #76]	; (8006fa0 <TIM_OC4_SetConfig+0xa8>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d003      	beq.n	8006f60 <TIM_OC4_SetConfig+0x68>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a12      	ldr	r2, [pc, #72]	; (8006fa4 <TIM_OC4_SetConfig+0xac>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d109      	bne.n	8006f74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	695b      	ldr	r3, [r3, #20]
 8006f6c:	019b      	lsls	r3, r3, #6
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	685a      	ldr	r2, [r3, #4]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	621a      	str	r2, [r3, #32]
}
 8006f8e:	bf00      	nop
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	feff8fff 	.word	0xfeff8fff
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40010400 	.word	0x40010400

08006fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4b1b      	ldr	r3, [pc, #108]	; (8007040 <TIM_OC5_SetConfig+0x98>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fe8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	041b      	lsls	r3, r3, #16
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a12      	ldr	r2, [pc, #72]	; (8007044 <TIM_OC5_SetConfig+0x9c>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_OC5_SetConfig+0x5e>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a11      	ldr	r2, [pc, #68]	; (8007048 <TIM_OC5_SetConfig+0xa0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d109      	bne.n	800701a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	021b      	lsls	r3, r3, #8
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	697a      	ldr	r2, [r7, #20]
 800701e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	693a      	ldr	r2, [r7, #16]
 8007032:	621a      	str	r2, [r3, #32]
}
 8007034:	bf00      	nop
 8007036:	371c      	adds	r7, #28
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr
 8007040:	fffeff8f 	.word	0xfffeff8f
 8007044:	40010000 	.word	0x40010000
 8007048:	40010400 	.word	0x40010400

0800704c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4b1c      	ldr	r3, [pc, #112]	; (80070e8 <TIM_OC6_SetConfig+0x9c>)
 8007078:	4013      	ands	r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	021b      	lsls	r3, r3, #8
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4313      	orrs	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800708e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	051b      	lsls	r3, r3, #20
 8007096:	693a      	ldr	r2, [r7, #16]
 8007098:	4313      	orrs	r3, r2
 800709a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a13      	ldr	r2, [pc, #76]	; (80070ec <TIM_OC6_SetConfig+0xa0>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_OC6_SetConfig+0x60>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a12      	ldr	r2, [pc, #72]	; (80070f0 <TIM_OC6_SetConfig+0xa4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d109      	bne.n	80070c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	029b      	lsls	r3, r3, #10
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	4313      	orrs	r3, r2
 80070be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	621a      	str	r2, [r3, #32]
}
 80070da:	bf00      	nop
 80070dc:	371c      	adds	r7, #28
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	feff8fff 	.word	0xfeff8fff
 80070ec:	40010000 	.word	0x40010000
 80070f0:	40010400 	.word	0x40010400

080070f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f023 0201 	bic.w	r2, r3, #1
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800711e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f023 030a 	bic.w	r3, r3, #10
 8007130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	693a      	ldr	r2, [r7, #16]
 800713e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	621a      	str	r2, [r3, #32]
}
 8007146:	bf00      	nop
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007152:	b480      	push	{r7}
 8007154:	b087      	sub	sp, #28
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	f023 0210 	bic.w	r2, r3, #16
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800717c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	031b      	lsls	r3, r3, #12
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800718e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	011b      	lsls	r3, r3, #4
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4313      	orrs	r3, r2
 8007198:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	621a      	str	r2, [r3, #32]
}
 80071a6:	bf00      	nop
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	f043 0307 	orr.w	r3, r3, #7
 80071d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	609a      	str	r2, [r3, #8]
}
 80071dc:	bf00      	nop
 80071de:	3714      	adds	r7, #20
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	021a      	lsls	r2, r3, #8
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	431a      	orrs	r2, r3
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	4313      	orrs	r3, r2
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	609a      	str	r2, [r3, #8]
}
 800721c:	bf00      	nop
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	f003 031f 	and.w	r3, r3, #31
 800723a:	2201      	movs	r2, #1
 800723c:	fa02 f303 	lsl.w	r3, r2, r3
 8007240:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a1a      	ldr	r2, [r3, #32]
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	43db      	mvns	r3, r3
 800724a:	401a      	ands	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6a1a      	ldr	r2, [r3, #32]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f003 031f 	and.w	r3, r3, #31
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	fa01 f303 	lsl.w	r3, r1, r3
 8007260:	431a      	orrs	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	621a      	str	r2, [r3, #32]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007288:	2302      	movs	r3, #2
 800728a:	e045      	b.n	8007318 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2202      	movs	r2, #2
 8007298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a1c      	ldr	r2, [pc, #112]	; (8007324 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d004      	beq.n	80072c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1b      	ldr	r2, [pc, #108]	; (8007328 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d108      	bne.n	80072d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80072c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68fa      	ldr	r2, [r7, #12]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ea:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68fa      	ldr	r2, [r7, #12]
 80072fc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	40010000 	.word	0x40010000
 8007328:	40010400 	.word	0x40010400

0800732c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007344:	2302      	movs	r3, #2
 8007346:	e065      	b.n	8007414 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4313      	orrs	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	695b      	ldr	r3, [r3, #20]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	041b      	lsls	r3, r3, #16
 80073be:	4313      	orrs	r3, r2
 80073c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a16      	ldr	r2, [pc, #88]	; (8007420 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a14      	ldr	r2, [pc, #80]	; (8007424 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d115      	bne.n	8007402 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	051b      	lsls	r3, r3, #20
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	40010000 	.word	0x40010000
 8007424:	40010400 	.word	0x40010400

08007428 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007444:	bf00      	nop
 8007446:	370c      	adds	r7, #12
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007458:	bf00      	nop
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d101      	bne.n	8007476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007472:	2301      	movs	r3, #1
 8007474:	e040      	b.n	80074f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800747a:	2b00      	cmp	r3, #0
 800747c:	d106      	bne.n	800748c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fc f82c 	bl	80034e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2224      	movs	r2, #36	; 0x24
 8007490:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0201 	bic.w	r2, r2, #1
 80074a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f9f4 	bl	8007890 <UART_SetConfig>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d101      	bne.n	80074b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e022      	b.n	80074f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fc8c 	bl	8007dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	689a      	ldr	r2, [r3, #8]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074de:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0201 	orr.w	r2, r2, #1
 80074ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fd13 	bl	8007f1c <UART_CheckIdleState>
 80074f6:	4603      	mov	r3, r0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	4613      	mov	r3, r2
 800750c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007512:	2b20      	cmp	r3, #32
 8007514:	d16c      	bne.n	80075f0 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d002      	beq.n	8007522 <HAL_UART_Receive_DMA+0x22>
 800751c:	88fb      	ldrh	r3, [r7, #6]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e065      	b.n	80075f2 <HAL_UART_Receive_DMA+0xf2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_UART_Receive_DMA+0x34>
 8007530:	2302      	movs	r3, #2
 8007532:	e05e      	b.n	80075f2 <HAL_UART_Receive_DMA+0xf2>
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	68ba      	ldr	r2, [r7, #8]
 8007540:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	88fa      	ldrh	r2, [r7, #6]
 8007546:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2222      	movs	r2, #34	; 0x22
 8007554:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d02a      	beq.n	80075b4 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007562:	4a26      	ldr	r2, [pc, #152]	; (80075fc <HAL_UART_Receive_DMA+0xfc>)
 8007564:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800756a:	4a25      	ldr	r2, [pc, #148]	; (8007600 <HAL_UART_Receive_DMA+0x100>)
 800756c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007572:	4a24      	ldr	r2, [pc, #144]	; (8007604 <HAL_UART_Receive_DMA+0x104>)
 8007574:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800757a:	2200      	movs	r2, #0
 800757c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3324      	adds	r3, #36	; 0x24
 8007588:	4619      	mov	r1, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758e:	461a      	mov	r2, r3
 8007590:	88fb      	ldrh	r3, [r7, #6]
 8007592:	f7fc fc11 	bl	8003db8 <HAL_DMA_Start_IT>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00b      	beq.n	80075b4 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2210      	movs	r2, #16
 80075a0:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e01e      	b.n	80075f2 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075ca:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	689a      	ldr	r2, [r3, #8]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f042 0201 	orr.w	r2, r2, #1
 80075da:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075ea:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	e000      	b.n	80075f2 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 80075f0:	2302      	movs	r3, #2
  }
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	08008075 	.word	0x08008075
 8007600:	080080d9 	.word	0x080080d9
 8007604:	080080f5 	.word	0x080080f5

08007608 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b088      	sub	sp, #32
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	f003 030f 	and.w	r3, r3, #15
 800762e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d113      	bne.n	800765e <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	f003 0320 	and.w	r3, r3, #32
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00e      	beq.n	800765e <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 80eb 	beq.w	800782a <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	4798      	blx	r3
      }
      return;
 800765c:	e0e5      	b.n	800782a <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 80c0 	beq.w	80077e6 <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	2b00      	cmp	r3, #0
 800766e:	d105      	bne.n	800767c <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007676:	2b00      	cmp	r3, #0
 8007678:	f000 80b5 	beq.w	80077e6 <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00e      	beq.n	80076a4 <HAL_UART_IRQHandler+0x9c>
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2201      	movs	r2, #1
 8007696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800769c:	f043 0201 	orr.w	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	f003 0302 	and.w	r3, r3, #2
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <HAL_UART_IRQHandler+0xc4>
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d009      	beq.n	80076cc <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2202      	movs	r2, #2
 80076be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076c4:	f043 0204 	orr.w	r2, r3, #4
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	f003 0304 	and.w	r3, r3, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00e      	beq.n	80076f4 <HAL_UART_IRQHandler+0xec>
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d009      	beq.n	80076f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2204      	movs	r2, #4
 80076e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ec:	f043 0202 	orr.w	r2, r3, #2
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	f003 0308 	and.w	r3, r3, #8
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d013      	beq.n	8007726 <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	f003 0320 	and.w	r3, r3, #32
 8007704:	2b00      	cmp	r3, #0
 8007706:	d104      	bne.n	8007712 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800770e:	2b00      	cmp	r3, #0
 8007710:	d009      	beq.n	8007726 <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2208      	movs	r2, #8
 8007718:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800771e:	f043 0208 	orr.w	r2, r3, #8
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800772a:	2b00      	cmp	r3, #0
 800772c:	d07f      	beq.n	800782e <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00c      	beq.n	8007752 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f003 0320 	and.w	r3, r3, #32
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007756:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007762:	2b40      	cmp	r3, #64	; 0x40
 8007764:	d004      	beq.n	8007770 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800776c:	2b00      	cmp	r3, #0
 800776e:	d031      	beq.n	80077d4 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fc5f 	bl	8008034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007780:	2b40      	cmp	r3, #64	; 0x40
 8007782:	d123      	bne.n	80077cc <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	689a      	ldr	r2, [r3, #8]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007792:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007798:	2b00      	cmp	r3, #0
 800779a:	d013      	beq.n	80077c4 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a0:	4a26      	ldr	r2, [pc, #152]	; (800783c <HAL_UART_IRQHandler+0x234>)
 80077a2:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fc fb65 	bl	8003e78 <HAL_DMA_Abort_IT>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d016      	beq.n	80077e2 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80077be:	4610      	mov	r0, r2
 80077c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c2:	e00e      	b.n	80077e2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f859 	bl	800787c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077ca:	e00a      	b.n	80077e2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 f855 	bl	800787c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d2:	e006      	b.n	80077e2 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f851 	bl	800787c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80077e0:	e025      	b.n	800782e <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077e2:	bf00      	nop
    return;
 80077e4:	e023      	b.n	800782e <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00d      	beq.n	800780c <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d008      	beq.n	800780c <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d017      	beq.n	8007832 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
    }
    return;
 800780a:	e012      	b.n	8007832 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00e      	beq.n	8007834 <HAL_UART_IRQHandler+0x22c>
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800781c:	2b00      	cmp	r3, #0
 800781e:	d009      	beq.n	8007834 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fcb9 	bl	8008198 <UART_EndTransmit_IT>
    return;
 8007826:	bf00      	nop
 8007828:	e004      	b.n	8007834 <HAL_UART_IRQHandler+0x22c>
      return;
 800782a:	bf00      	nop
 800782c:	e002      	b.n	8007834 <HAL_UART_IRQHandler+0x22c>
    return;
 800782e:	bf00      	nop
 8007830:	e000      	b.n	8007834 <HAL_UART_IRQHandler+0x22c>
    return;
 8007832:	bf00      	nop
  }

}
 8007834:	3720      	adds	r7, #32
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	0800816d 	.word	0x0800816d

08007840 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007884:	bf00      	nop
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8007898:	2300      	movs	r3, #0
 800789a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4bb1      	ldr	r3, [pc, #708]	; (8007b84 <UART_SetConfig+0x2f4>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6812      	ldr	r2, [r2, #0]
 80078c6:	6939      	ldr	r1, [r7, #16]
 80078c8:	430b      	orrs	r3, r1
 80078ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	430a      	orrs	r2, r1
 8007904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a9f      	ldr	r2, [pc, #636]	; (8007b88 <UART_SetConfig+0x2f8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d121      	bne.n	8007954 <UART_SetConfig+0xc4>
 8007910:	4b9e      	ldr	r3, [pc, #632]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d816      	bhi.n	800794c <UART_SetConfig+0xbc>
 800791e:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <UART_SetConfig+0x94>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	08007935 	.word	0x08007935
 8007928:	08007941 	.word	0x08007941
 800792c:	0800793b 	.word	0x0800793b
 8007930:	08007947 	.word	0x08007947
 8007934:	2301      	movs	r3, #1
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e151      	b.n	8007bde <UART_SetConfig+0x34e>
 800793a:	2302      	movs	r3, #2
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e14e      	b.n	8007bde <UART_SetConfig+0x34e>
 8007940:	2304      	movs	r3, #4
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	e14b      	b.n	8007bde <UART_SetConfig+0x34e>
 8007946:	2308      	movs	r3, #8
 8007948:	77fb      	strb	r3, [r7, #31]
 800794a:	e148      	b.n	8007bde <UART_SetConfig+0x34e>
 800794c:	2310      	movs	r3, #16
 800794e:	77fb      	strb	r3, [r7, #31]
 8007950:	bf00      	nop
 8007952:	e144      	b.n	8007bde <UART_SetConfig+0x34e>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a8d      	ldr	r2, [pc, #564]	; (8007b90 <UART_SetConfig+0x300>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d134      	bne.n	80079c8 <UART_SetConfig+0x138>
 800795e:	4b8b      	ldr	r3, [pc, #556]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007964:	f003 030c 	and.w	r3, r3, #12
 8007968:	2b0c      	cmp	r3, #12
 800796a:	d829      	bhi.n	80079c0 <UART_SetConfig+0x130>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <UART_SetConfig+0xe4>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	080079a9 	.word	0x080079a9
 8007978:	080079c1 	.word	0x080079c1
 800797c:	080079c1 	.word	0x080079c1
 8007980:	080079c1 	.word	0x080079c1
 8007984:	080079b5 	.word	0x080079b5
 8007988:	080079c1 	.word	0x080079c1
 800798c:	080079c1 	.word	0x080079c1
 8007990:	080079c1 	.word	0x080079c1
 8007994:	080079af 	.word	0x080079af
 8007998:	080079c1 	.word	0x080079c1
 800799c:	080079c1 	.word	0x080079c1
 80079a0:	080079c1 	.word	0x080079c1
 80079a4:	080079bb 	.word	0x080079bb
 80079a8:	2300      	movs	r3, #0
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	e117      	b.n	8007bde <UART_SetConfig+0x34e>
 80079ae:	2302      	movs	r3, #2
 80079b0:	77fb      	strb	r3, [r7, #31]
 80079b2:	e114      	b.n	8007bde <UART_SetConfig+0x34e>
 80079b4:	2304      	movs	r3, #4
 80079b6:	77fb      	strb	r3, [r7, #31]
 80079b8:	e111      	b.n	8007bde <UART_SetConfig+0x34e>
 80079ba:	2308      	movs	r3, #8
 80079bc:	77fb      	strb	r3, [r7, #31]
 80079be:	e10e      	b.n	8007bde <UART_SetConfig+0x34e>
 80079c0:	2310      	movs	r3, #16
 80079c2:	77fb      	strb	r3, [r7, #31]
 80079c4:	bf00      	nop
 80079c6:	e10a      	b.n	8007bde <UART_SetConfig+0x34e>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a71      	ldr	r2, [pc, #452]	; (8007b94 <UART_SetConfig+0x304>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d120      	bne.n	8007a14 <UART_SetConfig+0x184>
 80079d2:	4b6e      	ldr	r3, [pc, #440]	; (8007b8c <UART_SetConfig+0x2fc>)
 80079d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079dc:	2b10      	cmp	r3, #16
 80079de:	d00f      	beq.n	8007a00 <UART_SetConfig+0x170>
 80079e0:	2b10      	cmp	r3, #16
 80079e2:	d802      	bhi.n	80079ea <UART_SetConfig+0x15a>
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <UART_SetConfig+0x164>
 80079e8:	e010      	b.n	8007a0c <UART_SetConfig+0x17c>
 80079ea:	2b20      	cmp	r3, #32
 80079ec:	d005      	beq.n	80079fa <UART_SetConfig+0x16a>
 80079ee:	2b30      	cmp	r3, #48	; 0x30
 80079f0:	d009      	beq.n	8007a06 <UART_SetConfig+0x176>
 80079f2:	e00b      	b.n	8007a0c <UART_SetConfig+0x17c>
 80079f4:	2300      	movs	r3, #0
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e0f1      	b.n	8007bde <UART_SetConfig+0x34e>
 80079fa:	2302      	movs	r3, #2
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e0ee      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a00:	2304      	movs	r3, #4
 8007a02:	77fb      	strb	r3, [r7, #31]
 8007a04:	e0eb      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a06:	2308      	movs	r3, #8
 8007a08:	77fb      	strb	r3, [r7, #31]
 8007a0a:	e0e8      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a0c:	2310      	movs	r3, #16
 8007a0e:	77fb      	strb	r3, [r7, #31]
 8007a10:	bf00      	nop
 8007a12:	e0e4      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a5f      	ldr	r2, [pc, #380]	; (8007b98 <UART_SetConfig+0x308>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d120      	bne.n	8007a60 <UART_SetConfig+0x1d0>
 8007a1e:	4b5b      	ldr	r3, [pc, #364]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a24:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a28:	2b40      	cmp	r3, #64	; 0x40
 8007a2a:	d00f      	beq.n	8007a4c <UART_SetConfig+0x1bc>
 8007a2c:	2b40      	cmp	r3, #64	; 0x40
 8007a2e:	d802      	bhi.n	8007a36 <UART_SetConfig+0x1a6>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d005      	beq.n	8007a40 <UART_SetConfig+0x1b0>
 8007a34:	e010      	b.n	8007a58 <UART_SetConfig+0x1c8>
 8007a36:	2b80      	cmp	r3, #128	; 0x80
 8007a38:	d005      	beq.n	8007a46 <UART_SetConfig+0x1b6>
 8007a3a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a3c:	d009      	beq.n	8007a52 <UART_SetConfig+0x1c2>
 8007a3e:	e00b      	b.n	8007a58 <UART_SetConfig+0x1c8>
 8007a40:	2300      	movs	r3, #0
 8007a42:	77fb      	strb	r3, [r7, #31]
 8007a44:	e0cb      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a46:	2302      	movs	r3, #2
 8007a48:	77fb      	strb	r3, [r7, #31]
 8007a4a:	e0c8      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a4c:	2304      	movs	r3, #4
 8007a4e:	77fb      	strb	r3, [r7, #31]
 8007a50:	e0c5      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a52:	2308      	movs	r3, #8
 8007a54:	77fb      	strb	r3, [r7, #31]
 8007a56:	e0c2      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a58:	2310      	movs	r3, #16
 8007a5a:	77fb      	strb	r3, [r7, #31]
 8007a5c:	bf00      	nop
 8007a5e:	e0be      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a4d      	ldr	r2, [pc, #308]	; (8007b9c <UART_SetConfig+0x30c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d124      	bne.n	8007ab4 <UART_SetConfig+0x224>
 8007a6a:	4b48      	ldr	r3, [pc, #288]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a78:	d012      	beq.n	8007aa0 <UART_SetConfig+0x210>
 8007a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7e:	d802      	bhi.n	8007a86 <UART_SetConfig+0x1f6>
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <UART_SetConfig+0x204>
 8007a84:	e012      	b.n	8007aac <UART_SetConfig+0x21c>
 8007a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a8a:	d006      	beq.n	8007a9a <UART_SetConfig+0x20a>
 8007a8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a90:	d009      	beq.n	8007aa6 <UART_SetConfig+0x216>
 8007a92:	e00b      	b.n	8007aac <UART_SetConfig+0x21c>
 8007a94:	2300      	movs	r3, #0
 8007a96:	77fb      	strb	r3, [r7, #31]
 8007a98:	e0a1      	b.n	8007bde <UART_SetConfig+0x34e>
 8007a9a:	2302      	movs	r3, #2
 8007a9c:	77fb      	strb	r3, [r7, #31]
 8007a9e:	e09e      	b.n	8007bde <UART_SetConfig+0x34e>
 8007aa0:	2304      	movs	r3, #4
 8007aa2:	77fb      	strb	r3, [r7, #31]
 8007aa4:	e09b      	b.n	8007bde <UART_SetConfig+0x34e>
 8007aa6:	2308      	movs	r3, #8
 8007aa8:	77fb      	strb	r3, [r7, #31]
 8007aaa:	e098      	b.n	8007bde <UART_SetConfig+0x34e>
 8007aac:	2310      	movs	r3, #16
 8007aae:	77fb      	strb	r3, [r7, #31]
 8007ab0:	bf00      	nop
 8007ab2:	e094      	b.n	8007bde <UART_SetConfig+0x34e>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a39      	ldr	r2, [pc, #228]	; (8007ba0 <UART_SetConfig+0x310>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d124      	bne.n	8007b08 <UART_SetConfig+0x278>
 8007abe:	4b33      	ldr	r3, [pc, #204]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007acc:	d012      	beq.n	8007af4 <UART_SetConfig+0x264>
 8007ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad2:	d802      	bhi.n	8007ada <UART_SetConfig+0x24a>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <UART_SetConfig+0x258>
 8007ad8:	e012      	b.n	8007b00 <UART_SetConfig+0x270>
 8007ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ade:	d006      	beq.n	8007aee <UART_SetConfig+0x25e>
 8007ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ae4:	d009      	beq.n	8007afa <UART_SetConfig+0x26a>
 8007ae6:	e00b      	b.n	8007b00 <UART_SetConfig+0x270>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e077      	b.n	8007bde <UART_SetConfig+0x34e>
 8007aee:	2302      	movs	r3, #2
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e074      	b.n	8007bde <UART_SetConfig+0x34e>
 8007af4:	2304      	movs	r3, #4
 8007af6:	77fb      	strb	r3, [r7, #31]
 8007af8:	e071      	b.n	8007bde <UART_SetConfig+0x34e>
 8007afa:	2308      	movs	r3, #8
 8007afc:	77fb      	strb	r3, [r7, #31]
 8007afe:	e06e      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b00:	2310      	movs	r3, #16
 8007b02:	77fb      	strb	r3, [r7, #31]
 8007b04:	bf00      	nop
 8007b06:	e06a      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a25      	ldr	r2, [pc, #148]	; (8007ba4 <UART_SetConfig+0x314>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d124      	bne.n	8007b5c <UART_SetConfig+0x2cc>
 8007b12:	4b1e      	ldr	r3, [pc, #120]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b20:	d012      	beq.n	8007b48 <UART_SetConfig+0x2b8>
 8007b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b26:	d802      	bhi.n	8007b2e <UART_SetConfig+0x29e>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d007      	beq.n	8007b3c <UART_SetConfig+0x2ac>
 8007b2c:	e012      	b.n	8007b54 <UART_SetConfig+0x2c4>
 8007b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b32:	d006      	beq.n	8007b42 <UART_SetConfig+0x2b2>
 8007b34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b38:	d009      	beq.n	8007b4e <UART_SetConfig+0x2be>
 8007b3a:	e00b      	b.n	8007b54 <UART_SetConfig+0x2c4>
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e04d      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b42:	2302      	movs	r3, #2
 8007b44:	77fb      	strb	r3, [r7, #31]
 8007b46:	e04a      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b48:	2304      	movs	r3, #4
 8007b4a:	77fb      	strb	r3, [r7, #31]
 8007b4c:	e047      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b4e:	2308      	movs	r3, #8
 8007b50:	77fb      	strb	r3, [r7, #31]
 8007b52:	e044      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b54:	2310      	movs	r3, #16
 8007b56:	77fb      	strb	r3, [r7, #31]
 8007b58:	bf00      	nop
 8007b5a:	e040      	b.n	8007bde <UART_SetConfig+0x34e>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a11      	ldr	r2, [pc, #68]	; (8007ba8 <UART_SetConfig+0x318>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d139      	bne.n	8007bda <UART_SetConfig+0x34a>
 8007b66:	4b09      	ldr	r3, [pc, #36]	; (8007b8c <UART_SetConfig+0x2fc>)
 8007b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b74:	d027      	beq.n	8007bc6 <UART_SetConfig+0x336>
 8007b76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b7a:	d817      	bhi.n	8007bac <UART_SetConfig+0x31c>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01c      	beq.n	8007bba <UART_SetConfig+0x32a>
 8007b80:	e027      	b.n	8007bd2 <UART_SetConfig+0x342>
 8007b82:	bf00      	nop
 8007b84:	efff69f3 	.word	0xefff69f3
 8007b88:	40011000 	.word	0x40011000
 8007b8c:	40023800 	.word	0x40023800
 8007b90:	40004400 	.word	0x40004400
 8007b94:	40004800 	.word	0x40004800
 8007b98:	40004c00 	.word	0x40004c00
 8007b9c:	40005000 	.word	0x40005000
 8007ba0:	40011400 	.word	0x40011400
 8007ba4:	40007800 	.word	0x40007800
 8007ba8:	40007c00 	.word	0x40007c00
 8007bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb0:	d006      	beq.n	8007bc0 <UART_SetConfig+0x330>
 8007bb2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bb6:	d009      	beq.n	8007bcc <UART_SetConfig+0x33c>
 8007bb8:	e00b      	b.n	8007bd2 <UART_SetConfig+0x342>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	77fb      	strb	r3, [r7, #31]
 8007bbe:	e00e      	b.n	8007bde <UART_SetConfig+0x34e>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e00b      	b.n	8007bde <UART_SetConfig+0x34e>
 8007bc6:	2304      	movs	r3, #4
 8007bc8:	77fb      	strb	r3, [r7, #31]
 8007bca:	e008      	b.n	8007bde <UART_SetConfig+0x34e>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	77fb      	strb	r3, [r7, #31]
 8007bd0:	e005      	b.n	8007bde <UART_SetConfig+0x34e>
 8007bd2:	2310      	movs	r3, #16
 8007bd4:	77fb      	strb	r3, [r7, #31]
 8007bd6:	bf00      	nop
 8007bd8:	e001      	b.n	8007bde <UART_SetConfig+0x34e>
 8007bda:	2310      	movs	r3, #16
 8007bdc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be6:	d17c      	bne.n	8007ce2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8007be8:	7ffb      	ldrb	r3, [r7, #31]
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d859      	bhi.n	8007ca2 <UART_SetConfig+0x412>
 8007bee:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <UART_SetConfig+0x364>)
 8007bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf4:	08007c19 	.word	0x08007c19
 8007bf8:	08007c37 	.word	0x08007c37
 8007bfc:	08007c55 	.word	0x08007c55
 8007c00:	08007ca3 	.word	0x08007ca3
 8007c04:	08007c6d 	.word	0x08007c6d
 8007c08:	08007ca3 	.word	0x08007ca3
 8007c0c:	08007ca3 	.word	0x08007ca3
 8007c10:	08007ca3 	.word	0x08007ca3
 8007c14:	08007c8b 	.word	0x08007c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007c18:	f7fd ff2c 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	005a      	lsls	r2, r3, #1
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	085b      	lsrs	r3, r3, #1
 8007c26:	441a      	add	r2, r3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	61bb      	str	r3, [r7, #24]
        break;
 8007c34:	e038      	b.n	8007ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007c36:	f7fd ff31 	bl	8005a9c <HAL_RCC_GetPCLK2Freq>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	005a      	lsls	r2, r3, #1
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	085b      	lsrs	r3, r3, #1
 8007c44:	441a      	add	r2, r3
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	61bb      	str	r3, [r7, #24]
        break;
 8007c52:	e029      	b.n	8007ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	085a      	lsrs	r2, r3, #1
 8007c5a:	4b5d      	ldr	r3, [pc, #372]	; (8007dd0 <UART_SetConfig+0x540>)
 8007c5c:	4413      	add	r3, r2
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6852      	ldr	r2, [r2, #4]
 8007c62:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	61bb      	str	r3, [r7, #24]
        break;
 8007c6a:	e01d      	b.n	8007ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007c6c:	f7fd fe44 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
 8007c70:	4603      	mov	r3, r0
 8007c72:	005a      	lsls	r2, r3, #1
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	441a      	add	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	61bb      	str	r3, [r7, #24]
        break;
 8007c88:	e00e      	b.n	8007ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	085b      	lsrs	r3, r3, #1
 8007c90:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	61bb      	str	r3, [r7, #24]
        break;
 8007ca0:	e002      	b.n	8007ca8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	75fb      	strb	r3, [r7, #23]
        break;
 8007ca6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ca8:	69bb      	ldr	r3, [r7, #24]
 8007caa:	2b0f      	cmp	r3, #15
 8007cac:	d916      	bls.n	8007cdc <UART_SetConfig+0x44c>
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb4:	d212      	bcs.n	8007cdc <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f023 030f 	bic.w	r3, r3, #15
 8007cbe:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	89fb      	ldrh	r3, [r7, #14]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	89fa      	ldrh	r2, [r7, #14]
 8007cd8:	60da      	str	r2, [r3, #12]
 8007cda:	e06e      	b.n	8007dba <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	75fb      	strb	r3, [r7, #23]
 8007ce0:	e06b      	b.n	8007dba <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8007ce2:	7ffb      	ldrb	r3, [r7, #31]
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d857      	bhi.n	8007d98 <UART_SetConfig+0x508>
 8007ce8:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <UART_SetConfig+0x460>)
 8007cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cee:	bf00      	nop
 8007cf0:	08007d15 	.word	0x08007d15
 8007cf4:	08007d31 	.word	0x08007d31
 8007cf8:	08007d4d 	.word	0x08007d4d
 8007cfc:	08007d99 	.word	0x08007d99
 8007d00:	08007d65 	.word	0x08007d65
 8007d04:	08007d99 	.word	0x08007d99
 8007d08:	08007d99 	.word	0x08007d99
 8007d0c:	08007d99 	.word	0x08007d99
 8007d10:	08007d81 	.word	0x08007d81
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007d14:	f7fd feae 	bl	8005a74 <HAL_RCC_GetPCLK1Freq>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	085b      	lsrs	r3, r3, #1
 8007d20:	441a      	add	r2, r3
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	61bb      	str	r3, [r7, #24]
        break;
 8007d2e:	e036      	b.n	8007d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007d30:	f7fd feb4 	bl	8005a9c <HAL_RCC_GetPCLK2Freq>
 8007d34:	4602      	mov	r2, r0
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	085b      	lsrs	r3, r3, #1
 8007d3c:	441a      	add	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	61bb      	str	r3, [r7, #24]
        break;
 8007d4a:	e028      	b.n	8007d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	085a      	lsrs	r2, r3, #1
 8007d52:	4b20      	ldr	r3, [pc, #128]	; (8007dd4 <UART_SetConfig+0x544>)
 8007d54:	4413      	add	r3, r2
 8007d56:	687a      	ldr	r2, [r7, #4]
 8007d58:	6852      	ldr	r2, [r2, #4]
 8007d5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	61bb      	str	r3, [r7, #24]
        break;
 8007d62:	e01c      	b.n	8007d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007d64:	f7fd fdc8 	bl	80058f8 <HAL_RCC_GetSysClockFreq>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	085b      	lsrs	r3, r3, #1
 8007d70:	441a      	add	r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	61bb      	str	r3, [r7, #24]
        break;
 8007d7e:	e00e      	b.n	8007d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	085b      	lsrs	r3, r3, #1
 8007d86:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	61bb      	str	r3, [r7, #24]
        break;
 8007d96:	e002      	b.n	8007d9e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	75fb      	strb	r3, [r7, #23]
        break;
 8007d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	2b0f      	cmp	r3, #15
 8007da2:	d908      	bls.n	8007db6 <UART_SetConfig+0x526>
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007daa:	d204      	bcs.n	8007db6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	60da      	str	r2, [r3, #12]
 8007db4:	e001      	b.n	8007dba <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3720      	adds	r7, #32
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	01e84800 	.word	0x01e84800
 8007dd4:	00f42400 	.word	0x00f42400

08007dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e06:	f003 0302 	and.w	r3, r3, #2
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e28:	f003 0304 	and.w	r3, r3, #4
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00a      	beq.n	8007e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4a:	f003 0308 	and.w	r3, r3, #8
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00a      	beq.n	8007e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	430a      	orrs	r2, r1
 8007e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	f003 0310 	and.w	r3, r3, #16
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	430a      	orrs	r2, r1
 8007e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	f003 0320 	and.w	r3, r3, #32
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d01a      	beq.n	8007eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ed6:	d10a      	bne.n	8007eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00a      	beq.n	8007f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	430a      	orrs	r2, r1
 8007f0e:	605a      	str	r2, [r3, #4]
  }
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2200      	movs	r2, #0
 8007f28:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007f2a:	f7fb fd57 	bl	80039dc <HAL_GetTick>
 8007f2e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0308 	and.w	r3, r3, #8
 8007f3a:	2b08      	cmp	r3, #8
 8007f3c:	d10e      	bne.n	8007f5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f814 	bl	8007f7a <UART_WaitOnFlagUntilTimeout>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e00a      	b.n	8007f72 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2220      	movs	r2, #32
 8007f66:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3710      	adds	r7, #16
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}

08007f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007f7a:	b580      	push	{r7, lr}
 8007f7c:	b084      	sub	sp, #16
 8007f7e:	af00      	add	r7, sp, #0
 8007f80:	60f8      	str	r0, [r7, #12]
 8007f82:	60b9      	str	r1, [r7, #8]
 8007f84:	603b      	str	r3, [r7, #0]
 8007f86:	4613      	mov	r3, r2
 8007f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f8a:	e02a      	b.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f92:	d026      	beq.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f94:	f7fb fd22 	bl	80039dc <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	69ba      	ldr	r2, [r7, #24]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d302      	bcc.n	8007faa <UART_WaitOnFlagUntilTimeout+0x30>
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d11b      	bne.n	8007fe2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007fb8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689a      	ldr	r2, [r3, #8]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0201 	bic.w	r2, r2, #1
 8007fc8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e00f      	b.n	8008002 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	4013      	ands	r3, r2
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	bf0c      	ite	eq
 8007ff2:	2301      	moveq	r3, #1
 8007ff4:	2300      	movne	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d0c5      	beq.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800800a:	b480      	push	{r7}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008020:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2220      	movs	r2, #32
 8008026:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800804a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	689a      	ldr	r2, [r3, #8]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f022 0201 	bic.w	r2, r2, #1
 800805a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008080:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	69db      	ldr	r3, [r3, #28]
 8008086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800808a:	d01e      	beq.n	80080ca <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2200      	movs	r2, #0
 8008090:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080a2:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689a      	ldr	r2, [r3, #8]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0201 	bic.w	r2, r2, #1
 80080b2:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080c2:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2220      	movs	r2, #32
 80080c8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff fbc2 	bl	8007854 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080d0:	bf00      	nop
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff fbbe 	bl	8007868 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008106:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800810c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008118:	2b80      	cmp	r3, #128	; 0x80
 800811a:	d109      	bne.n	8008130 <UART_DMAError+0x3c>
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	2b21      	cmp	r3, #33	; 0x21
 8008120:	d106      	bne.n	8008130 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	2200      	movs	r2, #0
 8008126:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800812a:	6978      	ldr	r0, [r7, #20]
 800812c:	f7ff ff6d 	bl	800800a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	d109      	bne.n	8008152 <UART_DMAError+0x5e>
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2b22      	cmp	r3, #34	; 0x22
 8008142:	d106      	bne.n	8008152 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	2200      	movs	r2, #0
 8008148:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800814c:	6978      	ldr	r0, [r7, #20]
 800814e:	f7ff ff71 	bl	8008034 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008156:	f043 0210 	orr.w	r2, r3, #16
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800815e:	6978      	ldr	r0, [r7, #20]
 8008160:	f7ff fb8c 	bl	800787c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008164:	bf00      	nop
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008178:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff fb76 	bl	800787c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081ae:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7ff fb3f 	bl	8007840 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
	...

080081cc <__errno>:
 80081cc:	4b01      	ldr	r3, [pc, #4]	; (80081d4 <__errno+0x8>)
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	2000001c 	.word	0x2000001c

080081d8 <__libc_init_array>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	4e0d      	ldr	r6, [pc, #52]	; (8008210 <__libc_init_array+0x38>)
 80081dc:	4c0d      	ldr	r4, [pc, #52]	; (8008214 <__libc_init_array+0x3c>)
 80081de:	1ba4      	subs	r4, r4, r6
 80081e0:	10a4      	asrs	r4, r4, #2
 80081e2:	2500      	movs	r5, #0
 80081e4:	42a5      	cmp	r5, r4
 80081e6:	d109      	bne.n	80081fc <__libc_init_array+0x24>
 80081e8:	4e0b      	ldr	r6, [pc, #44]	; (8008218 <__libc_init_array+0x40>)
 80081ea:	4c0c      	ldr	r4, [pc, #48]	; (800821c <__libc_init_array+0x44>)
 80081ec:	f000 fc26 	bl	8008a3c <_init>
 80081f0:	1ba4      	subs	r4, r4, r6
 80081f2:	10a4      	asrs	r4, r4, #2
 80081f4:	2500      	movs	r5, #0
 80081f6:	42a5      	cmp	r5, r4
 80081f8:	d105      	bne.n	8008206 <__libc_init_array+0x2e>
 80081fa:	bd70      	pop	{r4, r5, r6, pc}
 80081fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008200:	4798      	blx	r3
 8008202:	3501      	adds	r5, #1
 8008204:	e7ee      	b.n	80081e4 <__libc_init_array+0xc>
 8008206:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800820a:	4798      	blx	r3
 800820c:	3501      	adds	r5, #1
 800820e:	e7f2      	b.n	80081f6 <__libc_init_array+0x1e>
 8008210:	08008b44 	.word	0x08008b44
 8008214:	08008b44 	.word	0x08008b44
 8008218:	08008b44 	.word	0x08008b44
 800821c:	08008b48 	.word	0x08008b48

08008220 <memset>:
 8008220:	4402      	add	r2, r0
 8008222:	4603      	mov	r3, r0
 8008224:	4293      	cmp	r3, r2
 8008226:	d100      	bne.n	800822a <memset+0xa>
 8008228:	4770      	bx	lr
 800822a:	f803 1b01 	strb.w	r1, [r3], #1
 800822e:	e7f9      	b.n	8008224 <memset+0x4>

08008230 <siprintf>:
 8008230:	b40e      	push	{r1, r2, r3}
 8008232:	b500      	push	{lr}
 8008234:	b09c      	sub	sp, #112	; 0x70
 8008236:	ab1d      	add	r3, sp, #116	; 0x74
 8008238:	9002      	str	r0, [sp, #8]
 800823a:	9006      	str	r0, [sp, #24]
 800823c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008240:	4809      	ldr	r0, [pc, #36]	; (8008268 <siprintf+0x38>)
 8008242:	9107      	str	r1, [sp, #28]
 8008244:	9104      	str	r1, [sp, #16]
 8008246:	4909      	ldr	r1, [pc, #36]	; (800826c <siprintf+0x3c>)
 8008248:	f853 2b04 	ldr.w	r2, [r3], #4
 800824c:	9105      	str	r1, [sp, #20]
 800824e:	6800      	ldr	r0, [r0, #0]
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	a902      	add	r1, sp, #8
 8008254:	f000 f866 	bl	8008324 <_svfiprintf_r>
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	b01c      	add	sp, #112	; 0x70
 8008260:	f85d eb04 	ldr.w	lr, [sp], #4
 8008264:	b003      	add	sp, #12
 8008266:	4770      	bx	lr
 8008268:	2000001c 	.word	0x2000001c
 800826c:	ffff0208 	.word	0xffff0208

08008270 <__ssputs_r>:
 8008270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	688e      	ldr	r6, [r1, #8]
 8008276:	429e      	cmp	r6, r3
 8008278:	4682      	mov	sl, r0
 800827a:	460c      	mov	r4, r1
 800827c:	4690      	mov	r8, r2
 800827e:	4699      	mov	r9, r3
 8008280:	d837      	bhi.n	80082f2 <__ssputs_r+0x82>
 8008282:	898a      	ldrh	r2, [r1, #12]
 8008284:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008288:	d031      	beq.n	80082ee <__ssputs_r+0x7e>
 800828a:	6825      	ldr	r5, [r4, #0]
 800828c:	6909      	ldr	r1, [r1, #16]
 800828e:	1a6f      	subs	r7, r5, r1
 8008290:	6965      	ldr	r5, [r4, #20]
 8008292:	2302      	movs	r3, #2
 8008294:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008298:	fb95 f5f3 	sdiv	r5, r5, r3
 800829c:	f109 0301 	add.w	r3, r9, #1
 80082a0:	443b      	add	r3, r7
 80082a2:	429d      	cmp	r5, r3
 80082a4:	bf38      	it	cc
 80082a6:	461d      	movcc	r5, r3
 80082a8:	0553      	lsls	r3, r2, #21
 80082aa:	d530      	bpl.n	800830e <__ssputs_r+0x9e>
 80082ac:	4629      	mov	r1, r5
 80082ae:	f000 fb2b 	bl	8008908 <_malloc_r>
 80082b2:	4606      	mov	r6, r0
 80082b4:	b950      	cbnz	r0, 80082cc <__ssputs_r+0x5c>
 80082b6:	230c      	movs	r3, #12
 80082b8:	f8ca 3000 	str.w	r3, [sl]
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	f04f 30ff 	mov.w	r0, #4294967295
 80082c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082cc:	463a      	mov	r2, r7
 80082ce:	6921      	ldr	r1, [r4, #16]
 80082d0:	f000 faa8 	bl	8008824 <memcpy>
 80082d4:	89a3      	ldrh	r3, [r4, #12]
 80082d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082de:	81a3      	strh	r3, [r4, #12]
 80082e0:	6126      	str	r6, [r4, #16]
 80082e2:	6165      	str	r5, [r4, #20]
 80082e4:	443e      	add	r6, r7
 80082e6:	1bed      	subs	r5, r5, r7
 80082e8:	6026      	str	r6, [r4, #0]
 80082ea:	60a5      	str	r5, [r4, #8]
 80082ec:	464e      	mov	r6, r9
 80082ee:	454e      	cmp	r6, r9
 80082f0:	d900      	bls.n	80082f4 <__ssputs_r+0x84>
 80082f2:	464e      	mov	r6, r9
 80082f4:	4632      	mov	r2, r6
 80082f6:	4641      	mov	r1, r8
 80082f8:	6820      	ldr	r0, [r4, #0]
 80082fa:	f000 fa9e 	bl	800883a <memmove>
 80082fe:	68a3      	ldr	r3, [r4, #8]
 8008300:	1b9b      	subs	r3, r3, r6
 8008302:	60a3      	str	r3, [r4, #8]
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	441e      	add	r6, r3
 8008308:	6026      	str	r6, [r4, #0]
 800830a:	2000      	movs	r0, #0
 800830c:	e7dc      	b.n	80082c8 <__ssputs_r+0x58>
 800830e:	462a      	mov	r2, r5
 8008310:	f000 fb54 	bl	80089bc <_realloc_r>
 8008314:	4606      	mov	r6, r0
 8008316:	2800      	cmp	r0, #0
 8008318:	d1e2      	bne.n	80082e0 <__ssputs_r+0x70>
 800831a:	6921      	ldr	r1, [r4, #16]
 800831c:	4650      	mov	r0, sl
 800831e:	f000 faa5 	bl	800886c <_free_r>
 8008322:	e7c8      	b.n	80082b6 <__ssputs_r+0x46>

08008324 <_svfiprintf_r>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	461d      	mov	r5, r3
 800832a:	898b      	ldrh	r3, [r1, #12]
 800832c:	061f      	lsls	r7, r3, #24
 800832e:	b09d      	sub	sp, #116	; 0x74
 8008330:	4680      	mov	r8, r0
 8008332:	460c      	mov	r4, r1
 8008334:	4616      	mov	r6, r2
 8008336:	d50f      	bpl.n	8008358 <_svfiprintf_r+0x34>
 8008338:	690b      	ldr	r3, [r1, #16]
 800833a:	b96b      	cbnz	r3, 8008358 <_svfiprintf_r+0x34>
 800833c:	2140      	movs	r1, #64	; 0x40
 800833e:	f000 fae3 	bl	8008908 <_malloc_r>
 8008342:	6020      	str	r0, [r4, #0]
 8008344:	6120      	str	r0, [r4, #16]
 8008346:	b928      	cbnz	r0, 8008354 <_svfiprintf_r+0x30>
 8008348:	230c      	movs	r3, #12
 800834a:	f8c8 3000 	str.w	r3, [r8]
 800834e:	f04f 30ff 	mov.w	r0, #4294967295
 8008352:	e0c8      	b.n	80084e6 <_svfiprintf_r+0x1c2>
 8008354:	2340      	movs	r3, #64	; 0x40
 8008356:	6163      	str	r3, [r4, #20]
 8008358:	2300      	movs	r3, #0
 800835a:	9309      	str	r3, [sp, #36]	; 0x24
 800835c:	2320      	movs	r3, #32
 800835e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008362:	2330      	movs	r3, #48	; 0x30
 8008364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008368:	9503      	str	r5, [sp, #12]
 800836a:	f04f 0b01 	mov.w	fp, #1
 800836e:	4637      	mov	r7, r6
 8008370:	463d      	mov	r5, r7
 8008372:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008376:	b10b      	cbz	r3, 800837c <_svfiprintf_r+0x58>
 8008378:	2b25      	cmp	r3, #37	; 0x25
 800837a:	d13e      	bne.n	80083fa <_svfiprintf_r+0xd6>
 800837c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008380:	d00b      	beq.n	800839a <_svfiprintf_r+0x76>
 8008382:	4653      	mov	r3, sl
 8008384:	4632      	mov	r2, r6
 8008386:	4621      	mov	r1, r4
 8008388:	4640      	mov	r0, r8
 800838a:	f7ff ff71 	bl	8008270 <__ssputs_r>
 800838e:	3001      	adds	r0, #1
 8008390:	f000 80a4 	beq.w	80084dc <_svfiprintf_r+0x1b8>
 8008394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008396:	4453      	add	r3, sl
 8008398:	9309      	str	r3, [sp, #36]	; 0x24
 800839a:	783b      	ldrb	r3, [r7, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	f000 809d 	beq.w	80084dc <_svfiprintf_r+0x1b8>
 80083a2:	2300      	movs	r3, #0
 80083a4:	f04f 32ff 	mov.w	r2, #4294967295
 80083a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	9307      	str	r3, [sp, #28]
 80083b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083b4:	931a      	str	r3, [sp, #104]	; 0x68
 80083b6:	462f      	mov	r7, r5
 80083b8:	2205      	movs	r2, #5
 80083ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80083be:	4850      	ldr	r0, [pc, #320]	; (8008500 <_svfiprintf_r+0x1dc>)
 80083c0:	f7f7 ff3e 	bl	8000240 <memchr>
 80083c4:	9b04      	ldr	r3, [sp, #16]
 80083c6:	b9d0      	cbnz	r0, 80083fe <_svfiprintf_r+0xda>
 80083c8:	06d9      	lsls	r1, r3, #27
 80083ca:	bf44      	itt	mi
 80083cc:	2220      	movmi	r2, #32
 80083ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083d2:	071a      	lsls	r2, r3, #28
 80083d4:	bf44      	itt	mi
 80083d6:	222b      	movmi	r2, #43	; 0x2b
 80083d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083dc:	782a      	ldrb	r2, [r5, #0]
 80083de:	2a2a      	cmp	r2, #42	; 0x2a
 80083e0:	d015      	beq.n	800840e <_svfiprintf_r+0xea>
 80083e2:	9a07      	ldr	r2, [sp, #28]
 80083e4:	462f      	mov	r7, r5
 80083e6:	2000      	movs	r0, #0
 80083e8:	250a      	movs	r5, #10
 80083ea:	4639      	mov	r1, r7
 80083ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083f0:	3b30      	subs	r3, #48	; 0x30
 80083f2:	2b09      	cmp	r3, #9
 80083f4:	d94d      	bls.n	8008492 <_svfiprintf_r+0x16e>
 80083f6:	b1b8      	cbz	r0, 8008428 <_svfiprintf_r+0x104>
 80083f8:	e00f      	b.n	800841a <_svfiprintf_r+0xf6>
 80083fa:	462f      	mov	r7, r5
 80083fc:	e7b8      	b.n	8008370 <_svfiprintf_r+0x4c>
 80083fe:	4a40      	ldr	r2, [pc, #256]	; (8008500 <_svfiprintf_r+0x1dc>)
 8008400:	1a80      	subs	r0, r0, r2
 8008402:	fa0b f000 	lsl.w	r0, fp, r0
 8008406:	4318      	orrs	r0, r3
 8008408:	9004      	str	r0, [sp, #16]
 800840a:	463d      	mov	r5, r7
 800840c:	e7d3      	b.n	80083b6 <_svfiprintf_r+0x92>
 800840e:	9a03      	ldr	r2, [sp, #12]
 8008410:	1d11      	adds	r1, r2, #4
 8008412:	6812      	ldr	r2, [r2, #0]
 8008414:	9103      	str	r1, [sp, #12]
 8008416:	2a00      	cmp	r2, #0
 8008418:	db01      	blt.n	800841e <_svfiprintf_r+0xfa>
 800841a:	9207      	str	r2, [sp, #28]
 800841c:	e004      	b.n	8008428 <_svfiprintf_r+0x104>
 800841e:	4252      	negs	r2, r2
 8008420:	f043 0302 	orr.w	r3, r3, #2
 8008424:	9207      	str	r2, [sp, #28]
 8008426:	9304      	str	r3, [sp, #16]
 8008428:	783b      	ldrb	r3, [r7, #0]
 800842a:	2b2e      	cmp	r3, #46	; 0x2e
 800842c:	d10c      	bne.n	8008448 <_svfiprintf_r+0x124>
 800842e:	787b      	ldrb	r3, [r7, #1]
 8008430:	2b2a      	cmp	r3, #42	; 0x2a
 8008432:	d133      	bne.n	800849c <_svfiprintf_r+0x178>
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	1d1a      	adds	r2, r3, #4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	9203      	str	r2, [sp, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	bfb8      	it	lt
 8008440:	f04f 33ff 	movlt.w	r3, #4294967295
 8008444:	3702      	adds	r7, #2
 8008446:	9305      	str	r3, [sp, #20]
 8008448:	4d2e      	ldr	r5, [pc, #184]	; (8008504 <_svfiprintf_r+0x1e0>)
 800844a:	7839      	ldrb	r1, [r7, #0]
 800844c:	2203      	movs	r2, #3
 800844e:	4628      	mov	r0, r5
 8008450:	f7f7 fef6 	bl	8000240 <memchr>
 8008454:	b138      	cbz	r0, 8008466 <_svfiprintf_r+0x142>
 8008456:	2340      	movs	r3, #64	; 0x40
 8008458:	1b40      	subs	r0, r0, r5
 800845a:	fa03 f000 	lsl.w	r0, r3, r0
 800845e:	9b04      	ldr	r3, [sp, #16]
 8008460:	4303      	orrs	r3, r0
 8008462:	3701      	adds	r7, #1
 8008464:	9304      	str	r3, [sp, #16]
 8008466:	7839      	ldrb	r1, [r7, #0]
 8008468:	4827      	ldr	r0, [pc, #156]	; (8008508 <_svfiprintf_r+0x1e4>)
 800846a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800846e:	2206      	movs	r2, #6
 8008470:	1c7e      	adds	r6, r7, #1
 8008472:	f7f7 fee5 	bl	8000240 <memchr>
 8008476:	2800      	cmp	r0, #0
 8008478:	d038      	beq.n	80084ec <_svfiprintf_r+0x1c8>
 800847a:	4b24      	ldr	r3, [pc, #144]	; (800850c <_svfiprintf_r+0x1e8>)
 800847c:	bb13      	cbnz	r3, 80084c4 <_svfiprintf_r+0x1a0>
 800847e:	9b03      	ldr	r3, [sp, #12]
 8008480:	3307      	adds	r3, #7
 8008482:	f023 0307 	bic.w	r3, r3, #7
 8008486:	3308      	adds	r3, #8
 8008488:	9303      	str	r3, [sp, #12]
 800848a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800848c:	444b      	add	r3, r9
 800848e:	9309      	str	r3, [sp, #36]	; 0x24
 8008490:	e76d      	b.n	800836e <_svfiprintf_r+0x4a>
 8008492:	fb05 3202 	mla	r2, r5, r2, r3
 8008496:	2001      	movs	r0, #1
 8008498:	460f      	mov	r7, r1
 800849a:	e7a6      	b.n	80083ea <_svfiprintf_r+0xc6>
 800849c:	2300      	movs	r3, #0
 800849e:	3701      	adds	r7, #1
 80084a0:	9305      	str	r3, [sp, #20]
 80084a2:	4619      	mov	r1, r3
 80084a4:	250a      	movs	r5, #10
 80084a6:	4638      	mov	r0, r7
 80084a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084ac:	3a30      	subs	r2, #48	; 0x30
 80084ae:	2a09      	cmp	r2, #9
 80084b0:	d903      	bls.n	80084ba <_svfiprintf_r+0x196>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0c8      	beq.n	8008448 <_svfiprintf_r+0x124>
 80084b6:	9105      	str	r1, [sp, #20]
 80084b8:	e7c6      	b.n	8008448 <_svfiprintf_r+0x124>
 80084ba:	fb05 2101 	mla	r1, r5, r1, r2
 80084be:	2301      	movs	r3, #1
 80084c0:	4607      	mov	r7, r0
 80084c2:	e7f0      	b.n	80084a6 <_svfiprintf_r+0x182>
 80084c4:	ab03      	add	r3, sp, #12
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	4622      	mov	r2, r4
 80084ca:	4b11      	ldr	r3, [pc, #68]	; (8008510 <_svfiprintf_r+0x1ec>)
 80084cc:	a904      	add	r1, sp, #16
 80084ce:	4640      	mov	r0, r8
 80084d0:	f3af 8000 	nop.w
 80084d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084d8:	4681      	mov	r9, r0
 80084da:	d1d6      	bne.n	800848a <_svfiprintf_r+0x166>
 80084dc:	89a3      	ldrh	r3, [r4, #12]
 80084de:	065b      	lsls	r3, r3, #25
 80084e0:	f53f af35 	bmi.w	800834e <_svfiprintf_r+0x2a>
 80084e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084e6:	b01d      	add	sp, #116	; 0x74
 80084e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084ec:	ab03      	add	r3, sp, #12
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	4622      	mov	r2, r4
 80084f2:	4b07      	ldr	r3, [pc, #28]	; (8008510 <_svfiprintf_r+0x1ec>)
 80084f4:	a904      	add	r1, sp, #16
 80084f6:	4640      	mov	r0, r8
 80084f8:	f000 f882 	bl	8008600 <_printf_i>
 80084fc:	e7ea      	b.n	80084d4 <_svfiprintf_r+0x1b0>
 80084fe:	bf00      	nop
 8008500:	08008b08 	.word	0x08008b08
 8008504:	08008b0e 	.word	0x08008b0e
 8008508:	08008b12 	.word	0x08008b12
 800850c:	00000000 	.word	0x00000000
 8008510:	08008271 	.word	0x08008271

08008514 <_printf_common>:
 8008514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008518:	4691      	mov	r9, r2
 800851a:	461f      	mov	r7, r3
 800851c:	688a      	ldr	r2, [r1, #8]
 800851e:	690b      	ldr	r3, [r1, #16]
 8008520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008524:	4293      	cmp	r3, r2
 8008526:	bfb8      	it	lt
 8008528:	4613      	movlt	r3, r2
 800852a:	f8c9 3000 	str.w	r3, [r9]
 800852e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008532:	4606      	mov	r6, r0
 8008534:	460c      	mov	r4, r1
 8008536:	b112      	cbz	r2, 800853e <_printf_common+0x2a>
 8008538:	3301      	adds	r3, #1
 800853a:	f8c9 3000 	str.w	r3, [r9]
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	0699      	lsls	r1, r3, #26
 8008542:	bf42      	ittt	mi
 8008544:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008548:	3302      	addmi	r3, #2
 800854a:	f8c9 3000 	strmi.w	r3, [r9]
 800854e:	6825      	ldr	r5, [r4, #0]
 8008550:	f015 0506 	ands.w	r5, r5, #6
 8008554:	d107      	bne.n	8008566 <_printf_common+0x52>
 8008556:	f104 0a19 	add.w	sl, r4, #25
 800855a:	68e3      	ldr	r3, [r4, #12]
 800855c:	f8d9 2000 	ldr.w	r2, [r9]
 8008560:	1a9b      	subs	r3, r3, r2
 8008562:	42ab      	cmp	r3, r5
 8008564:	dc28      	bgt.n	80085b8 <_printf_common+0xa4>
 8008566:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800856a:	6822      	ldr	r2, [r4, #0]
 800856c:	3300      	adds	r3, #0
 800856e:	bf18      	it	ne
 8008570:	2301      	movne	r3, #1
 8008572:	0692      	lsls	r2, r2, #26
 8008574:	d42d      	bmi.n	80085d2 <_printf_common+0xbe>
 8008576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800857a:	4639      	mov	r1, r7
 800857c:	4630      	mov	r0, r6
 800857e:	47c0      	blx	r8
 8008580:	3001      	adds	r0, #1
 8008582:	d020      	beq.n	80085c6 <_printf_common+0xb2>
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	68e5      	ldr	r5, [r4, #12]
 8008588:	f8d9 2000 	ldr.w	r2, [r9]
 800858c:	f003 0306 	and.w	r3, r3, #6
 8008590:	2b04      	cmp	r3, #4
 8008592:	bf08      	it	eq
 8008594:	1aad      	subeq	r5, r5, r2
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	6922      	ldr	r2, [r4, #16]
 800859a:	bf0c      	ite	eq
 800859c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085a0:	2500      	movne	r5, #0
 80085a2:	4293      	cmp	r3, r2
 80085a4:	bfc4      	itt	gt
 80085a6:	1a9b      	subgt	r3, r3, r2
 80085a8:	18ed      	addgt	r5, r5, r3
 80085aa:	f04f 0900 	mov.w	r9, #0
 80085ae:	341a      	adds	r4, #26
 80085b0:	454d      	cmp	r5, r9
 80085b2:	d11a      	bne.n	80085ea <_printf_common+0xd6>
 80085b4:	2000      	movs	r0, #0
 80085b6:	e008      	b.n	80085ca <_printf_common+0xb6>
 80085b8:	2301      	movs	r3, #1
 80085ba:	4652      	mov	r2, sl
 80085bc:	4639      	mov	r1, r7
 80085be:	4630      	mov	r0, r6
 80085c0:	47c0      	blx	r8
 80085c2:	3001      	adds	r0, #1
 80085c4:	d103      	bne.n	80085ce <_printf_common+0xba>
 80085c6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ce:	3501      	adds	r5, #1
 80085d0:	e7c3      	b.n	800855a <_printf_common+0x46>
 80085d2:	18e1      	adds	r1, r4, r3
 80085d4:	1c5a      	adds	r2, r3, #1
 80085d6:	2030      	movs	r0, #48	; 0x30
 80085d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085dc:	4422      	add	r2, r4
 80085de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085e6:	3302      	adds	r3, #2
 80085e8:	e7c5      	b.n	8008576 <_printf_common+0x62>
 80085ea:	2301      	movs	r3, #1
 80085ec:	4622      	mov	r2, r4
 80085ee:	4639      	mov	r1, r7
 80085f0:	4630      	mov	r0, r6
 80085f2:	47c0      	blx	r8
 80085f4:	3001      	adds	r0, #1
 80085f6:	d0e6      	beq.n	80085c6 <_printf_common+0xb2>
 80085f8:	f109 0901 	add.w	r9, r9, #1
 80085fc:	e7d8      	b.n	80085b0 <_printf_common+0x9c>
	...

08008600 <_printf_i>:
 8008600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008604:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008608:	460c      	mov	r4, r1
 800860a:	7e09      	ldrb	r1, [r1, #24]
 800860c:	b085      	sub	sp, #20
 800860e:	296e      	cmp	r1, #110	; 0x6e
 8008610:	4617      	mov	r7, r2
 8008612:	4606      	mov	r6, r0
 8008614:	4698      	mov	r8, r3
 8008616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008618:	f000 80b3 	beq.w	8008782 <_printf_i+0x182>
 800861c:	d822      	bhi.n	8008664 <_printf_i+0x64>
 800861e:	2963      	cmp	r1, #99	; 0x63
 8008620:	d036      	beq.n	8008690 <_printf_i+0x90>
 8008622:	d80a      	bhi.n	800863a <_printf_i+0x3a>
 8008624:	2900      	cmp	r1, #0
 8008626:	f000 80b9 	beq.w	800879c <_printf_i+0x19c>
 800862a:	2958      	cmp	r1, #88	; 0x58
 800862c:	f000 8083 	beq.w	8008736 <_printf_i+0x136>
 8008630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008634:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008638:	e032      	b.n	80086a0 <_printf_i+0xa0>
 800863a:	2964      	cmp	r1, #100	; 0x64
 800863c:	d001      	beq.n	8008642 <_printf_i+0x42>
 800863e:	2969      	cmp	r1, #105	; 0x69
 8008640:	d1f6      	bne.n	8008630 <_printf_i+0x30>
 8008642:	6820      	ldr	r0, [r4, #0]
 8008644:	6813      	ldr	r3, [r2, #0]
 8008646:	0605      	lsls	r5, r0, #24
 8008648:	f103 0104 	add.w	r1, r3, #4
 800864c:	d52a      	bpl.n	80086a4 <_printf_i+0xa4>
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6011      	str	r1, [r2, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	da03      	bge.n	800865e <_printf_i+0x5e>
 8008656:	222d      	movs	r2, #45	; 0x2d
 8008658:	425b      	negs	r3, r3
 800865a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800865e:	486f      	ldr	r0, [pc, #444]	; (800881c <_printf_i+0x21c>)
 8008660:	220a      	movs	r2, #10
 8008662:	e039      	b.n	80086d8 <_printf_i+0xd8>
 8008664:	2973      	cmp	r1, #115	; 0x73
 8008666:	f000 809d 	beq.w	80087a4 <_printf_i+0x1a4>
 800866a:	d808      	bhi.n	800867e <_printf_i+0x7e>
 800866c:	296f      	cmp	r1, #111	; 0x6f
 800866e:	d020      	beq.n	80086b2 <_printf_i+0xb2>
 8008670:	2970      	cmp	r1, #112	; 0x70
 8008672:	d1dd      	bne.n	8008630 <_printf_i+0x30>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	f043 0320 	orr.w	r3, r3, #32
 800867a:	6023      	str	r3, [r4, #0]
 800867c:	e003      	b.n	8008686 <_printf_i+0x86>
 800867e:	2975      	cmp	r1, #117	; 0x75
 8008680:	d017      	beq.n	80086b2 <_printf_i+0xb2>
 8008682:	2978      	cmp	r1, #120	; 0x78
 8008684:	d1d4      	bne.n	8008630 <_printf_i+0x30>
 8008686:	2378      	movs	r3, #120	; 0x78
 8008688:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800868c:	4864      	ldr	r0, [pc, #400]	; (8008820 <_printf_i+0x220>)
 800868e:	e055      	b.n	800873c <_printf_i+0x13c>
 8008690:	6813      	ldr	r3, [r2, #0]
 8008692:	1d19      	adds	r1, r3, #4
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6011      	str	r1, [r2, #0]
 8008698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800869c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086a0:	2301      	movs	r3, #1
 80086a2:	e08c      	b.n	80087be <_printf_i+0x1be>
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6011      	str	r1, [r2, #0]
 80086a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086ac:	bf18      	it	ne
 80086ae:	b21b      	sxthne	r3, r3
 80086b0:	e7cf      	b.n	8008652 <_printf_i+0x52>
 80086b2:	6813      	ldr	r3, [r2, #0]
 80086b4:	6825      	ldr	r5, [r4, #0]
 80086b6:	1d18      	adds	r0, r3, #4
 80086b8:	6010      	str	r0, [r2, #0]
 80086ba:	0628      	lsls	r0, r5, #24
 80086bc:	d501      	bpl.n	80086c2 <_printf_i+0xc2>
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	e002      	b.n	80086c8 <_printf_i+0xc8>
 80086c2:	0668      	lsls	r0, r5, #25
 80086c4:	d5fb      	bpl.n	80086be <_printf_i+0xbe>
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	4854      	ldr	r0, [pc, #336]	; (800881c <_printf_i+0x21c>)
 80086ca:	296f      	cmp	r1, #111	; 0x6f
 80086cc:	bf14      	ite	ne
 80086ce:	220a      	movne	r2, #10
 80086d0:	2208      	moveq	r2, #8
 80086d2:	2100      	movs	r1, #0
 80086d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086d8:	6865      	ldr	r5, [r4, #4]
 80086da:	60a5      	str	r5, [r4, #8]
 80086dc:	2d00      	cmp	r5, #0
 80086de:	f2c0 8095 	blt.w	800880c <_printf_i+0x20c>
 80086e2:	6821      	ldr	r1, [r4, #0]
 80086e4:	f021 0104 	bic.w	r1, r1, #4
 80086e8:	6021      	str	r1, [r4, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d13d      	bne.n	800876a <_printf_i+0x16a>
 80086ee:	2d00      	cmp	r5, #0
 80086f0:	f040 808e 	bne.w	8008810 <_printf_i+0x210>
 80086f4:	4665      	mov	r5, ip
 80086f6:	2a08      	cmp	r2, #8
 80086f8:	d10b      	bne.n	8008712 <_printf_i+0x112>
 80086fa:	6823      	ldr	r3, [r4, #0]
 80086fc:	07db      	lsls	r3, r3, #31
 80086fe:	d508      	bpl.n	8008712 <_printf_i+0x112>
 8008700:	6923      	ldr	r3, [r4, #16]
 8008702:	6862      	ldr	r2, [r4, #4]
 8008704:	429a      	cmp	r2, r3
 8008706:	bfde      	ittt	le
 8008708:	2330      	movle	r3, #48	; 0x30
 800870a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800870e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008712:	ebac 0305 	sub.w	r3, ip, r5
 8008716:	6123      	str	r3, [r4, #16]
 8008718:	f8cd 8000 	str.w	r8, [sp]
 800871c:	463b      	mov	r3, r7
 800871e:	aa03      	add	r2, sp, #12
 8008720:	4621      	mov	r1, r4
 8008722:	4630      	mov	r0, r6
 8008724:	f7ff fef6 	bl	8008514 <_printf_common>
 8008728:	3001      	adds	r0, #1
 800872a:	d14d      	bne.n	80087c8 <_printf_i+0x1c8>
 800872c:	f04f 30ff 	mov.w	r0, #4294967295
 8008730:	b005      	add	sp, #20
 8008732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008736:	4839      	ldr	r0, [pc, #228]	; (800881c <_printf_i+0x21c>)
 8008738:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800873c:	6813      	ldr	r3, [r2, #0]
 800873e:	6821      	ldr	r1, [r4, #0]
 8008740:	1d1d      	adds	r5, r3, #4
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6015      	str	r5, [r2, #0]
 8008746:	060a      	lsls	r2, r1, #24
 8008748:	d50b      	bpl.n	8008762 <_printf_i+0x162>
 800874a:	07ca      	lsls	r2, r1, #31
 800874c:	bf44      	itt	mi
 800874e:	f041 0120 	orrmi.w	r1, r1, #32
 8008752:	6021      	strmi	r1, [r4, #0]
 8008754:	b91b      	cbnz	r3, 800875e <_printf_i+0x15e>
 8008756:	6822      	ldr	r2, [r4, #0]
 8008758:	f022 0220 	bic.w	r2, r2, #32
 800875c:	6022      	str	r2, [r4, #0]
 800875e:	2210      	movs	r2, #16
 8008760:	e7b7      	b.n	80086d2 <_printf_i+0xd2>
 8008762:	064d      	lsls	r5, r1, #25
 8008764:	bf48      	it	mi
 8008766:	b29b      	uxthmi	r3, r3
 8008768:	e7ef      	b.n	800874a <_printf_i+0x14a>
 800876a:	4665      	mov	r5, ip
 800876c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008770:	fb02 3311 	mls	r3, r2, r1, r3
 8008774:	5cc3      	ldrb	r3, [r0, r3]
 8008776:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800877a:	460b      	mov	r3, r1
 800877c:	2900      	cmp	r1, #0
 800877e:	d1f5      	bne.n	800876c <_printf_i+0x16c>
 8008780:	e7b9      	b.n	80086f6 <_printf_i+0xf6>
 8008782:	6813      	ldr	r3, [r2, #0]
 8008784:	6825      	ldr	r5, [r4, #0]
 8008786:	6961      	ldr	r1, [r4, #20]
 8008788:	1d18      	adds	r0, r3, #4
 800878a:	6010      	str	r0, [r2, #0]
 800878c:	0628      	lsls	r0, r5, #24
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	d501      	bpl.n	8008796 <_printf_i+0x196>
 8008792:	6019      	str	r1, [r3, #0]
 8008794:	e002      	b.n	800879c <_printf_i+0x19c>
 8008796:	066a      	lsls	r2, r5, #25
 8008798:	d5fb      	bpl.n	8008792 <_printf_i+0x192>
 800879a:	8019      	strh	r1, [r3, #0]
 800879c:	2300      	movs	r3, #0
 800879e:	6123      	str	r3, [r4, #16]
 80087a0:	4665      	mov	r5, ip
 80087a2:	e7b9      	b.n	8008718 <_printf_i+0x118>
 80087a4:	6813      	ldr	r3, [r2, #0]
 80087a6:	1d19      	adds	r1, r3, #4
 80087a8:	6011      	str	r1, [r2, #0]
 80087aa:	681d      	ldr	r5, [r3, #0]
 80087ac:	6862      	ldr	r2, [r4, #4]
 80087ae:	2100      	movs	r1, #0
 80087b0:	4628      	mov	r0, r5
 80087b2:	f7f7 fd45 	bl	8000240 <memchr>
 80087b6:	b108      	cbz	r0, 80087bc <_printf_i+0x1bc>
 80087b8:	1b40      	subs	r0, r0, r5
 80087ba:	6060      	str	r0, [r4, #4]
 80087bc:	6863      	ldr	r3, [r4, #4]
 80087be:	6123      	str	r3, [r4, #16]
 80087c0:	2300      	movs	r3, #0
 80087c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c6:	e7a7      	b.n	8008718 <_printf_i+0x118>
 80087c8:	6923      	ldr	r3, [r4, #16]
 80087ca:	462a      	mov	r2, r5
 80087cc:	4639      	mov	r1, r7
 80087ce:	4630      	mov	r0, r6
 80087d0:	47c0      	blx	r8
 80087d2:	3001      	adds	r0, #1
 80087d4:	d0aa      	beq.n	800872c <_printf_i+0x12c>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	079b      	lsls	r3, r3, #30
 80087da:	d413      	bmi.n	8008804 <_printf_i+0x204>
 80087dc:	68e0      	ldr	r0, [r4, #12]
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	4298      	cmp	r0, r3
 80087e2:	bfb8      	it	lt
 80087e4:	4618      	movlt	r0, r3
 80087e6:	e7a3      	b.n	8008730 <_printf_i+0x130>
 80087e8:	2301      	movs	r3, #1
 80087ea:	464a      	mov	r2, r9
 80087ec:	4639      	mov	r1, r7
 80087ee:	4630      	mov	r0, r6
 80087f0:	47c0      	blx	r8
 80087f2:	3001      	adds	r0, #1
 80087f4:	d09a      	beq.n	800872c <_printf_i+0x12c>
 80087f6:	3501      	adds	r5, #1
 80087f8:	68e3      	ldr	r3, [r4, #12]
 80087fa:	9a03      	ldr	r2, [sp, #12]
 80087fc:	1a9b      	subs	r3, r3, r2
 80087fe:	42ab      	cmp	r3, r5
 8008800:	dcf2      	bgt.n	80087e8 <_printf_i+0x1e8>
 8008802:	e7eb      	b.n	80087dc <_printf_i+0x1dc>
 8008804:	2500      	movs	r5, #0
 8008806:	f104 0919 	add.w	r9, r4, #25
 800880a:	e7f5      	b.n	80087f8 <_printf_i+0x1f8>
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1ac      	bne.n	800876a <_printf_i+0x16a>
 8008810:	7803      	ldrb	r3, [r0, #0]
 8008812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008816:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800881a:	e76c      	b.n	80086f6 <_printf_i+0xf6>
 800881c:	08008b19 	.word	0x08008b19
 8008820:	08008b2a 	.word	0x08008b2a

08008824 <memcpy>:
 8008824:	b510      	push	{r4, lr}
 8008826:	1e43      	subs	r3, r0, #1
 8008828:	440a      	add	r2, r1
 800882a:	4291      	cmp	r1, r2
 800882c:	d100      	bne.n	8008830 <memcpy+0xc>
 800882e:	bd10      	pop	{r4, pc}
 8008830:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008834:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008838:	e7f7      	b.n	800882a <memcpy+0x6>

0800883a <memmove>:
 800883a:	4288      	cmp	r0, r1
 800883c:	b510      	push	{r4, lr}
 800883e:	eb01 0302 	add.w	r3, r1, r2
 8008842:	d807      	bhi.n	8008854 <memmove+0x1a>
 8008844:	1e42      	subs	r2, r0, #1
 8008846:	4299      	cmp	r1, r3
 8008848:	d00a      	beq.n	8008860 <memmove+0x26>
 800884a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800884e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008852:	e7f8      	b.n	8008846 <memmove+0xc>
 8008854:	4283      	cmp	r3, r0
 8008856:	d9f5      	bls.n	8008844 <memmove+0xa>
 8008858:	1881      	adds	r1, r0, r2
 800885a:	1ad2      	subs	r2, r2, r3
 800885c:	42d3      	cmn	r3, r2
 800885e:	d100      	bne.n	8008862 <memmove+0x28>
 8008860:	bd10      	pop	{r4, pc}
 8008862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008866:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800886a:	e7f7      	b.n	800885c <memmove+0x22>

0800886c <_free_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4605      	mov	r5, r0
 8008870:	2900      	cmp	r1, #0
 8008872:	d045      	beq.n	8008900 <_free_r+0x94>
 8008874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008878:	1f0c      	subs	r4, r1, #4
 800887a:	2b00      	cmp	r3, #0
 800887c:	bfb8      	it	lt
 800887e:	18e4      	addlt	r4, r4, r3
 8008880:	f000 f8d2 	bl	8008a28 <__malloc_lock>
 8008884:	4a1f      	ldr	r2, [pc, #124]	; (8008904 <_free_r+0x98>)
 8008886:	6813      	ldr	r3, [r2, #0]
 8008888:	4610      	mov	r0, r2
 800888a:	b933      	cbnz	r3, 800889a <_free_r+0x2e>
 800888c:	6063      	str	r3, [r4, #4]
 800888e:	6014      	str	r4, [r2, #0]
 8008890:	4628      	mov	r0, r5
 8008892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008896:	f000 b8c8 	b.w	8008a2a <__malloc_unlock>
 800889a:	42a3      	cmp	r3, r4
 800889c:	d90c      	bls.n	80088b8 <_free_r+0x4c>
 800889e:	6821      	ldr	r1, [r4, #0]
 80088a0:	1862      	adds	r2, r4, r1
 80088a2:	4293      	cmp	r3, r2
 80088a4:	bf04      	itt	eq
 80088a6:	681a      	ldreq	r2, [r3, #0]
 80088a8:	685b      	ldreq	r3, [r3, #4]
 80088aa:	6063      	str	r3, [r4, #4]
 80088ac:	bf04      	itt	eq
 80088ae:	1852      	addeq	r2, r2, r1
 80088b0:	6022      	streq	r2, [r4, #0]
 80088b2:	6004      	str	r4, [r0, #0]
 80088b4:	e7ec      	b.n	8008890 <_free_r+0x24>
 80088b6:	4613      	mov	r3, r2
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	b10a      	cbz	r2, 80088c0 <_free_r+0x54>
 80088bc:	42a2      	cmp	r2, r4
 80088be:	d9fa      	bls.n	80088b6 <_free_r+0x4a>
 80088c0:	6819      	ldr	r1, [r3, #0]
 80088c2:	1858      	adds	r0, r3, r1
 80088c4:	42a0      	cmp	r0, r4
 80088c6:	d10b      	bne.n	80088e0 <_free_r+0x74>
 80088c8:	6820      	ldr	r0, [r4, #0]
 80088ca:	4401      	add	r1, r0
 80088cc:	1858      	adds	r0, r3, r1
 80088ce:	4282      	cmp	r2, r0
 80088d0:	6019      	str	r1, [r3, #0]
 80088d2:	d1dd      	bne.n	8008890 <_free_r+0x24>
 80088d4:	6810      	ldr	r0, [r2, #0]
 80088d6:	6852      	ldr	r2, [r2, #4]
 80088d8:	605a      	str	r2, [r3, #4]
 80088da:	4401      	add	r1, r0
 80088dc:	6019      	str	r1, [r3, #0]
 80088de:	e7d7      	b.n	8008890 <_free_r+0x24>
 80088e0:	d902      	bls.n	80088e8 <_free_r+0x7c>
 80088e2:	230c      	movs	r3, #12
 80088e4:	602b      	str	r3, [r5, #0]
 80088e6:	e7d3      	b.n	8008890 <_free_r+0x24>
 80088e8:	6820      	ldr	r0, [r4, #0]
 80088ea:	1821      	adds	r1, r4, r0
 80088ec:	428a      	cmp	r2, r1
 80088ee:	bf04      	itt	eq
 80088f0:	6811      	ldreq	r1, [r2, #0]
 80088f2:	6852      	ldreq	r2, [r2, #4]
 80088f4:	6062      	str	r2, [r4, #4]
 80088f6:	bf04      	itt	eq
 80088f8:	1809      	addeq	r1, r1, r0
 80088fa:	6021      	streq	r1, [r4, #0]
 80088fc:	605c      	str	r4, [r3, #4]
 80088fe:	e7c7      	b.n	8008890 <_free_r+0x24>
 8008900:	bd38      	pop	{r3, r4, r5, pc}
 8008902:	bf00      	nop
 8008904:	200000b0 	.word	0x200000b0

08008908 <_malloc_r>:
 8008908:	b570      	push	{r4, r5, r6, lr}
 800890a:	1ccd      	adds	r5, r1, #3
 800890c:	f025 0503 	bic.w	r5, r5, #3
 8008910:	3508      	adds	r5, #8
 8008912:	2d0c      	cmp	r5, #12
 8008914:	bf38      	it	cc
 8008916:	250c      	movcc	r5, #12
 8008918:	2d00      	cmp	r5, #0
 800891a:	4606      	mov	r6, r0
 800891c:	db01      	blt.n	8008922 <_malloc_r+0x1a>
 800891e:	42a9      	cmp	r1, r5
 8008920:	d903      	bls.n	800892a <_malloc_r+0x22>
 8008922:	230c      	movs	r3, #12
 8008924:	6033      	str	r3, [r6, #0]
 8008926:	2000      	movs	r0, #0
 8008928:	bd70      	pop	{r4, r5, r6, pc}
 800892a:	f000 f87d 	bl	8008a28 <__malloc_lock>
 800892e:	4a21      	ldr	r2, [pc, #132]	; (80089b4 <_malloc_r+0xac>)
 8008930:	6814      	ldr	r4, [r2, #0]
 8008932:	4621      	mov	r1, r4
 8008934:	b991      	cbnz	r1, 800895c <_malloc_r+0x54>
 8008936:	4c20      	ldr	r4, [pc, #128]	; (80089b8 <_malloc_r+0xb0>)
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	b91b      	cbnz	r3, 8008944 <_malloc_r+0x3c>
 800893c:	4630      	mov	r0, r6
 800893e:	f000 f863 	bl	8008a08 <_sbrk_r>
 8008942:	6020      	str	r0, [r4, #0]
 8008944:	4629      	mov	r1, r5
 8008946:	4630      	mov	r0, r6
 8008948:	f000 f85e 	bl	8008a08 <_sbrk_r>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d124      	bne.n	800899a <_malloc_r+0x92>
 8008950:	230c      	movs	r3, #12
 8008952:	6033      	str	r3, [r6, #0]
 8008954:	4630      	mov	r0, r6
 8008956:	f000 f868 	bl	8008a2a <__malloc_unlock>
 800895a:	e7e4      	b.n	8008926 <_malloc_r+0x1e>
 800895c:	680b      	ldr	r3, [r1, #0]
 800895e:	1b5b      	subs	r3, r3, r5
 8008960:	d418      	bmi.n	8008994 <_malloc_r+0x8c>
 8008962:	2b0b      	cmp	r3, #11
 8008964:	d90f      	bls.n	8008986 <_malloc_r+0x7e>
 8008966:	600b      	str	r3, [r1, #0]
 8008968:	50cd      	str	r5, [r1, r3]
 800896a:	18cc      	adds	r4, r1, r3
 800896c:	4630      	mov	r0, r6
 800896e:	f000 f85c 	bl	8008a2a <__malloc_unlock>
 8008972:	f104 000b 	add.w	r0, r4, #11
 8008976:	1d23      	adds	r3, r4, #4
 8008978:	f020 0007 	bic.w	r0, r0, #7
 800897c:	1ac3      	subs	r3, r0, r3
 800897e:	d0d3      	beq.n	8008928 <_malloc_r+0x20>
 8008980:	425a      	negs	r2, r3
 8008982:	50e2      	str	r2, [r4, r3]
 8008984:	e7d0      	b.n	8008928 <_malloc_r+0x20>
 8008986:	428c      	cmp	r4, r1
 8008988:	684b      	ldr	r3, [r1, #4]
 800898a:	bf16      	itet	ne
 800898c:	6063      	strne	r3, [r4, #4]
 800898e:	6013      	streq	r3, [r2, #0]
 8008990:	460c      	movne	r4, r1
 8008992:	e7eb      	b.n	800896c <_malloc_r+0x64>
 8008994:	460c      	mov	r4, r1
 8008996:	6849      	ldr	r1, [r1, #4]
 8008998:	e7cc      	b.n	8008934 <_malloc_r+0x2c>
 800899a:	1cc4      	adds	r4, r0, #3
 800899c:	f024 0403 	bic.w	r4, r4, #3
 80089a0:	42a0      	cmp	r0, r4
 80089a2:	d005      	beq.n	80089b0 <_malloc_r+0xa8>
 80089a4:	1a21      	subs	r1, r4, r0
 80089a6:	4630      	mov	r0, r6
 80089a8:	f000 f82e 	bl	8008a08 <_sbrk_r>
 80089ac:	3001      	adds	r0, #1
 80089ae:	d0cf      	beq.n	8008950 <_malloc_r+0x48>
 80089b0:	6025      	str	r5, [r4, #0]
 80089b2:	e7db      	b.n	800896c <_malloc_r+0x64>
 80089b4:	200000b0 	.word	0x200000b0
 80089b8:	200000b4 	.word	0x200000b4

080089bc <_realloc_r>:
 80089bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089be:	4607      	mov	r7, r0
 80089c0:	4614      	mov	r4, r2
 80089c2:	460e      	mov	r6, r1
 80089c4:	b921      	cbnz	r1, 80089d0 <_realloc_r+0x14>
 80089c6:	4611      	mov	r1, r2
 80089c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80089cc:	f7ff bf9c 	b.w	8008908 <_malloc_r>
 80089d0:	b922      	cbnz	r2, 80089dc <_realloc_r+0x20>
 80089d2:	f7ff ff4b 	bl	800886c <_free_r>
 80089d6:	4625      	mov	r5, r4
 80089d8:	4628      	mov	r0, r5
 80089da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089dc:	f000 f826 	bl	8008a2c <_malloc_usable_size_r>
 80089e0:	42a0      	cmp	r0, r4
 80089e2:	d20f      	bcs.n	8008a04 <_realloc_r+0x48>
 80089e4:	4621      	mov	r1, r4
 80089e6:	4638      	mov	r0, r7
 80089e8:	f7ff ff8e 	bl	8008908 <_malloc_r>
 80089ec:	4605      	mov	r5, r0
 80089ee:	2800      	cmp	r0, #0
 80089f0:	d0f2      	beq.n	80089d8 <_realloc_r+0x1c>
 80089f2:	4631      	mov	r1, r6
 80089f4:	4622      	mov	r2, r4
 80089f6:	f7ff ff15 	bl	8008824 <memcpy>
 80089fa:	4631      	mov	r1, r6
 80089fc:	4638      	mov	r0, r7
 80089fe:	f7ff ff35 	bl	800886c <_free_r>
 8008a02:	e7e9      	b.n	80089d8 <_realloc_r+0x1c>
 8008a04:	4635      	mov	r5, r6
 8008a06:	e7e7      	b.n	80089d8 <_realloc_r+0x1c>

08008a08 <_sbrk_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4c06      	ldr	r4, [pc, #24]	; (8008a24 <_sbrk_r+0x1c>)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4605      	mov	r5, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	f7fa ff06 	bl	8003824 <_sbrk>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_sbrk_r+0x1a>
 8008a1c:	6823      	ldr	r3, [r4, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_sbrk_r+0x1a>
 8008a20:	602b      	str	r3, [r5, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	20000550 	.word	0x20000550

08008a28 <__malloc_lock>:
 8008a28:	4770      	bx	lr

08008a2a <__malloc_unlock>:
 8008a2a:	4770      	bx	lr

08008a2c <_malloc_usable_size_r>:
 8008a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a30:	1f18      	subs	r0, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfbc      	itt	lt
 8008a36:	580b      	ldrlt	r3, [r1, r0]
 8008a38:	18c0      	addlt	r0, r0, r3
 8008a3a:	4770      	bx	lr

08008a3c <_init>:
 8008a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a3e:	bf00      	nop
 8008a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a42:	bc08      	pop	{r3}
 8008a44:	469e      	mov	lr, r3
 8008a46:	4770      	bx	lr

08008a48 <_fini>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr
